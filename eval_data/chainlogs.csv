chain_name,input_data,output_data,execution_time,query_id,query
CONTEXT_VALIDATOR,"{""query"": ""Explain this to me like I'm 5."", ""repo"": ""https://github.com/smol-ai/developer"", ""similar_documents"": [""# smol developer\r\n\r\n***Human-centric & Coherent Whole Program Synthesis*** aka your own personal junior developer\r\n\r\n> [Build the thing that builds the thing!](https://twitter.com/swyx/status/1657578738345979905) a `smol dev` for every dev in every situation\r\n\r\nthis is a prototype of a \""junior developer\"" agent (aka `smol dev`) that scaffolds an entire codebase out for you once you give it a product spec, but does not end the world or overpromise AGI. instead of making and maintaining specific, rigid, one-shot starters, like `create-react-app`, or `create-nextjs-app`, this is basically [`create-anything-app`](https://news.ycombinator.com/item?id=35942352) where you develop your scaffolding prompt in a tight loop with your smol dev.\r\n\r\nAI that is helpful, harmless, and honest is complemented by a codebase that is simple, safe, and smol - <200 lines of Python and Prompts, so this is easy to understand and customize.\r\n\r\n<p align=\""center\"">\r\n  <img height=200 src=\""https://pbs.twimg.com/media/FwEzVCcaMAE7t4h?format=jpg&name=large\"" />\r\n</p>\r\n\r\n\r\n*engineering with prompts, rather than prompt engineering* \r\n\r\nThe demo example in `prompt.md` shows the potential of AI-enabled, but still firmly human developer centric, workflow:\r\n\r\n- Human writes a basic prompt for the app they want to build\r\n- `main.py` generates code\r\n- Human runs/reads the code\r\n- Human can:\r\n  - simply add to the prompt as they discover underspecified parts of the prompt"", ""<!DOCTYPE html>\r\n<html lang=\""en\"">\r\n<head>\r\n  <meta charset=\""UTF-8\"">\r\n  <meta name=\""viewport\"" content=\""width=device-width, initial-scale=1.0\"">\r\n  <title>Anthropic Summary</title>\r\n  <link rel=\""stylesheet\"" href=\""styles.css\"">\r\n</head>\r\n<body>\r\n  <div id=\""content\""></div>\r\n  <div id=\""loadingIndicator\""></div>\r\n  <textarea id=\""userPrompt\""></textarea>\r\n  <button id=\""sendButton\"">Submit</button>\r\n  <script src=\""popup.js\""></script>\r\n</body>\r\n</html>"", ""- simply add to the prompt as they discover underspecified parts of the prompt\r\n  - manually runs the code and identifies errors\r\n  - *paste the error into the prompt* just like they would file a github issue\r\n  - for extra help, they can use `debugger.py` which reads the whole codebase to make specific code change suggestions\r\n\r\nLoop until happiness is attained. Notice that AI is only used as long as it is adding value - once it gets in your way, just take over the codebase from your smol junior developer with no fuss and no hurt feelings. (*we could also have smol-dev take over an existing codebase and bootstrap its own prompt... but that's a Future Direction*)\r\n\r\n*Not no code, not low code, but some third thing.* \r\n\r\nPerhaps a higher order evolution of programming where you still need to be technical, but no longer have to implement every detail at least to scaffold things out.\r\n\r\n## video demo\r\n\r\n[![https://i3.ytimg.com/vi/UCo7YeTy-aE/hqdefault.jpg](https://i3.ytimg.com/vi/UCo7YeTy-aE/hqdefault.jpg)](https://youtu.be/UCo7YeTy-aE)\r\n\r\n## arch diagram\r\n\r\nnaturally generated with gpt4, like [we did for babyagi](https://twitter.com/swyx/status/1648724820316786688)\r\n![image](https://github.com/smol-ai/developer/assets/6764957/f8fc68f4-77f6-43ee-852f-a35fb195430a)\r\n\r\n\r\n### innovations and insights\r\n\r\n> Please subscribe to https://latent.space/ for a fuller writeup and insights and reflections"", ""modal-client\r\nopenai\r\ntiktoken"", ""body {\r\n  font-family: Arial, sans-serif;\r\n  margin: 0;\r\n  padding: 15px;\r\n}\r\n\r\ntextarea, input {\r\n  display: block;\r\n  width: 100%;\r\n  margin-bottom: 10px;\r\n  padding: 5px;\r\n  font-size: 14px;\r\n}\r\n\r\nbutton {\r\n  background-color: #4CAF50;\r\n  border: none;\r\n  color: white;\r\n  padding: 10px 20px;\r\n  text-align: center;\r\n  text-decoration: none;\r\n  display: inline-block;\r\n  font-size: 14px;\r\n  margin: 10px 0;\r\n  cursor: pointer;\r\n}\r\n\r\nbutton:hover {\r\n  background-color: #45a049;\r\n}\r\n\r\n#content {\r\n  margin-top: 20px;\r\n  font-size: 14px;\r\n  line-height: 1.5;\r\n}\r\n\r\n#loadingIndicator {\r\n  display: none;\r\n  font-size: 14px;\r\n  color: #999;\r\n}""]}",50,0.5822603702545166,0,Explain this to me like I'm 5.
UPGRADE_QUERY,"{""query"": ""Explain this to me like I'm 5."", ""repo"": ""https://github.com/smol-ai/developer""}","1. Can you explain the purpose of the smol-ai/developer repository in simple terms?
2. How can I use the smol-ai/developer repository to improve my coding skills?
3. What are some common issues that developers face when using the smol-ai/developer repository, and how can they be resolved?
4. Can you provide examples of projects that have successfully utilized the smol-ai/developer repository?
5. How does the smol-ai/developer repository differ from other coding resources available online?",10.800431251525879,0,Explain this to me like I'm 5.
CONTEXT_VALIDATOR,"{""query"": ""Can you explain the purpose of the smol-ai/developer repository in simple terms?"", ""repo"": ""https://github.com/smol-ai/developer"", ""similar_documents"": [""# smol developer\r\n\r\n***Human-centric & Coherent Whole Program Synthesis*** aka your own personal junior developer\r\n\r\n> [Build the thing that builds the thing!](https://twitter.com/swyx/status/1657578738345979905) a `smol dev` for every dev in every situation\r\n\r\nthis is a prototype of a \""junior developer\"" agent (aka `smol dev`) that scaffolds an entire codebase out for you once you give it a product spec, but does not end the world or overpromise AGI. instead of making and maintaining specific, rigid, one-shot starters, like `create-react-app`, or `create-nextjs-app`, this is basically [`create-anything-app`](https://news.ycombinator.com/item?id=35942352) where you develop your scaffolding prompt in a tight loop with your smol dev.\r\n\r\nAI that is helpful, harmless, and honest is complemented by a codebase that is simple, safe, and smol - <200 lines of Python and Prompts, so this is easy to understand and customize.\r\n\r\n<p align=\""center\"">\r\n  <img height=200 src=\""https://pbs.twimg.com/media/FwEzVCcaMAE7t4h?format=jpg&name=large\"" />\r\n</p>\r\n\r\n\r\n*engineering with prompts, rather than prompt engineering* \r\n\r\nThe demo example in `prompt.md` shows the potential of AI-enabled, but still firmly human developer centric, workflow:\r\n\r\n- Human writes a basic prompt for the app they want to build\r\n- `main.py` generates code\r\n- Human runs/reads the code\r\n- Human can:\r\n  - simply add to the prompt as they discover underspecified parts of the prompt"", ""- simply add to the prompt as they discover underspecified parts of the prompt\r\n  - manually runs the code and identifies errors\r\n  - *paste the error into the prompt* just like they would file a github issue\r\n  - for extra help, they can use `debugger.py` which reads the whole codebase to make specific code change suggestions\r\n\r\nLoop until happiness is attained. Notice that AI is only used as long as it is adding value - once it gets in your way, just take over the codebase from your smol junior developer with no fuss and no hurt feelings. (*we could also have smol-dev take over an existing codebase and bootstrap its own prompt... but that's a Future Direction*)\r\n\r\n*Not no code, not low code, but some third thing.* \r\n\r\nPerhaps a higher order evolution of programming where you still need to be technical, but no longer have to implement every detail at least to scaffold things out.\r\n\r\n## video demo\r\n\r\n[![https://i3.ytimg.com/vi/UCo7YeTy-aE/hqdefault.jpg](https://i3.ytimg.com/vi/UCo7YeTy-aE/hqdefault.jpg)](https://youtu.be/UCo7YeTy-aE)\r\n\r\n## arch diagram\r\n\r\nnaturally generated with gpt4, like [we did for babyagi](https://twitter.com/swyx/status/1648724820316786688)\r\n![image](https://github.com/smol-ai/developer/assets/6764957/f8fc68f4-77f6-43ee-852f-a35fb195430a)\r\n\r\n\r\n### innovations and insights\r\n\r\n> Please subscribe to https://latent.space/ for a fuller writeup and insights and reflections"", ""## install\r\n\r\nit's basically: \r\n\r\n- `git clone https://github.com/smol-ai/developer`.\r\n- copy over `.example.env` to `.env` filling in your API keys.\r\n\r\nThere are no python dependencies to wrangle thanks to using Modal as a [self-provisioning runtime](https://www.google.com/search?q=self+provisioning+runtime).\r\n\r\nUnfortunately this project also uses 3 waitlisted things:\r\n\r\n- Modal.com - `pip install modal-client` (private beta - hit up the modal team to get an invite, and login)\r\n  - You can run this project w/o Modal following these instructions:\r\n  - `pip install -r requirements.txt`\r\n  - `python main_no_modal.py YOUR_PROMPT_HERE`\r\n- GPT-4 api (private beta) - can use 3.5 but obviously wont be as good\r\n- (for the demo project) anthropic claude 100k context api (private beta)\r\n\r\n> yes, the most important skill in being an ai engineer is social engineering to get off waitlists. Modal will let you in if you say the keyword \""swyx\""\r\n\r\nyou'll have to adapt this code on a fork if you want to use it on other infra. please open issues/PRs and i'll happily highlight your fork here.\r\n\r\n### trying the example chrome extension"", ""modal-client\r\nopenai\r\ntiktoken"", ""- **Markdown is all you need** - Markdown is the perfect way to prompt for whole program synthesis because it is easy to mix english and code (whether `variable_names` or entire \\`\\`\\` code fenced code samples)\r\n  - turns out you can specify prompts in code in prompts and gpt4 obeys that to the letter\r\n- **Copy and paste programming**\r\n  - teaching the program to understand how to code around a new API (Anthropic's API is after GPT3's knowledge cutoff) by just pasting in the `curl` input and output\r\n  - pasting error messages into the prompt and vaguely telling the program how you'd like it handled. it kind of feels like \""logbook driven programming\"".\r\n- **Debugging by `cat`ing** the whole codebase with your error message and getting specific fix suggestions - particularly delightful!\r\n- **Tricks for whole program coherence** - our chosen example usecase, Chrome extensions, have a lot of indirect dependencies across files. Any hallucination of cross dependencies causes the whole program to error. \r\n  - We solved this by adding an intermediate step asking GPT to think through `shared_dependencies.md`, and then insisting on using that in generating each file. This basically means GPT is able to talk to itself...\r\n  - ... but it's not perfect, yet. `shared_dependencies.md` is sometimes not comperehensive in understanding what are hard dependencies between files. So we just solved it by specifying a specific `name` in the prompt. felt dirty at first but it works, and really it's just clear unambiguous communication at the end of the day. \r\n  - see `prompt.md` for SOTA smol-dev prompting\r\n- **Low activation energy for unfamiliar APIs**""]}",90,1.563354730606079,0,Explain this to me like I'm 5.
RUN_QUERY_RAG,"{""query"": ""Can you explain the purpose of the smol-ai/developer repository in simple terms?"", ""repo"": ""https://github.com/smol-ai/developer"", ""similar_documents"": [""# smol developer\r\n\r\n***Human-centric & Coherent Whole Program Synthesis*** aka your own personal junior developer\r\n\r\n> [Build the thing that builds the thing!](https://twitter.com/swyx/status/1657578738345979905) a `smol dev` for every dev in every situation\r\n\r\nthis is a prototype of a \""junior developer\"" agent (aka `smol dev`) that scaffolds an entire codebase out for you once you give it a product spec, but does not end the world or overpromise AGI. instead of making and maintaining specific, rigid, one-shot starters, like `create-react-app`, or `create-nextjs-app`, this is basically [`create-anything-app`](https://news.ycombinator.com/item?id=35942352) where you develop your scaffolding prompt in a tight loop with your smol dev.\r\n\r\nAI that is helpful, harmless, and honest is complemented by a codebase that is simple, safe, and smol - <200 lines of Python and Prompts, so this is easy to understand and customize.\r\n\r\n<p align=\""center\"">\r\n  <img height=200 src=\""https://pbs.twimg.com/media/FwEzVCcaMAE7t4h?format=jpg&name=large\"" />\r\n</p>\r\n\r\n\r\n*engineering with prompts, rather than prompt engineering* \r\n\r\nThe demo example in `prompt.md` shows the potential of AI-enabled, but still firmly human developer centric, workflow:\r\n\r\n- Human writes a basic prompt for the app they want to build\r\n- `main.py` generates code\r\n- Human runs/reads the code\r\n- Human can:\r\n  - simply add to the prompt as they discover underspecified parts of the prompt"", ""- simply add to the prompt as they discover underspecified parts of the prompt\r\n  - manually runs the code and identifies errors\r\n  - *paste the error into the prompt* just like they would file a github issue\r\n  - for extra help, they can use `debugger.py` which reads the whole codebase to make specific code change suggestions\r\n\r\nLoop until happiness is attained. Notice that AI is only used as long as it is adding value - once it gets in your way, just take over the codebase from your smol junior developer with no fuss and no hurt feelings. (*we could also have smol-dev take over an existing codebase and bootstrap its own prompt... but that's a Future Direction*)\r\n\r\n*Not no code, not low code, but some third thing.* \r\n\r\nPerhaps a higher order evolution of programming where you still need to be technical, but no longer have to implement every detail at least to scaffold things out.\r\n\r\n## video demo\r\n\r\n[![https://i3.ytimg.com/vi/UCo7YeTy-aE/hqdefault.jpg](https://i3.ytimg.com/vi/UCo7YeTy-aE/hqdefault.jpg)](https://youtu.be/UCo7YeTy-aE)\r\n\r\n## arch diagram\r\n\r\nnaturally generated with gpt4, like [we did for babyagi](https://twitter.com/swyx/status/1648724820316786688)\r\n![image](https://github.com/smol-ai/developer/assets/6764957/f8fc68f4-77f6-43ee-852f-a35fb195430a)\r\n\r\n\r\n### innovations and insights\r\n\r\n> Please subscribe to https://latent.space/ for a fuller writeup and insights and reflections"", ""## install\r\n\r\nit's basically: \r\n\r\n- `git clone https://github.com/smol-ai/developer`.\r\n- copy over `.example.env` to `.env` filling in your API keys.\r\n\r\nThere are no python dependencies to wrangle thanks to using Modal as a [self-provisioning runtime](https://www.google.com/search?q=self+provisioning+runtime).\r\n\r\nUnfortunately this project also uses 3 waitlisted things:\r\n\r\n- Modal.com - `pip install modal-client` (private beta - hit up the modal team to get an invite, and login)\r\n  - You can run this project w/o Modal following these instructions:\r\n  - `pip install -r requirements.txt`\r\n  - `python main_no_modal.py YOUR_PROMPT_HERE`\r\n- GPT-4 api (private beta) - can use 3.5 but obviously wont be as good\r\n- (for the demo project) anthropic claude 100k context api (private beta)\r\n\r\n> yes, the most important skill in being an ai engineer is social engineering to get off waitlists. Modal will let you in if you say the keyword \""swyx\""\r\n\r\nyou'll have to adapt this code on a fork if you want to use it on other infra. please open issues/PRs and i'll happily highlight your fork here.\r\n\r\n### trying the example chrome extension"", ""modal-client\r\nopenai\r\ntiktoken"", ""- **Markdown is all you need** - Markdown is the perfect way to prompt for whole program synthesis because it is easy to mix english and code (whether `variable_names` or entire \\`\\`\\` code fenced code samples)\r\n  - turns out you can specify prompts in code in prompts and gpt4 obeys that to the letter\r\n- **Copy and paste programming**\r\n  - teaching the program to understand how to code around a new API (Anthropic's API is after GPT3's knowledge cutoff) by just pasting in the `curl` input and output\r\n  - pasting error messages into the prompt and vaguely telling the program how you'd like it handled. it kind of feels like \""logbook driven programming\"".\r\n- **Debugging by `cat`ing** the whole codebase with your error message and getting specific fix suggestions - particularly delightful!\r\n- **Tricks for whole program coherence** - our chosen example usecase, Chrome extensions, have a lot of indirect dependencies across files. Any hallucination of cross dependencies causes the whole program to error. \r\n  - We solved this by adding an intermediate step asking GPT to think through `shared_dependencies.md`, and then insisting on using that in generating each file. This basically means GPT is able to talk to itself...\r\n  - ... but it's not perfect, yet. `shared_dependencies.md` is sometimes not comperehensive in understanding what are hard dependencies between files. So we just solved it by specifying a specific `name` in the prompt. felt dirty at first but it works, and really it's just clear unambiguous communication at the end of the day. \r\n  - see `prompt.md` for SOTA smol-dev prompting\r\n- **Low activation energy for unfamiliar APIs**""]}","The smol-ai/developer repository contains a prototype of a ""junior developer"" agent that scaffolds an entire codebase for users based on a product spec. It is a human-centric and coherent whole program synthesis tool that uses AI to assist developers in creating codebases. The codebase is simple, safe, and less than 200 lines of Python and Prompts, making it easy to understand and customize. The tool uses prompts to generate code, and users can add to the prompt as they discover underspecified parts of the prompt. The AI is only used as long as it is adding value, and users can take over the codebase from the junior developer with no fuss and no hurt feelings. The tool is not no code or low code, but some third thing that still requires technical knowledge. The repository also includes a video demo and an arch diagram. To use the tool, users need to clone the repository and fill in their API keys. The tool uses Modal as a self-provisioning runtime and requires access to Modal.com, GPT-4 API, and Anthropics Claude 100k context API, which are currently in private beta. The tool uses Markdown to prompt for whole program synthesis and allows users to paste in code and error messages to teach the program how to code around a new API. The tool also includes tricks for whole program coherence and low activation energy for unfamiliar APIs.",31.197737216949463,0,Explain this to me like I'm 5.
CONTEXT_VALIDATOR,"{""query"": ""Explain this to me like I'm 5."", ""repo"": ""https://github.com/smol-ai/developer"", ""similar_documents"": [""# smol developer\r\n\r\n***Human-centric & Coherent Whole Program Synthesis*** aka your own personal junior developer\r\n\r\n> [Build the thing that builds the thing!](https://twitter.com/swyx/status/1657578738345979905) a `smol dev` for every dev in every situation\r\n\r\nthis is a prototype of a \""junior developer\"" agent (aka `smol dev`) that scaffolds an entire codebase out for you once you give it a product spec, but does not end the world or overpromise AGI. instead of making and maintaining specific, rigid, one-shot starters, like `create-react-app`, or `create-nextjs-app`, this is basically [`create-anything-app`](https://news.ycombinator.com/item?id=35942352) where you develop your scaffolding prompt in a tight loop with your smol dev.\r\n\r\nAI that is helpful, harmless, and honest is complemented by a codebase that is simple, safe, and smol - <200 lines of Python and Prompts, so this is easy to understand and customize.\r\n\r\n<p align=\""center\"">\r\n  <img height=200 src=\""https://pbs.twimg.com/media/FwEzVCcaMAE7t4h?format=jpg&name=large\"" />\r\n</p>\r\n\r\n\r\n*engineering with prompts, rather than prompt engineering* \r\n\r\nThe demo example in `prompt.md` shows the potential of AI-enabled, but still firmly human developer centric, workflow:\r\n\r\n- Human writes a basic prompt for the app they want to build\r\n- `main.py` generates code\r\n- Human runs/reads the code\r\n- Human can:\r\n  - simply add to the prompt as they discover underspecified parts of the prompt"", ""<!DOCTYPE html>\r\n<html lang=\""en\"">\r\n<head>\r\n  <meta charset=\""UTF-8\"">\r\n  <meta name=\""viewport\"" content=\""width=device-width, initial-scale=1.0\"">\r\n  <title>Anthropic Summary</title>\r\n  <link rel=\""stylesheet\"" href=\""styles.css\"">\r\n</head>\r\n<body>\r\n  <div id=\""content\""></div>\r\n  <div id=\""loadingIndicator\""></div>\r\n  <textarea id=\""userPrompt\""></textarea>\r\n  <button id=\""sendButton\"">Submit</button>\r\n  <script src=\""popup.js\""></script>\r\n</body>\r\n</html>"", ""- simply add to the prompt as they discover underspecified parts of the prompt\r\n  - manually runs the code and identifies errors\r\n  - *paste the error into the prompt* just like they would file a github issue\r\n  - for extra help, they can use `debugger.py` which reads the whole codebase to make specific code change suggestions\r\n\r\nLoop until happiness is attained. Notice that AI is only used as long as it is adding value - once it gets in your way, just take over the codebase from your smol junior developer with no fuss and no hurt feelings. (*we could also have smol-dev take over an existing codebase and bootstrap its own prompt... but that's a Future Direction*)\r\n\r\n*Not no code, not low code, but some third thing.* \r\n\r\nPerhaps a higher order evolution of programming where you still need to be technical, but no longer have to implement every detail at least to scaffold things out.\r\n\r\n## video demo\r\n\r\n[![https://i3.ytimg.com/vi/UCo7YeTy-aE/hqdefault.jpg](https://i3.ytimg.com/vi/UCo7YeTy-aE/hqdefault.jpg)](https://youtu.be/UCo7YeTy-aE)\r\n\r\n## arch diagram\r\n\r\nnaturally generated with gpt4, like [we did for babyagi](https://twitter.com/swyx/status/1648724820316786688)\r\n![image](https://github.com/smol-ai/developer/assets/6764957/f8fc68f4-77f6-43ee-852f-a35fb195430a)\r\n\r\n\r\n### innovations and insights\r\n\r\n> Please subscribe to https://latent.space/ for a fuller writeup and insights and reflections"", ""modal-client\r\nopenai\r\ntiktoken"", ""body {\r\n  font-family: Arial, sans-serif;\r\n  margin: 0;\r\n  padding: 15px;\r\n}\r\n\r\ntextarea, input {\r\n  display: block;\r\n  width: 100%;\r\n  margin-bottom: 10px;\r\n  padding: 5px;\r\n  font-size: 14px;\r\n}\r\n\r\nbutton {\r\n  background-color: #4CAF50;\r\n  border: none;\r\n  color: white;\r\n  padding: 10px 20px;\r\n  text-align: center;\r\n  text-decoration: none;\r\n  display: inline-block;\r\n  font-size: 14px;\r\n  margin: 10px 0;\r\n  cursor: pointer;\r\n}\r\n\r\nbutton:hover {\r\n  background-color: #45a049;\r\n}\r\n\r\n#content {\r\n  margin-top: 20px;\r\n  font-size: 14px;\r\n  line-height: 1.5;\r\n}\r\n\r\n#loadingIndicator {\r\n  display: none;\r\n  font-size: 14px;\r\n  color: #999;\r\n}""]}",50,0.6995372772216797,1,Explain this to me like I'm 5.
UPGRADE_QUERY,"{""query"": ""Explain this to me like I'm 5."", ""repo"": ""https://github.com/smol-ai/developer""}","1. Can you explain what this github repository is for in simple terms?
2. How can I use this repository to improve my coding skills?
3. What are some common issues that developers face when using this repository?
4. Can you walk me through the process of contributing to this repository?
5. What are some best practices for using this repository effectively?",9.342663049697876,1,Explain this to me like I'm 5.
CONTEXT_VALIDATOR,"{""query"": ""Can you explain what this github repository is for in simple terms?"", ""repo"": ""https://github.com/smol-ai/developer"", ""similar_documents"": [""# smol developer\r\n\r\n***Human-centric & Coherent Whole Program Synthesis*** aka your own personal junior developer\r\n\r\n> [Build the thing that builds the thing!](https://twitter.com/swyx/status/1657578738345979905) a `smol dev` for every dev in every situation\r\n\r\nthis is a prototype of a \""junior developer\"" agent (aka `smol dev`) that scaffolds an entire codebase out for you once you give it a product spec, but does not end the world or overpromise AGI. instead of making and maintaining specific, rigid, one-shot starters, like `create-react-app`, or `create-nextjs-app`, this is basically [`create-anything-app`](https://news.ycombinator.com/item?id=35942352) where you develop your scaffolding prompt in a tight loop with your smol dev.\r\n\r\nAI that is helpful, harmless, and honest is complemented by a codebase that is simple, safe, and smol - <200 lines of Python and Prompts, so this is easy to understand and customize.\r\n\r\n<p align=\""center\"">\r\n  <img height=200 src=\""https://pbs.twimg.com/media/FwEzVCcaMAE7t4h?format=jpg&name=large\"" />\r\n</p>\r\n\r\n\r\n*engineering with prompts, rather than prompt engineering* \r\n\r\nThe demo example in `prompt.md` shows the potential of AI-enabled, but still firmly human developer centric, workflow:\r\n\r\n- Human writes a basic prompt for the app they want to build\r\n- `main.py` generates code\r\n- Human runs/reads the code\r\n- Human can:\r\n  - simply add to the prompt as they discover underspecified parts of the prompt"", ""- simply add to the prompt as they discover underspecified parts of the prompt\r\n  - manually runs the code and identifies errors\r\n  - *paste the error into the prompt* just like they would file a github issue\r\n  - for extra help, they can use `debugger.py` which reads the whole codebase to make specific code change suggestions\r\n\r\nLoop until happiness is attained. Notice that AI is only used as long as it is adding value - once it gets in your way, just take over the codebase from your smol junior developer with no fuss and no hurt feelings. (*we could also have smol-dev take over an existing codebase and bootstrap its own prompt... but that's a Future Direction*)\r\n\r\n*Not no code, not low code, but some third thing.* \r\n\r\nPerhaps a higher order evolution of programming where you still need to be technical, but no longer have to implement every detail at least to scaffold things out.\r\n\r\n## video demo\r\n\r\n[![https://i3.ytimg.com/vi/UCo7YeTy-aE/hqdefault.jpg](https://i3.ytimg.com/vi/UCo7YeTy-aE/hqdefault.jpg)](https://youtu.be/UCo7YeTy-aE)\r\n\r\n## arch diagram\r\n\r\nnaturally generated with gpt4, like [we did for babyagi](https://twitter.com/swyx/status/1648724820316786688)\r\n![image](https://github.com/smol-ai/developer/assets/6764957/f8fc68f4-77f6-43ee-852f-a35fb195430a)\r\n\r\n\r\n### innovations and insights\r\n\r\n> Please subscribe to https://latent.space/ for a fuller writeup and insights and reflections"", ""## install\r\n\r\nit's basically: \r\n\r\n- `git clone https://github.com/smol-ai/developer`.\r\n- copy over `.example.env` to `.env` filling in your API keys.\r\n\r\nThere are no python dependencies to wrangle thanks to using Modal as a [self-provisioning runtime](https://www.google.com/search?q=self+provisioning+runtime).\r\n\r\nUnfortunately this project also uses 3 waitlisted things:\r\n\r\n- Modal.com - `pip install modal-client` (private beta - hit up the modal team to get an invite, and login)\r\n  - You can run this project w/o Modal following these instructions:\r\n  - `pip install -r requirements.txt`\r\n  - `python main_no_modal.py YOUR_PROMPT_HERE`\r\n- GPT-4 api (private beta) - can use 3.5 but obviously wont be as good\r\n- (for the demo project) anthropic claude 100k context api (private beta)\r\n\r\n> yes, the most important skill in being an ai engineer is social engineering to get off waitlists. Modal will let you in if you say the keyword \""swyx\""\r\n\r\nyou'll have to adapt this code on a fork if you want to use it on other infra. please open issues/PRs and i'll happily highlight your fork here.\r\n\r\n### trying the example chrome extension"", ""- **Markdown is all you need** - Markdown is the perfect way to prompt for whole program synthesis because it is easy to mix english and code (whether `variable_names` or entire \\`\\`\\` code fenced code samples)\r\n  - turns out you can specify prompts in code in prompts and gpt4 obeys that to the letter\r\n- **Copy and paste programming**\r\n  - teaching the program to understand how to code around a new API (Anthropic's API is after GPT3's knowledge cutoff) by just pasting in the `curl` input and output\r\n  - pasting error messages into the prompt and vaguely telling the program how you'd like it handled. it kind of feels like \""logbook driven programming\"".\r\n- **Debugging by `cat`ing** the whole codebase with your error message and getting specific fix suggestions - particularly delightful!\r\n- **Tricks for whole program coherence** - our chosen example usecase, Chrome extensions, have a lot of indirect dependencies across files. Any hallucination of cross dependencies causes the whole program to error. \r\n  - We solved this by adding an intermediate step asking GPT to think through `shared_dependencies.md`, and then insisting on using that in generating each file. This basically means GPT is able to talk to itself...\r\n  - ... but it's not perfect, yet. `shared_dependencies.md` is sometimes not comperehensive in understanding what are hard dependencies between files. So we just solved it by specifying a specific `name` in the prompt. felt dirty at first but it works, and really it's just clear unambiguous communication at the end of the day. \r\n  - see `prompt.md` for SOTA smol-dev prompting\r\n- **Low activation energy for unfamiliar APIs**"", ""The program is a Chrome extension that summarizes web pages using the Anthropic Claude API. It consists of several files: popup.js, styles.css, \r\nbackground.js, popup.html, shared_dependencies.md, and content_script.js. \r\n\r\npopup.html is the main user interface for the extension, containing a form with several input fields and a submit button. popup.js handles the logic\r\nfor the form, including retrieving the user's input, calling the Anthropic API, and rendering the summary in the content div. styles.css provides \r\nstyling for the UI elements.\r\n\r\nbackground.js is responsible for executing content_script.js, which retrieves the page content (title and body text) and sends it to popup.js for \r\nprocessing. It also handles storing and retrieving the page content data using Chrome's storage API.\r\n\r\nshared_dependencies.md lists the shared variables, data schemas, DOM element IDs, message names, and function names used across the various files.\r\n\r\nOverall, the program uses a combination of JavaScript, HTML, and CSS to provide a user-friendly interface for summarizing web pages using the \r\nAnthropic Claude API.""]}",90,0.8918619155883789,1,Explain this to me like I'm 5.
RUN_QUERY_RAG,"{""query"": ""Can you explain what this github repository is for in simple terms?"", ""repo"": ""https://github.com/smol-ai/developer"", ""similar_documents"": [""# smol developer\r\n\r\n***Human-centric & Coherent Whole Program Synthesis*** aka your own personal junior developer\r\n\r\n> [Build the thing that builds the thing!](https://twitter.com/swyx/status/1657578738345979905) a `smol dev` for every dev in every situation\r\n\r\nthis is a prototype of a \""junior developer\"" agent (aka `smol dev`) that scaffolds an entire codebase out for you once you give it a product spec, but does not end the world or overpromise AGI. instead of making and maintaining specific, rigid, one-shot starters, like `create-react-app`, or `create-nextjs-app`, this is basically [`create-anything-app`](https://news.ycombinator.com/item?id=35942352) where you develop your scaffolding prompt in a tight loop with your smol dev.\r\n\r\nAI that is helpful, harmless, and honest is complemented by a codebase that is simple, safe, and smol - <200 lines of Python and Prompts, so this is easy to understand and customize.\r\n\r\n<p align=\""center\"">\r\n  <img height=200 src=\""https://pbs.twimg.com/media/FwEzVCcaMAE7t4h?format=jpg&name=large\"" />\r\n</p>\r\n\r\n\r\n*engineering with prompts, rather than prompt engineering* \r\n\r\nThe demo example in `prompt.md` shows the potential of AI-enabled, but still firmly human developer centric, workflow:\r\n\r\n- Human writes a basic prompt for the app they want to build\r\n- `main.py` generates code\r\n- Human runs/reads the code\r\n- Human can:\r\n  - simply add to the prompt as they discover underspecified parts of the prompt"", ""- simply add to the prompt as they discover underspecified parts of the prompt\r\n  - manually runs the code and identifies errors\r\n  - *paste the error into the prompt* just like they would file a github issue\r\n  - for extra help, they can use `debugger.py` which reads the whole codebase to make specific code change suggestions\r\n\r\nLoop until happiness is attained. Notice that AI is only used as long as it is adding value - once it gets in your way, just take over the codebase from your smol junior developer with no fuss and no hurt feelings. (*we could also have smol-dev take over an existing codebase and bootstrap its own prompt... but that's a Future Direction*)\r\n\r\n*Not no code, not low code, but some third thing.* \r\n\r\nPerhaps a higher order evolution of programming where you still need to be technical, but no longer have to implement every detail at least to scaffold things out.\r\n\r\n## video demo\r\n\r\n[![https://i3.ytimg.com/vi/UCo7YeTy-aE/hqdefault.jpg](https://i3.ytimg.com/vi/UCo7YeTy-aE/hqdefault.jpg)](https://youtu.be/UCo7YeTy-aE)\r\n\r\n## arch diagram\r\n\r\nnaturally generated with gpt4, like [we did for babyagi](https://twitter.com/swyx/status/1648724820316786688)\r\n![image](https://github.com/smol-ai/developer/assets/6764957/f8fc68f4-77f6-43ee-852f-a35fb195430a)\r\n\r\n\r\n### innovations and insights\r\n\r\n> Please subscribe to https://latent.space/ for a fuller writeup and insights and reflections"", ""## install\r\n\r\nit's basically: \r\n\r\n- `git clone https://github.com/smol-ai/developer`.\r\n- copy over `.example.env` to `.env` filling in your API keys.\r\n\r\nThere are no python dependencies to wrangle thanks to using Modal as a [self-provisioning runtime](https://www.google.com/search?q=self+provisioning+runtime).\r\n\r\nUnfortunately this project also uses 3 waitlisted things:\r\n\r\n- Modal.com - `pip install modal-client` (private beta - hit up the modal team to get an invite, and login)\r\n  - You can run this project w/o Modal following these instructions:\r\n  - `pip install -r requirements.txt`\r\n  - `python main_no_modal.py YOUR_PROMPT_HERE`\r\n- GPT-4 api (private beta) - can use 3.5 but obviously wont be as good\r\n- (for the demo project) anthropic claude 100k context api (private beta)\r\n\r\n> yes, the most important skill in being an ai engineer is social engineering to get off waitlists. Modal will let you in if you say the keyword \""swyx\""\r\n\r\nyou'll have to adapt this code on a fork if you want to use it on other infra. please open issues/PRs and i'll happily highlight your fork here.\r\n\r\n### trying the example chrome extension"", ""- **Markdown is all you need** - Markdown is the perfect way to prompt for whole program synthesis because it is easy to mix english and code (whether `variable_names` or entire \\`\\`\\` code fenced code samples)\r\n  - turns out you can specify prompts in code in prompts and gpt4 obeys that to the letter\r\n- **Copy and paste programming**\r\n  - teaching the program to understand how to code around a new API (Anthropic's API is after GPT3's knowledge cutoff) by just pasting in the `curl` input and output\r\n  - pasting error messages into the prompt and vaguely telling the program how you'd like it handled. it kind of feels like \""logbook driven programming\"".\r\n- **Debugging by `cat`ing** the whole codebase with your error message and getting specific fix suggestions - particularly delightful!\r\n- **Tricks for whole program coherence** - our chosen example usecase, Chrome extensions, have a lot of indirect dependencies across files. Any hallucination of cross dependencies causes the whole program to error. \r\n  - We solved this by adding an intermediate step asking GPT to think through `shared_dependencies.md`, and then insisting on using that in generating each file. This basically means GPT is able to talk to itself...\r\n  - ... but it's not perfect, yet. `shared_dependencies.md` is sometimes not comperehensive in understanding what are hard dependencies between files. So we just solved it by specifying a specific `name` in the prompt. felt dirty at first but it works, and really it's just clear unambiguous communication at the end of the day. \r\n  - see `prompt.md` for SOTA smol-dev prompting\r\n- **Low activation energy for unfamiliar APIs**"", ""The program is a Chrome extension that summarizes web pages using the Anthropic Claude API. It consists of several files: popup.js, styles.css, \r\nbackground.js, popup.html, shared_dependencies.md, and content_script.js. \r\n\r\npopup.html is the main user interface for the extension, containing a form with several input fields and a submit button. popup.js handles the logic\r\nfor the form, including retrieving the user's input, calling the Anthropic API, and rendering the summary in the content div. styles.css provides \r\nstyling for the UI elements.\r\n\r\nbackground.js is responsible for executing content_script.js, which retrieves the page content (title and body text) and sends it to popup.js for \r\nprocessing. It also handles storing and retrieving the page content data using Chrome's storage API.\r\n\r\nshared_dependencies.md lists the shared variables, data schemas, DOM element IDs, message names, and function names used across the various files.\r\n\r\nOverall, the program uses a combination of JavaScript, HTML, and CSS to provide a user-friendly interface for summarizing web pages using the \r\nAnthropic Claude API.""]}","This github repository contains a prototype for a ""junior developer"" agent that scaffolds an entire codebase based on a product spec. It is designed to be helpful, harmless, and honest, and is complemented by a codebase that is simple, safe, and small. The program uses prompts to generate code, and the user can add to the prompt as they discover underspecified parts of it. The AI is only used as long as it is adding value, and the user can take over the codebase from the junior developer at any time. The program is not no code or low code, but some third thing. It is a higher order evolution of programming where you still need to be technical, but no longer have to implement every detail to scaffold things out. The program is a Chrome extension that summarizes web pages using the Anthropic Claude API. It consists of several files: popup.js, styles.css, background.js, popup.html, shared_dependencies.md, and content_script.js.",17.170140743255615,1,Explain this to me like I'm 5.
CONTEXT_VALIDATOR,"{""query"": ""Explain this to me like I'm 5."", ""repo"": ""https://github.com/smol-ai/developer"", ""similar_documents"": [""# smol developer\r\n\r\n***Human-centric & Coherent Whole Program Synthesis*** aka your own personal junior developer\r\n\r\n> [Build the thing that builds the thing!](https://twitter.com/swyx/status/1657578738345979905) a `smol dev` for every dev in every situation\r\n\r\nthis is a prototype of a \""junior developer\"" agent (aka `smol dev`) that scaffolds an entire codebase out for you once you give it a product spec, but does not end the world or overpromise AGI. instead of making and maintaining specific, rigid, one-shot starters, like `create-react-app`, or `create-nextjs-app`, this is basically [`create-anything-app`](https://news.ycombinator.com/item?id=35942352) where you develop your scaffolding prompt in a tight loop with your smol dev.\r\n\r\nAI that is helpful, harmless, and honest is complemented by a codebase that is simple, safe, and smol - <200 lines of Python and Prompts, so this is easy to understand and customize.\r\n\r\n<p align=\""center\"">\r\n  <img height=200 src=\""https://pbs.twimg.com/media/FwEzVCcaMAE7t4h?format=jpg&name=large\"" />\r\n</p>\r\n\r\n\r\n*engineering with prompts, rather than prompt engineering* \r\n\r\nThe demo example in `prompt.md` shows the potential of AI-enabled, but still firmly human developer centric, workflow:\r\n\r\n- Human writes a basic prompt for the app they want to build\r\n- `main.py` generates code\r\n- Human runs/reads the code\r\n- Human can:\r\n  - simply add to the prompt as they discover underspecified parts of the prompt"", ""<!DOCTYPE html>\r\n<html lang=\""en\"">\r\n<head>\r\n  <meta charset=\""UTF-8\"">\r\n  <meta name=\""viewport\"" content=\""width=device-width, initial-scale=1.0\"">\r\n  <title>Anthropic Summary</title>\r\n  <link rel=\""stylesheet\"" href=\""styles.css\"">\r\n</head>\r\n<body>\r\n  <div id=\""content\""></div>\r\n  <div id=\""loadingIndicator\""></div>\r\n  <textarea id=\""userPrompt\""></textarea>\r\n  <button id=\""sendButton\"">Submit</button>\r\n  <script src=\""popup.js\""></script>\r\n</body>\r\n</html>"", ""- simply add to the prompt as they discover underspecified parts of the prompt\r\n  - manually runs the code and identifies errors\r\n  - *paste the error into the prompt* just like they would file a github issue\r\n  - for extra help, they can use `debugger.py` which reads the whole codebase to make specific code change suggestions\r\n\r\nLoop until happiness is attained. Notice that AI is only used as long as it is adding value - once it gets in your way, just take over the codebase from your smol junior developer with no fuss and no hurt feelings. (*we could also have smol-dev take over an existing codebase and bootstrap its own prompt... but that's a Future Direction*)\r\n\r\n*Not no code, not low code, but some third thing.* \r\n\r\nPerhaps a higher order evolution of programming where you still need to be technical, but no longer have to implement every detail at least to scaffold things out.\r\n\r\n## video demo\r\n\r\n[![https://i3.ytimg.com/vi/UCo7YeTy-aE/hqdefault.jpg](https://i3.ytimg.com/vi/UCo7YeTy-aE/hqdefault.jpg)](https://youtu.be/UCo7YeTy-aE)\r\n\r\n## arch diagram\r\n\r\nnaturally generated with gpt4, like [we did for babyagi](https://twitter.com/swyx/status/1648724820316786688)\r\n![image](https://github.com/smol-ai/developer/assets/6764957/f8fc68f4-77f6-43ee-852f-a35fb195430a)\r\n\r\n\r\n### innovations and insights\r\n\r\n> Please subscribe to https://latent.space/ for a fuller writeup and insights and reflections"", ""modal-client\r\nopenai\r\ntiktoken"", ""body {\r\n  font-family: Arial, sans-serif;\r\n  margin: 0;\r\n  padding: 15px;\r\n}\r\n\r\ntextarea, input {\r\n  display: block;\r\n  width: 100%;\r\n  margin-bottom: 10px;\r\n  padding: 5px;\r\n  font-size: 14px;\r\n}\r\n\r\nbutton {\r\n  background-color: #4CAF50;\r\n  border: none;\r\n  color: white;\r\n  padding: 10px 20px;\r\n  text-align: center;\r\n  text-decoration: none;\r\n  display: inline-block;\r\n  font-size: 14px;\r\n  margin: 10px 0;\r\n  cursor: pointer;\r\n}\r\n\r\nbutton:hover {\r\n  background-color: #45a049;\r\n}\r\n\r\n#content {\r\n  margin-top: 20px;\r\n  font-size: 14px;\r\n  line-height: 1.5;\r\n}\r\n\r\n#loadingIndicator {\r\n  display: none;\r\n  font-size: 14px;\r\n  color: #999;\r\n}""]}",50,0.5060803890228271,2,Explain this to me like I'm 5.
UPGRADE_QUERY,"{""query"": ""Explain this to me like I'm 5."", ""repo"": ""https://github.com/smol-ai/developer""}","1. Can you explain what this github repository is for in simple terms?
2. How can I use this repository to improve my coding skills?
3. What are some common issues that developers face when using this repository?
4. Can you give me an example of how to use a specific feature in this repository?
5. What are some best practices for contributing to this repository?",7.127873182296753,2,Explain this to me like I'm 5.
CONTEXT_VALIDATOR,"{""query"": ""Can you explain what this github repository is for in simple terms?"", ""repo"": ""https://github.com/smol-ai/developer"", ""similar_documents"": [""# smol developer\r\n\r\n***Human-centric & Coherent Whole Program Synthesis*** aka your own personal junior developer\r\n\r\n> [Build the thing that builds the thing!](https://twitter.com/swyx/status/1657578738345979905) a `smol dev` for every dev in every situation\r\n\r\nthis is a prototype of a \""junior developer\"" agent (aka `smol dev`) that scaffolds an entire codebase out for you once you give it a product spec, but does not end the world or overpromise AGI. instead of making and maintaining specific, rigid, one-shot starters, like `create-react-app`, or `create-nextjs-app`, this is basically [`create-anything-app`](https://news.ycombinator.com/item?id=35942352) where you develop your scaffolding prompt in a tight loop with your smol dev.\r\n\r\nAI that is helpful, harmless, and honest is complemented by a codebase that is simple, safe, and smol - <200 lines of Python and Prompts, so this is easy to understand and customize.\r\n\r\n<p align=\""center\"">\r\n  <img height=200 src=\""https://pbs.twimg.com/media/FwEzVCcaMAE7t4h?format=jpg&name=large\"" />\r\n</p>\r\n\r\n\r\n*engineering with prompts, rather than prompt engineering* \r\n\r\nThe demo example in `prompt.md` shows the potential of AI-enabled, but still firmly human developer centric, workflow:\r\n\r\n- Human writes a basic prompt for the app they want to build\r\n- `main.py` generates code\r\n- Human runs/reads the code\r\n- Human can:\r\n  - simply add to the prompt as they discover underspecified parts of the prompt"", ""- simply add to the prompt as they discover underspecified parts of the prompt\r\n  - manually runs the code and identifies errors\r\n  - *paste the error into the prompt* just like they would file a github issue\r\n  - for extra help, they can use `debugger.py` which reads the whole codebase to make specific code change suggestions\r\n\r\nLoop until happiness is attained. Notice that AI is only used as long as it is adding value - once it gets in your way, just take over the codebase from your smol junior developer with no fuss and no hurt feelings. (*we could also have smol-dev take over an existing codebase and bootstrap its own prompt... but that's a Future Direction*)\r\n\r\n*Not no code, not low code, but some third thing.* \r\n\r\nPerhaps a higher order evolution of programming where you still need to be technical, but no longer have to implement every detail at least to scaffold things out.\r\n\r\n## video demo\r\n\r\n[![https://i3.ytimg.com/vi/UCo7YeTy-aE/hqdefault.jpg](https://i3.ytimg.com/vi/UCo7YeTy-aE/hqdefault.jpg)](https://youtu.be/UCo7YeTy-aE)\r\n\r\n## arch diagram\r\n\r\nnaturally generated with gpt4, like [we did for babyagi](https://twitter.com/swyx/status/1648724820316786688)\r\n![image](https://github.com/smol-ai/developer/assets/6764957/f8fc68f4-77f6-43ee-852f-a35fb195430a)\r\n\r\n\r\n### innovations and insights\r\n\r\n> Please subscribe to https://latent.space/ for a fuller writeup and insights and reflections"", ""## install\r\n\r\nit's basically: \r\n\r\n- `git clone https://github.com/smol-ai/developer`.\r\n- copy over `.example.env` to `.env` filling in your API keys.\r\n\r\nThere are no python dependencies to wrangle thanks to using Modal as a [self-provisioning runtime](https://www.google.com/search?q=self+provisioning+runtime).\r\n\r\nUnfortunately this project also uses 3 waitlisted things:\r\n\r\n- Modal.com - `pip install modal-client` (private beta - hit up the modal team to get an invite, and login)\r\n  - You can run this project w/o Modal following these instructions:\r\n  - `pip install -r requirements.txt`\r\n  - `python main_no_modal.py YOUR_PROMPT_HERE`\r\n- GPT-4 api (private beta) - can use 3.5 but obviously wont be as good\r\n- (for the demo project) anthropic claude 100k context api (private beta)\r\n\r\n> yes, the most important skill in being an ai engineer is social engineering to get off waitlists. Modal will let you in if you say the keyword \""swyx\""\r\n\r\nyou'll have to adapt this code on a fork if you want to use it on other infra. please open issues/PRs and i'll happily highlight your fork here.\r\n\r\n### trying the example chrome extension"", ""- **Markdown is all you need** - Markdown is the perfect way to prompt for whole program synthesis because it is easy to mix english and code (whether `variable_names` or entire \\`\\`\\` code fenced code samples)\r\n  - turns out you can specify prompts in code in prompts and gpt4 obeys that to the letter\r\n- **Copy and paste programming**\r\n  - teaching the program to understand how to code around a new API (Anthropic's API is after GPT3's knowledge cutoff) by just pasting in the `curl` input and output\r\n  - pasting error messages into the prompt and vaguely telling the program how you'd like it handled. it kind of feels like \""logbook driven programming\"".\r\n- **Debugging by `cat`ing** the whole codebase with your error message and getting specific fix suggestions - particularly delightful!\r\n- **Tricks for whole program coherence** - our chosen example usecase, Chrome extensions, have a lot of indirect dependencies across files. Any hallucination of cross dependencies causes the whole program to error. \r\n  - We solved this by adding an intermediate step asking GPT to think through `shared_dependencies.md`, and then insisting on using that in generating each file. This basically means GPT is able to talk to itself...\r\n  - ... but it's not perfect, yet. `shared_dependencies.md` is sometimes not comperehensive in understanding what are hard dependencies between files. So we just solved it by specifying a specific `name` in the prompt. felt dirty at first but it works, and really it's just clear unambiguous communication at the end of the day. \r\n  - see `prompt.md` for SOTA smol-dev prompting\r\n- **Low activation energy for unfamiliar APIs**"", ""The program is a Chrome extension that summarizes web pages using the Anthropic Claude API. It consists of several files: popup.js, styles.css, \r\nbackground.js, popup.html, shared_dependencies.md, and content_script.js. \r\n\r\npopup.html is the main user interface for the extension, containing a form with several input fields and a submit button. popup.js handles the logic\r\nfor the form, including retrieving the user's input, calling the Anthropic API, and rendering the summary in the content div. styles.css provides \r\nstyling for the UI elements.\r\n\r\nbackground.js is responsible for executing content_script.js, which retrieves the page content (title and body text) and sends it to popup.js for \r\nprocessing. It also handles storing and retrieving the page content data using Chrome's storage API.\r\n\r\nshared_dependencies.md lists the shared variables, data schemas, DOM element IDs, message names, and function names used across the various files.\r\n\r\nOverall, the program uses a combination of JavaScript, HTML, and CSS to provide a user-friendly interface for summarizing web pages using the \r\nAnthropic Claude API.""]}",80,33.055988073349,2,Explain this to me like I'm 5.
RUN_QUERY_RAG,"{""query"": ""Can you explain what this github repository is for in simple terms?"", ""repo"": ""https://github.com/smol-ai/developer"", ""similar_documents"": [""# smol developer\r\n\r\n***Human-centric & Coherent Whole Program Synthesis*** aka your own personal junior developer\r\n\r\n> [Build the thing that builds the thing!](https://twitter.com/swyx/status/1657578738345979905) a `smol dev` for every dev in every situation\r\n\r\nthis is a prototype of a \""junior developer\"" agent (aka `smol dev`) that scaffolds an entire codebase out for you once you give it a product spec, but does not end the world or overpromise AGI. instead of making and maintaining specific, rigid, one-shot starters, like `create-react-app`, or `create-nextjs-app`, this is basically [`create-anything-app`](https://news.ycombinator.com/item?id=35942352) where you develop your scaffolding prompt in a tight loop with your smol dev.\r\n\r\nAI that is helpful, harmless, and honest is complemented by a codebase that is simple, safe, and smol - <200 lines of Python and Prompts, so this is easy to understand and customize.\r\n\r\n<p align=\""center\"">\r\n  <img height=200 src=\""https://pbs.twimg.com/media/FwEzVCcaMAE7t4h?format=jpg&name=large\"" />\r\n</p>\r\n\r\n\r\n*engineering with prompts, rather than prompt engineering* \r\n\r\nThe demo example in `prompt.md` shows the potential of AI-enabled, but still firmly human developer centric, workflow:\r\n\r\n- Human writes a basic prompt for the app they want to build\r\n- `main.py` generates code\r\n- Human runs/reads the code\r\n- Human can:\r\n  - simply add to the prompt as they discover underspecified parts of the prompt"", ""- simply add to the prompt as they discover underspecified parts of the prompt\r\n  - manually runs the code and identifies errors\r\n  - *paste the error into the prompt* just like they would file a github issue\r\n  - for extra help, they can use `debugger.py` which reads the whole codebase to make specific code change suggestions\r\n\r\nLoop until happiness is attained. Notice that AI is only used as long as it is adding value - once it gets in your way, just take over the codebase from your smol junior developer with no fuss and no hurt feelings. (*we could also have smol-dev take over an existing codebase and bootstrap its own prompt... but that's a Future Direction*)\r\n\r\n*Not no code, not low code, but some third thing.* \r\n\r\nPerhaps a higher order evolution of programming where you still need to be technical, but no longer have to implement every detail at least to scaffold things out.\r\n\r\n## video demo\r\n\r\n[![https://i3.ytimg.com/vi/UCo7YeTy-aE/hqdefault.jpg](https://i3.ytimg.com/vi/UCo7YeTy-aE/hqdefault.jpg)](https://youtu.be/UCo7YeTy-aE)\r\n\r\n## arch diagram\r\n\r\nnaturally generated with gpt4, like [we did for babyagi](https://twitter.com/swyx/status/1648724820316786688)\r\n![image](https://github.com/smol-ai/developer/assets/6764957/f8fc68f4-77f6-43ee-852f-a35fb195430a)\r\n\r\n\r\n### innovations and insights\r\n\r\n> Please subscribe to https://latent.space/ for a fuller writeup and insights and reflections"", ""## install\r\n\r\nit's basically: \r\n\r\n- `git clone https://github.com/smol-ai/developer`.\r\n- copy over `.example.env` to `.env` filling in your API keys.\r\n\r\nThere are no python dependencies to wrangle thanks to using Modal as a [self-provisioning runtime](https://www.google.com/search?q=self+provisioning+runtime).\r\n\r\nUnfortunately this project also uses 3 waitlisted things:\r\n\r\n- Modal.com - `pip install modal-client` (private beta - hit up the modal team to get an invite, and login)\r\n  - You can run this project w/o Modal following these instructions:\r\n  - `pip install -r requirements.txt`\r\n  - `python main_no_modal.py YOUR_PROMPT_HERE`\r\n- GPT-4 api (private beta) - can use 3.5 but obviously wont be as good\r\n- (for the demo project) anthropic claude 100k context api (private beta)\r\n\r\n> yes, the most important skill in being an ai engineer is social engineering to get off waitlists. Modal will let you in if you say the keyword \""swyx\""\r\n\r\nyou'll have to adapt this code on a fork if you want to use it on other infra. please open issues/PRs and i'll happily highlight your fork here.\r\n\r\n### trying the example chrome extension"", ""- **Markdown is all you need** - Markdown is the perfect way to prompt for whole program synthesis because it is easy to mix english and code (whether `variable_names` or entire \\`\\`\\` code fenced code samples)\r\n  - turns out you can specify prompts in code in prompts and gpt4 obeys that to the letter\r\n- **Copy and paste programming**\r\n  - teaching the program to understand how to code around a new API (Anthropic's API is after GPT3's knowledge cutoff) by just pasting in the `curl` input and output\r\n  - pasting error messages into the prompt and vaguely telling the program how you'd like it handled. it kind of feels like \""logbook driven programming\"".\r\n- **Debugging by `cat`ing** the whole codebase with your error message and getting specific fix suggestions - particularly delightful!\r\n- **Tricks for whole program coherence** - our chosen example usecase, Chrome extensions, have a lot of indirect dependencies across files. Any hallucination of cross dependencies causes the whole program to error. \r\n  - We solved this by adding an intermediate step asking GPT to think through `shared_dependencies.md`, and then insisting on using that in generating each file. This basically means GPT is able to talk to itself...\r\n  - ... but it's not perfect, yet. `shared_dependencies.md` is sometimes not comperehensive in understanding what are hard dependencies between files. So we just solved it by specifying a specific `name` in the prompt. felt dirty at first but it works, and really it's just clear unambiguous communication at the end of the day. \r\n  - see `prompt.md` for SOTA smol-dev prompting\r\n- **Low activation energy for unfamiliar APIs**"", ""The program is a Chrome extension that summarizes web pages using the Anthropic Claude API. It consists of several files: popup.js, styles.css, \r\nbackground.js, popup.html, shared_dependencies.md, and content_script.js. \r\n\r\npopup.html is the main user interface for the extension, containing a form with several input fields and a submit button. popup.js handles the logic\r\nfor the form, including retrieving the user's input, calling the Anthropic API, and rendering the summary in the content div. styles.css provides \r\nstyling for the UI elements.\r\n\r\nbackground.js is responsible for executing content_script.js, which retrieves the page content (title and body text) and sends it to popup.js for \r\nprocessing. It also handles storing and retrieving the page content data using Chrome's storage API.\r\n\r\nshared_dependencies.md lists the shared variables, data schemas, DOM element IDs, message names, and function names used across the various files.\r\n\r\nOverall, the program uses a combination of JavaScript, HTML, and CSS to provide a user-friendly interface for summarizing web pages using the \r\nAnthropic Claude API.""]}","This github repository contains a prototype for a ""junior developer"" agent that scaffolds an entire codebase based on a product spec. It is designed to be helpful, harmless, and honest, and is complemented by a codebase that is simple, safe, and small. The program uses prompts to generate code, and the user can manually run and read the code, add to the prompt, and paste error messages into the prompt. The program is not no code or low code, but rather a third thing that still requires technical knowledge. The repository also includes a video demo and an arch diagram. The program is a Chrome extension that summarizes web pages using the Anthropic Claude API and uses a combination of JavaScript, HTML, and CSS to provide a user-friendly interface.",15.000441312789917,2,Explain this to me like I'm 5.
CONTEXT_VALIDATOR,"{""query"": ""What does this do?"", ""repo"": ""https://github.com/smol-ai/developer"", ""similar_documents"": [""# todo\r\n# https://twitter.com/nathanwchan/status/1658153897154981888?s=20"", ""# smol developer\r\n\r\n***Human-centric & Coherent Whole Program Synthesis*** aka your own personal junior developer\r\n\r\n> [Build the thing that builds the thing!](https://twitter.com/swyx/status/1657578738345979905) a `smol dev` for every dev in every situation\r\n\r\nthis is a prototype of a \""junior developer\"" agent (aka `smol dev`) that scaffolds an entire codebase out for you once you give it a product spec, but does not end the world or overpromise AGI. instead of making and maintaining specific, rigid, one-shot starters, like `create-react-app`, or `create-nextjs-app`, this is basically [`create-anything-app`](https://news.ycombinator.com/item?id=35942352) where you develop your scaffolding prompt in a tight loop with your smol dev.\r\n\r\nAI that is helpful, harmless, and honest is complemented by a codebase that is simple, safe, and smol - <200 lines of Python and Prompts, so this is easy to understand and customize.\r\n\r\n<p align=\""center\"">\r\n  <img height=200 src=\""https://pbs.twimg.com/media/FwEzVCcaMAE7t4h?format=jpg&name=large\"" />\r\n</p>\r\n\r\n\r\n*engineering with prompts, rather than prompt engineering* \r\n\r\nThe demo example in `prompt.md` shows the potential of AI-enabled, but still firmly human developer centric, workflow:\r\n\r\n- Human writes a basic prompt for the app they want to build\r\n- `main.py` generates code\r\n- Human runs/reads the code\r\n- Human can:\r\n  - simply add to the prompt as they discover underspecified parts of the prompt"", ""modal-client\r\nopenai\r\ntiktoken"", ""body {\r\n  font-family: Arial, sans-serif;\r\n  margin: 0;\r\n  padding: 15px;\r\n}\r\n\r\ntextarea, input {\r\n  display: block;\r\n  width: 100%;\r\n  margin-bottom: 10px;\r\n  padding: 5px;\r\n  font-size: 14px;\r\n}\r\n\r\nbutton {\r\n  background-color: #4CAF50;\r\n  border: none;\r\n  color: white;\r\n  padding: 10px 20px;\r\n  text-align: center;\r\n  text-decoration: none;\r\n  display: inline-block;\r\n  font-size: 14px;\r\n  margin: 10px 0;\r\n  cursor: pointer;\r\n}\r\n\r\nbutton:hover {\r\n  background-color: #45a049;\r\n}\r\n\r\n#content {\r\n  margin-top: 20px;\r\n  font-size: 14px;\r\n  line-height: 1.5;\r\n}\r\n\r\n#loadingIndicator {\r\n  display: none;\r\n  font-size: 14px;\r\n  color: #999;\r\n}"", ""The program is a Chrome extension that summarizes web pages using the Anthropic Claude API. It consists of several files: popup.js, styles.css, \r\nbackground.js, popup.html, shared_dependencies.md, and content_script.js. \r\n\r\npopup.html is the main user interface for the extension, containing a form with several input fields and a submit button. popup.js handles the logic\r\nfor the form, including retrieving the user's input, calling the Anthropic API, and rendering the summary in the content div. styles.css provides \r\nstyling for the UI elements.\r\n\r\nbackground.js is responsible for executing content_script.js, which retrieves the page content (title and body text) and sends it to popup.js for \r\nprocessing. It also handles storing and retrieving the page content data using Chrome's storage API.\r\n\r\nshared_dependencies.md lists the shared variables, data schemas, DOM element IDs, message names, and function names used across the various files.\r\n\r\nOverall, the program uses a combination of JavaScript, HTML, and CSS to provide a user-friendly interface for summarizing web pages using the \r\nAnthropic Claude API.""]}",50,0.5142896175384521,0,What does this do?
UPGRADE_QUERY,"{""query"": ""What does this do?"", ""repo"": ""https://github.com/smol-ai/developer""}","1. What is the purpose of the code in this repository?
2. Can you explain the functionality of the code in this repository?
3. How does the code in this repository work?
4. What problem does the code in this repository solve?
5. What are the key features of the code in this repository?",7.204186201095581,0,What does this do?
CONTEXT_VALIDATOR,"{""query"": ""What is the purpose of the code in this repository?"", ""repo"": ""https://github.com/smol-ai/developer"", ""similar_documents"": [""- simply add to the prompt as they discover underspecified parts of the prompt\r\n  - manually runs the code and identifies errors\r\n  - *paste the error into the prompt* just like they would file a github issue\r\n  - for extra help, they can use `debugger.py` which reads the whole codebase to make specific code change suggestions\r\n\r\nLoop until happiness is attained. Notice that AI is only used as long as it is adding value - once it gets in your way, just take over the codebase from your smol junior developer with no fuss and no hurt feelings. (*we could also have smol-dev take over an existing codebase and bootstrap its own prompt... but that's a Future Direction*)\r\n\r\n*Not no code, not low code, but some third thing.* \r\n\r\nPerhaps a higher order evolution of programming where you still need to be technical, but no longer have to implement every detail at least to scaffold things out.\r\n\r\n## video demo\r\n\r\n[![https://i3.ytimg.com/vi/UCo7YeTy-aE/hqdefault.jpg](https://i3.ytimg.com/vi/UCo7YeTy-aE/hqdefault.jpg)](https://youtu.be/UCo7YeTy-aE)\r\n\r\n## arch diagram\r\n\r\nnaturally generated with gpt4, like [we did for babyagi](https://twitter.com/swyx/status/1648724820316786688)\r\n![image](https://github.com/smol-ai/developer/assets/6764957/f8fc68f4-77f6-43ee-852f-a35fb195430a)\r\n\r\n\r\n### innovations and insights\r\n\r\n> Please subscribe to https://latent.space/ for a fuller writeup and insights and reflections"", ""MIT License Copyright (c) 2023 swyx\r\n\r\nPermission is hereby granted, free of\r\ncharge, to any person obtaining a copy of this software and associated\r\ndocumentation files (the \""Software\""), to deal in the Software without\r\nrestriction, including without limitation the rights to use, copy, modify, merge,\r\npublish, distribute, sublicense, and/or sell copies of the Software, and to\r\npermit persons to whom the Software is furnished to do so, subject to the\r\nfollowing conditions:\r\n\r\nThe above copyright notice and this permission notice\r\n(including the next paragraph) shall be included in all copies or substantial\r\nportions of the Software.\r\n\r\nTHE SOFTWARE IS PROVIDED \""AS IS\"", WITHOUT WARRANTY OF\r\nANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\r\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO\r\nEVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR\r\nOTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\r\nFROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\nTHE SOFTWARE."", ""- **ability to install its own dependencies**\r\n  - this leaks into depending on the execution environment, which we all know is the path to dependency madness. how to avoid? dockerize? nix? [web container](https://twitter.com/litbid/status/1658154530385670150)?\r\n  - Modal has an interesting possibility: generate functions that speak modal which also solves the dependency thing https://twitter.com/akshat_b/status/1658146096902811657\r\n- **self-heal** by running the code itself and use errors as information for reprompting \r\n  - however its a bit hard to get errors from the chrome extension environment so we did not try this\r\n- **using anthropic as the coding layer**\r\n  - you can run `modal run anthropic.py --prompt prompt.md --outputdir=anthropic` to try it\r\n  - but it doesnt work because anthropic doesnt follow instructions to generate file code very well.\r\n- **make agents that autonomously run this code in a loop/watch the prompt file** and regenerate code each time, on a new git branch\r\n  - the code could be generated on 5 simultaneous git branches and checking their output would just involve switching git branches"", ""# smol developer\r\n\r\n***Human-centric & Coherent Whole Program Synthesis*** aka your own personal junior developer\r\n\r\n> [Build the thing that builds the thing!](https://twitter.com/swyx/status/1657578738345979905) a `smol dev` for every dev in every situation\r\n\r\nthis is a prototype of a \""junior developer\"" agent (aka `smol dev`) that scaffolds an entire codebase out for you once you give it a product spec, but does not end the world or overpromise AGI. instead of making and maintaining specific, rigid, one-shot starters, like `create-react-app`, or `create-nextjs-app`, this is basically [`create-anything-app`](https://news.ycombinator.com/item?id=35942352) where you develop your scaffolding prompt in a tight loop with your smol dev.\r\n\r\nAI that is helpful, harmless, and honest is complemented by a codebase that is simple, safe, and smol - <200 lines of Python and Prompts, so this is easy to understand and customize.\r\n\r\n<p align=\""center\"">\r\n  <img height=200 src=\""https://pbs.twimg.com/media/FwEzVCcaMAE7t4h?format=jpg&name=large\"" />\r\n</p>\r\n\r\n\r\n*engineering with prompts, rather than prompt engineering* \r\n\r\nThe demo example in `prompt.md` shows the potential of AI-enabled, but still firmly human developer centric, workflow:\r\n\r\n- Human writes a basic prompt for the app they want to build\r\n- `main.py` generates code\r\n- Human runs/reads the code\r\n- Human can:\r\n  - simply add to the prompt as they discover underspecified parts of the prompt"", ""- **Markdown is all you need** - Markdown is the perfect way to prompt for whole program synthesis because it is easy to mix english and code (whether `variable_names` or entire \\`\\`\\` code fenced code samples)\r\n  - turns out you can specify prompts in code in prompts and gpt4 obeys that to the letter\r\n- **Copy and paste programming**\r\n  - teaching the program to understand how to code around a new API (Anthropic's API is after GPT3's knowledge cutoff) by just pasting in the `curl` input and output\r\n  - pasting error messages into the prompt and vaguely telling the program how you'd like it handled. it kind of feels like \""logbook driven programming\"".\r\n- **Debugging by `cat`ing** the whole codebase with your error message and getting specific fix suggestions - particularly delightful!\r\n- **Tricks for whole program coherence** - our chosen example usecase, Chrome extensions, have a lot of indirect dependencies across files. Any hallucination of cross dependencies causes the whole program to error. \r\n  - We solved this by adding an intermediate step asking GPT to think through `shared_dependencies.md`, and then insisting on using that in generating each file. This basically means GPT is able to talk to itself...\r\n  - ... but it's not perfect, yet. `shared_dependencies.md` is sometimes not comperehensive in understanding what are hard dependencies between files. So we just solved it by specifying a specific `name` in the prompt. felt dirty at first but it works, and really it's just clear unambiguous communication at the end of the day. \r\n  - see `prompt.md` for SOTA smol-dev prompting\r\n- **Low activation energy for unfamiliar APIs**""]}",50,0.6034767627716064,0,What does this do?
CONTEXT_VALIDATOR,"{""query"": ""Can you explain the functionality of the code in this repository?"", ""repo"": ""https://github.com/smol-ai/developer"", ""similar_documents"": [""- simply add to the prompt as they discover underspecified parts of the prompt\r\n  - manually runs the code and identifies errors\r\n  - *paste the error into the prompt* just like they would file a github issue\r\n  - for extra help, they can use `debugger.py` which reads the whole codebase to make specific code change suggestions\r\n\r\nLoop until happiness is attained. Notice that AI is only used as long as it is adding value - once it gets in your way, just take over the codebase from your smol junior developer with no fuss and no hurt feelings. (*we could also have smol-dev take over an existing codebase and bootstrap its own prompt... but that's a Future Direction*)\r\n\r\n*Not no code, not low code, but some third thing.* \r\n\r\nPerhaps a higher order evolution of programming where you still need to be technical, but no longer have to implement every detail at least to scaffold things out.\r\n\r\n## video demo\r\n\r\n[![https://i3.ytimg.com/vi/UCo7YeTy-aE/hqdefault.jpg](https://i3.ytimg.com/vi/UCo7YeTy-aE/hqdefault.jpg)](https://youtu.be/UCo7YeTy-aE)\r\n\r\n## arch diagram\r\n\r\nnaturally generated with gpt4, like [we did for babyagi](https://twitter.com/swyx/status/1648724820316786688)\r\n![image](https://github.com/smol-ai/developer/assets/6764957/f8fc68f4-77f6-43ee-852f-a35fb195430a)\r\n\r\n\r\n### innovations and insights\r\n\r\n> Please subscribe to https://latent.space/ for a fuller writeup and insights and reflections"", ""- **ability to install its own dependencies**\r\n  - this leaks into depending on the execution environment, which we all know is the path to dependency madness. how to avoid? dockerize? nix? [web container](https://twitter.com/litbid/status/1658154530385670150)?\r\n  - Modal has an interesting possibility: generate functions that speak modal which also solves the dependency thing https://twitter.com/akshat_b/status/1658146096902811657\r\n- **self-heal** by running the code itself and use errors as information for reprompting \r\n  - however its a bit hard to get errors from the chrome extension environment so we did not try this\r\n- **using anthropic as the coding layer**\r\n  - you can run `modal run anthropic.py --prompt prompt.md --outputdir=anthropic` to try it\r\n  - but it doesnt work because anthropic doesnt follow instructions to generate file code very well.\r\n- **make agents that autonomously run this code in a loop/watch the prompt file** and regenerate code each time, on a new git branch\r\n  - the code could be generated on 5 simultaneous git branches and checking their output would just involve switching git branches"", ""# smol developer\r\n\r\n***Human-centric & Coherent Whole Program Synthesis*** aka your own personal junior developer\r\n\r\n> [Build the thing that builds the thing!](https://twitter.com/swyx/status/1657578738345979905) a `smol dev` for every dev in every situation\r\n\r\nthis is a prototype of a \""junior developer\"" agent (aka `smol dev`) that scaffolds an entire codebase out for you once you give it a product spec, but does not end the world or overpromise AGI. instead of making and maintaining specific, rigid, one-shot starters, like `create-react-app`, or `create-nextjs-app`, this is basically [`create-anything-app`](https://news.ycombinator.com/item?id=35942352) where you develop your scaffolding prompt in a tight loop with your smol dev.\r\n\r\nAI that is helpful, harmless, and honest is complemented by a codebase that is simple, safe, and smol - <200 lines of Python and Prompts, so this is easy to understand and customize.\r\n\r\n<p align=\""center\"">\r\n  <img height=200 src=\""https://pbs.twimg.com/media/FwEzVCcaMAE7t4h?format=jpg&name=large\"" />\r\n</p>\r\n\r\n\r\n*engineering with prompts, rather than prompt engineering* \r\n\r\nThe demo example in `prompt.md` shows the potential of AI-enabled, but still firmly human developer centric, workflow:\r\n\r\n- Human writes a basic prompt for the app they want to build\r\n- `main.py` generates code\r\n- Human runs/reads the code\r\n- Human can:\r\n  - simply add to the prompt as they discover underspecified parts of the prompt"", ""The program is a Chrome extension that summarizes web pages using the Anthropic Claude API. It consists of several files: popup.js, styles.css, \r\nbackground.js, popup.html, shared_dependencies.md, and content_script.js. \r\n\r\npopup.html is the main user interface for the extension, containing a form with several input fields and a submit button. popup.js handles the logic\r\nfor the form, including retrieving the user's input, calling the Anthropic API, and rendering the summary in the content div. styles.css provides \r\nstyling for the UI elements.\r\n\r\nbackground.js is responsible for executing content_script.js, which retrieves the page content (title and body text) and sends it to popup.js for \r\nprocessing. It also handles storing and retrieving the page content data using Chrome's storage API.\r\n\r\nshared_dependencies.md lists the shared variables, data schemas, DOM element IDs, message names, and function names used across the various files.\r\n\r\nOverall, the program uses a combination of JavaScript, HTML, and CSS to provide a user-friendly interface for summarizing web pages using the \r\nAnthropic Claude API."", ""## install\r\n\r\nit's basically: \r\n\r\n- `git clone https://github.com/smol-ai/developer`.\r\n- copy over `.example.env` to `.env` filling in your API keys.\r\n\r\nThere are no python dependencies to wrangle thanks to using Modal as a [self-provisioning runtime](https://www.google.com/search?q=self+provisioning+runtime).\r\n\r\nUnfortunately this project also uses 3 waitlisted things:\r\n\r\n- Modal.com - `pip install modal-client` (private beta - hit up the modal team to get an invite, and login)\r\n  - You can run this project w/o Modal following these instructions:\r\n  - `pip install -r requirements.txt`\r\n  - `python main_no_modal.py YOUR_PROMPT_HERE`\r\n- GPT-4 api (private beta) - can use 3.5 but obviously wont be as good\r\n- (for the demo project) anthropic claude 100k context api (private beta)\r\n\r\n> yes, the most important skill in being an ai engineer is social engineering to get off waitlists. Modal will let you in if you say the keyword \""swyx\""\r\n\r\nyou'll have to adapt this code on a fork if you want to use it on other infra. please open issues/PRs and i'll happily highlight your fork here.\r\n\r\n### trying the example chrome extension""]}",20,0.6419045925140381,0,What does this do?
CONTEXT_VALIDATOR,"{""query"": ""How does the code in this repository work?"", ""repo"": ""https://github.com/smol-ai/developer"", ""similar_documents"": [""- simply add to the prompt as they discover underspecified parts of the prompt\r\n  - manually runs the code and identifies errors\r\n  - *paste the error into the prompt* just like they would file a github issue\r\n  - for extra help, they can use `debugger.py` which reads the whole codebase to make specific code change suggestions\r\n\r\nLoop until happiness is attained. Notice that AI is only used as long as it is adding value - once it gets in your way, just take over the codebase from your smol junior developer with no fuss and no hurt feelings. (*we could also have smol-dev take over an existing codebase and bootstrap its own prompt... but that's a Future Direction*)\r\n\r\n*Not no code, not low code, but some third thing.* \r\n\r\nPerhaps a higher order evolution of programming where you still need to be technical, but no longer have to implement every detail at least to scaffold things out.\r\n\r\n## video demo\r\n\r\n[![https://i3.ytimg.com/vi/UCo7YeTy-aE/hqdefault.jpg](https://i3.ytimg.com/vi/UCo7YeTy-aE/hqdefault.jpg)](https://youtu.be/UCo7YeTy-aE)\r\n\r\n## arch diagram\r\n\r\nnaturally generated with gpt4, like [we did for babyagi](https://twitter.com/swyx/status/1648724820316786688)\r\n![image](https://github.com/smol-ai/developer/assets/6764957/f8fc68f4-77f6-43ee-852f-a35fb195430a)\r\n\r\n\r\n### innovations and insights\r\n\r\n> Please subscribe to https://latent.space/ for a fuller writeup and insights and reflections"", ""- **ability to install its own dependencies**\r\n  - this leaks into depending on the execution environment, which we all know is the path to dependency madness. how to avoid? dockerize? nix? [web container](https://twitter.com/litbid/status/1658154530385670150)?\r\n  - Modal has an interesting possibility: generate functions that speak modal which also solves the dependency thing https://twitter.com/akshat_b/status/1658146096902811657\r\n- **self-heal** by running the code itself and use errors as information for reprompting \r\n  - however its a bit hard to get errors from the chrome extension environment so we did not try this\r\n- **using anthropic as the coding layer**\r\n  - you can run `modal run anthropic.py --prompt prompt.md --outputdir=anthropic` to try it\r\n  - but it doesnt work because anthropic doesnt follow instructions to generate file code very well.\r\n- **make agents that autonomously run this code in a loop/watch the prompt file** and regenerate code each time, on a new git branch\r\n  - the code could be generated on 5 simultaneous git branches and checking their output would just involve switching git branches"", ""# smol developer\r\n\r\n***Human-centric & Coherent Whole Program Synthesis*** aka your own personal junior developer\r\n\r\n> [Build the thing that builds the thing!](https://twitter.com/swyx/status/1657578738345979905) a `smol dev` for every dev in every situation\r\n\r\nthis is a prototype of a \""junior developer\"" agent (aka `smol dev`) that scaffolds an entire codebase out for you once you give it a product spec, but does not end the world or overpromise AGI. instead of making and maintaining specific, rigid, one-shot starters, like `create-react-app`, or `create-nextjs-app`, this is basically [`create-anything-app`](https://news.ycombinator.com/item?id=35942352) where you develop your scaffolding prompt in a tight loop with your smol dev.\r\n\r\nAI that is helpful, harmless, and honest is complemented by a codebase that is simple, safe, and smol - <200 lines of Python and Prompts, so this is easy to understand and customize.\r\n\r\n<p align=\""center\"">\r\n  <img height=200 src=\""https://pbs.twimg.com/media/FwEzVCcaMAE7t4h?format=jpg&name=large\"" />\r\n</p>\r\n\r\n\r\n*engineering with prompts, rather than prompt engineering* \r\n\r\nThe demo example in `prompt.md` shows the potential of AI-enabled, but still firmly human developer centric, workflow:\r\n\r\n- Human writes a basic prompt for the app they want to build\r\n- `main.py` generates code\r\n- Human runs/reads the code\r\n- Human can:\r\n  - simply add to the prompt as they discover underspecified parts of the prompt"", ""## install\r\n\r\nit's basically: \r\n\r\n- `git clone https://github.com/smol-ai/developer`.\r\n- copy over `.example.env` to `.env` filling in your API keys.\r\n\r\nThere are no python dependencies to wrangle thanks to using Modal as a [self-provisioning runtime](https://www.google.com/search?q=self+provisioning+runtime).\r\n\r\nUnfortunately this project also uses 3 waitlisted things:\r\n\r\n- Modal.com - `pip install modal-client` (private beta - hit up the modal team to get an invite, and login)\r\n  - You can run this project w/o Modal following these instructions:\r\n  - `pip install -r requirements.txt`\r\n  - `python main_no_modal.py YOUR_PROMPT_HERE`\r\n- GPT-4 api (private beta) - can use 3.5 but obviously wont be as good\r\n- (for the demo project) anthropic claude 100k context api (private beta)\r\n\r\n> yes, the most important skill in being an ai engineer is social engineering to get off waitlists. Modal will let you in if you say the keyword \""swyx\""\r\n\r\nyou'll have to adapt this code on a fork if you want to use it on other infra. please open issues/PRs and i'll happily highlight your fork here.\r\n\r\n### trying the example chrome extension"", ""- **Markdown is all you need** - Markdown is the perfect way to prompt for whole program synthesis because it is easy to mix english and code (whether `variable_names` or entire \\`\\`\\` code fenced code samples)\r\n  - turns out you can specify prompts in code in prompts and gpt4 obeys that to the letter\r\n- **Copy and paste programming**\r\n  - teaching the program to understand how to code around a new API (Anthropic's API is after GPT3's knowledge cutoff) by just pasting in the `curl` input and output\r\n  - pasting error messages into the prompt and vaguely telling the program how you'd like it handled. it kind of feels like \""logbook driven programming\"".\r\n- **Debugging by `cat`ing** the whole codebase with your error message and getting specific fix suggestions - particularly delightful!\r\n- **Tricks for whole program coherence** - our chosen example usecase, Chrome extensions, have a lot of indirect dependencies across files. Any hallucination of cross dependencies causes the whole program to error. \r\n  - We solved this by adding an intermediate step asking GPT to think through `shared_dependencies.md`, and then insisting on using that in generating each file. This basically means GPT is able to talk to itself...\r\n  - ... but it's not perfect, yet. `shared_dependencies.md` is sometimes not comperehensive in understanding what are hard dependencies between files. So we just solved it by specifying a specific `name` in the prompt. felt dirty at first but it works, and really it's just clear unambiguous communication at the end of the day. \r\n  - see `prompt.md` for SOTA smol-dev prompting\r\n- **Low activation energy for unfamiliar APIs**""]}",50,0.7039170265197754,0,What does this do?
CONTEXT_VALIDATOR,"{""query"": ""What problem does the code in this repository solve?"", ""repo"": ""https://github.com/smol-ai/developer"", ""similar_documents"": [""- simply add to the prompt as they discover underspecified parts of the prompt\r\n  - manually runs the code and identifies errors\r\n  - *paste the error into the prompt* just like they would file a github issue\r\n  - for extra help, they can use `debugger.py` which reads the whole codebase to make specific code change suggestions\r\n\r\nLoop until happiness is attained. Notice that AI is only used as long as it is adding value - once it gets in your way, just take over the codebase from your smol junior developer with no fuss and no hurt feelings. (*we could also have smol-dev take over an existing codebase and bootstrap its own prompt... but that's a Future Direction*)\r\n\r\n*Not no code, not low code, but some third thing.* \r\n\r\nPerhaps a higher order evolution of programming where you still need to be technical, but no longer have to implement every detail at least to scaffold things out.\r\n\r\n## video demo\r\n\r\n[![https://i3.ytimg.com/vi/UCo7YeTy-aE/hqdefault.jpg](https://i3.ytimg.com/vi/UCo7YeTy-aE/hqdefault.jpg)](https://youtu.be/UCo7YeTy-aE)\r\n\r\n## arch diagram\r\n\r\nnaturally generated with gpt4, like [we did for babyagi](https://twitter.com/swyx/status/1648724820316786688)\r\n![image](https://github.com/smol-ai/developer/assets/6764957/f8fc68f4-77f6-43ee-852f-a35fb195430a)\r\n\r\n\r\n### innovations and insights\r\n\r\n> Please subscribe to https://latent.space/ for a fuller writeup and insights and reflections"", ""- **ability to install its own dependencies**\r\n  - this leaks into depending on the execution environment, which we all know is the path to dependency madness. how to avoid? dockerize? nix? [web container](https://twitter.com/litbid/status/1658154530385670150)?\r\n  - Modal has an interesting possibility: generate functions that speak modal which also solves the dependency thing https://twitter.com/akshat_b/status/1658146096902811657\r\n- **self-heal** by running the code itself and use errors as information for reprompting \r\n  - however its a bit hard to get errors from the chrome extension environment so we did not try this\r\n- **using anthropic as the coding layer**\r\n  - you can run `modal run anthropic.py --prompt prompt.md --outputdir=anthropic` to try it\r\n  - but it doesnt work because anthropic doesnt follow instructions to generate file code very well.\r\n- **make agents that autonomously run this code in a loop/watch the prompt file** and regenerate code each time, on a new git branch\r\n  - the code could be generated on 5 simultaneous git branches and checking their output would just involve switching git branches"", ""- **Markdown is all you need** - Markdown is the perfect way to prompt for whole program synthesis because it is easy to mix english and code (whether `variable_names` or entire \\`\\`\\` code fenced code samples)\r\n  - turns out you can specify prompts in code in prompts and gpt4 obeys that to the letter\r\n- **Copy and paste programming**\r\n  - teaching the program to understand how to code around a new API (Anthropic's API is after GPT3's knowledge cutoff) by just pasting in the `curl` input and output\r\n  - pasting error messages into the prompt and vaguely telling the program how you'd like it handled. it kind of feels like \""logbook driven programming\"".\r\n- **Debugging by `cat`ing** the whole codebase with your error message and getting specific fix suggestions - particularly delightful!\r\n- **Tricks for whole program coherence** - our chosen example usecase, Chrome extensions, have a lot of indirect dependencies across files. Any hallucination of cross dependencies causes the whole program to error. \r\n  - We solved this by adding an intermediate step asking GPT to think through `shared_dependencies.md`, and then insisting on using that in generating each file. This basically means GPT is able to talk to itself...\r\n  - ... but it's not perfect, yet. `shared_dependencies.md` is sometimes not comperehensive in understanding what are hard dependencies between files. So we just solved it by specifying a specific `name` in the prompt. felt dirty at first but it works, and really it's just clear unambiguous communication at the end of the day. \r\n  - see `prompt.md` for SOTA smol-dev prompting\r\n- **Low activation energy for unfamiliar APIs**"", ""# todo\r\n# https://twitter.com/nathanwchan/status/1658153897154981888?s=20"", ""# smol developer\r\n\r\n***Human-centric & Coherent Whole Program Synthesis*** aka your own personal junior developer\r\n\r\n> [Build the thing that builds the thing!](https://twitter.com/swyx/status/1657578738345979905) a `smol dev` for every dev in every situation\r\n\r\nthis is a prototype of a \""junior developer\"" agent (aka `smol dev`) that scaffolds an entire codebase out for you once you give it a product spec, but does not end the world or overpromise AGI. instead of making and maintaining specific, rigid, one-shot starters, like `create-react-app`, or `create-nextjs-app`, this is basically [`create-anything-app`](https://news.ycombinator.com/item?id=35942352) where you develop your scaffolding prompt in a tight loop with your smol dev.\r\n\r\nAI that is helpful, harmless, and honest is complemented by a codebase that is simple, safe, and smol - <200 lines of Python and Prompts, so this is easy to understand and customize.\r\n\r\n<p align=\""center\"">\r\n  <img height=200 src=\""https://pbs.twimg.com/media/FwEzVCcaMAE7t4h?format=jpg&name=large\"" />\r\n</p>\r\n\r\n\r\n*engineering with prompts, rather than prompt engineering* \r\n\r\nThe demo example in `prompt.md` shows the potential of AI-enabled, but still firmly human developer centric, workflow:\r\n\r\n- Human writes a basic prompt for the app they want to build\r\n- `main.py` generates code\r\n- Human runs/reads the code\r\n- Human can:\r\n  - simply add to the prompt as they discover underspecified parts of the prompt""]}",50,0.688941240310669,0,What does this do?
CONTEXT_VALIDATOR,"{""query"": ""What are the key features of the code in this repository?"", ""repo"": ""https://github.com/smol-ai/developer"", ""similar_documents"": [""- simply add to the prompt as they discover underspecified parts of the prompt\r\n  - manually runs the code and identifies errors\r\n  - *paste the error into the prompt* just like they would file a github issue\r\n  - for extra help, they can use `debugger.py` which reads the whole codebase to make specific code change suggestions\r\n\r\nLoop until happiness is attained. Notice that AI is only used as long as it is adding value - once it gets in your way, just take over the codebase from your smol junior developer with no fuss and no hurt feelings. (*we could also have smol-dev take over an existing codebase and bootstrap its own prompt... but that's a Future Direction*)\r\n\r\n*Not no code, not low code, but some third thing.* \r\n\r\nPerhaps a higher order evolution of programming where you still need to be technical, but no longer have to implement every detail at least to scaffold things out.\r\n\r\n## video demo\r\n\r\n[![https://i3.ytimg.com/vi/UCo7YeTy-aE/hqdefault.jpg](https://i3.ytimg.com/vi/UCo7YeTy-aE/hqdefault.jpg)](https://youtu.be/UCo7YeTy-aE)\r\n\r\n## arch diagram\r\n\r\nnaturally generated with gpt4, like [we did for babyagi](https://twitter.com/swyx/status/1648724820316786688)\r\n![image](https://github.com/smol-ai/developer/assets/6764957/f8fc68f4-77f6-43ee-852f-a35fb195430a)\r\n\r\n\r\n### innovations and insights\r\n\r\n> Please subscribe to https://latent.space/ for a fuller writeup and insights and reflections"", ""- **Markdown is all you need** - Markdown is the perfect way to prompt for whole program synthesis because it is easy to mix english and code (whether `variable_names` or entire \\`\\`\\` code fenced code samples)\r\n  - turns out you can specify prompts in code in prompts and gpt4 obeys that to the letter\r\n- **Copy and paste programming**\r\n  - teaching the program to understand how to code around a new API (Anthropic's API is after GPT3's knowledge cutoff) by just pasting in the `curl` input and output\r\n  - pasting error messages into the prompt and vaguely telling the program how you'd like it handled. it kind of feels like \""logbook driven programming\"".\r\n- **Debugging by `cat`ing** the whole codebase with your error message and getting specific fix suggestions - particularly delightful!\r\n- **Tricks for whole program coherence** - our chosen example usecase, Chrome extensions, have a lot of indirect dependencies across files. Any hallucination of cross dependencies causes the whole program to error. \r\n  - We solved this by adding an intermediate step asking GPT to think through `shared_dependencies.md`, and then insisting on using that in generating each file. This basically means GPT is able to talk to itself...\r\n  - ... but it's not perfect, yet. `shared_dependencies.md` is sometimes not comperehensive in understanding what are hard dependencies between files. So we just solved it by specifying a specific `name` in the prompt. felt dirty at first but it works, and really it's just clear unambiguous communication at the end of the day. \r\n  - see `prompt.md` for SOTA smol-dev prompting\r\n- **Low activation energy for unfamiliar APIs**"", ""modal-client\r\nopenai\r\ntiktoken"", ""OPENAI_API_KEY=sk-xxxxxx\r\nANTHROPIC_API_KEY=sk-ant-api03-xxxxxx"", ""- **ability to install its own dependencies**\r\n  - this leaks into depending on the execution environment, which we all know is the path to dependency madness. how to avoid? dockerize? nix? [web container](https://twitter.com/litbid/status/1658154530385670150)?\r\n  - Modal has an interesting possibility: generate functions that speak modal which also solves the dependency thing https://twitter.com/akshat_b/status/1658146096902811657\r\n- **self-heal** by running the code itself and use errors as information for reprompting \r\n  - however its a bit hard to get errors from the chrome extension environment so we did not try this\r\n- **using anthropic as the coding layer**\r\n  - you can run `modal run anthropic.py --prompt prompt.md --outputdir=anthropic` to try it\r\n  - but it doesnt work because anthropic doesnt follow instructions to generate file code very well.\r\n- **make agents that autonomously run this code in a loop/watch the prompt file** and regenerate code each time, on a new git branch\r\n  - the code could be generated on 5 simultaneous git branches and checking their output would just involve switching git branches""]}",50,0.49207234382629395,0,What does this do?
UPGRADE_QUERY,"{""query"": ""What does this do?"", ""repo"": ""https://github.com/smol-ai/developer""}","1. What is the purpose of the code in this repository?
2. Can you explain the functionality of the code in this repository?
3. How does the code in this repository work?
4. What problem does the code in this repository solve?
5. What are the key features of the code in this repository?",7.7677412033081055,0,What does this do?
CONTEXT_VALIDATOR,"{""query"": ""What is the purpose of the code in this repository?"", ""repo"": ""https://github.com/smol-ai/developer"", ""similar_documents"": [""- simply add to the prompt as they discover underspecified parts of the prompt\r\n  - manually runs the code and identifies errors\r\n  - *paste the error into the prompt* just like they would file a github issue\r\n  - for extra help, they can use `debugger.py` which reads the whole codebase to make specific code change suggestions\r\n\r\nLoop until happiness is attained. Notice that AI is only used as long as it is adding value - once it gets in your way, just take over the codebase from your smol junior developer with no fuss and no hurt feelings. (*we could also have smol-dev take over an existing codebase and bootstrap its own prompt... but that's a Future Direction*)\r\n\r\n*Not no code, not low code, but some third thing.* \r\n\r\nPerhaps a higher order evolution of programming where you still need to be technical, but no longer have to implement every detail at least to scaffold things out.\r\n\r\n## video demo\r\n\r\n[![https://i3.ytimg.com/vi/UCo7YeTy-aE/hqdefault.jpg](https://i3.ytimg.com/vi/UCo7YeTy-aE/hqdefault.jpg)](https://youtu.be/UCo7YeTy-aE)\r\n\r\n## arch diagram\r\n\r\nnaturally generated with gpt4, like [we did for babyagi](https://twitter.com/swyx/status/1648724820316786688)\r\n![image](https://github.com/smol-ai/developer/assets/6764957/f8fc68f4-77f6-43ee-852f-a35fb195430a)\r\n\r\n\r\n### innovations and insights\r\n\r\n> Please subscribe to https://latent.space/ for a fuller writeup and insights and reflections"", ""MIT License Copyright (c) 2023 swyx\r\n\r\nPermission is hereby granted, free of\r\ncharge, to any person obtaining a copy of this software and associated\r\ndocumentation files (the \""Software\""), to deal in the Software without\r\nrestriction, including without limitation the rights to use, copy, modify, merge,\r\npublish, distribute, sublicense, and/or sell copies of the Software, and to\r\npermit persons to whom the Software is furnished to do so, subject to the\r\nfollowing conditions:\r\n\r\nThe above copyright notice and this permission notice\r\n(including the next paragraph) shall be included in all copies or substantial\r\nportions of the Software.\r\n\r\nTHE SOFTWARE IS PROVIDED \""AS IS\"", WITHOUT WARRANTY OF\r\nANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\r\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO\r\nEVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR\r\nOTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\r\nFROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\nTHE SOFTWARE."", ""- **ability to install its own dependencies**\r\n  - this leaks into depending on the execution environment, which we all know is the path to dependency madness. how to avoid? dockerize? nix? [web container](https://twitter.com/litbid/status/1658154530385670150)?\r\n  - Modal has an interesting possibility: generate functions that speak modal which also solves the dependency thing https://twitter.com/akshat_b/status/1658146096902811657\r\n- **self-heal** by running the code itself and use errors as information for reprompting \r\n  - however its a bit hard to get errors from the chrome extension environment so we did not try this\r\n- **using anthropic as the coding layer**\r\n  - you can run `modal run anthropic.py --prompt prompt.md --outputdir=anthropic` to try it\r\n  - but it doesnt work because anthropic doesnt follow instructions to generate file code very well.\r\n- **make agents that autonomously run this code in a loop/watch the prompt file** and regenerate code each time, on a new git branch\r\n  - the code could be generated on 5 simultaneous git branches and checking their output would just involve switching git branches"", ""# smol developer\r\n\r\n***Human-centric & Coherent Whole Program Synthesis*** aka your own personal junior developer\r\n\r\n> [Build the thing that builds the thing!](https://twitter.com/swyx/status/1657578738345979905) a `smol dev` for every dev in every situation\r\n\r\nthis is a prototype of a \""junior developer\"" agent (aka `smol dev`) that scaffolds an entire codebase out for you once you give it a product spec, but does not end the world or overpromise AGI. instead of making and maintaining specific, rigid, one-shot starters, like `create-react-app`, or `create-nextjs-app`, this is basically [`create-anything-app`](https://news.ycombinator.com/item?id=35942352) where you develop your scaffolding prompt in a tight loop with your smol dev.\r\n\r\nAI that is helpful, harmless, and honest is complemented by a codebase that is simple, safe, and smol - <200 lines of Python and Prompts, so this is easy to understand and customize.\r\n\r\n<p align=\""center\"">\r\n  <img height=200 src=\""https://pbs.twimg.com/media/FwEzVCcaMAE7t4h?format=jpg&name=large\"" />\r\n</p>\r\n\r\n\r\n*engineering with prompts, rather than prompt engineering* \r\n\r\nThe demo example in `prompt.md` shows the potential of AI-enabled, but still firmly human developer centric, workflow:\r\n\r\n- Human writes a basic prompt for the app they want to build\r\n- `main.py` generates code\r\n- Human runs/reads the code\r\n- Human can:\r\n  - simply add to the prompt as they discover underspecified parts of the prompt"", ""- **Markdown is all you need** - Markdown is the perfect way to prompt for whole program synthesis because it is easy to mix english and code (whether `variable_names` or entire \\`\\`\\` code fenced code samples)\r\n  - turns out you can specify prompts in code in prompts and gpt4 obeys that to the letter\r\n- **Copy and paste programming**\r\n  - teaching the program to understand how to code around a new API (Anthropic's API is after GPT3's knowledge cutoff) by just pasting in the `curl` input and output\r\n  - pasting error messages into the prompt and vaguely telling the program how you'd like it handled. it kind of feels like \""logbook driven programming\"".\r\n- **Debugging by `cat`ing** the whole codebase with your error message and getting specific fix suggestions - particularly delightful!\r\n- **Tricks for whole program coherence** - our chosen example usecase, Chrome extensions, have a lot of indirect dependencies across files. Any hallucination of cross dependencies causes the whole program to error. \r\n  - We solved this by adding an intermediate step asking GPT to think through `shared_dependencies.md`, and then insisting on using that in generating each file. This basically means GPT is able to talk to itself...\r\n  - ... but it's not perfect, yet. `shared_dependencies.md` is sometimes not comperehensive in understanding what are hard dependencies between files. So we just solved it by specifying a specific `name` in the prompt. felt dirty at first but it works, and really it's just clear unambiguous communication at the end of the day. \r\n  - see `prompt.md` for SOTA smol-dev prompting\r\n- **Low activation energy for unfamiliar APIs**""]}",50,0.8566262722015381,0,What does this do?
CONTEXT_VALIDATOR,"{""query"": ""Can you explain the functionality of the code in this repository?"", ""repo"": ""https://github.com/smol-ai/developer"", ""similar_documents"": [""- simply add to the prompt as they discover underspecified parts of the prompt\r\n  - manually runs the code and identifies errors\r\n  - *paste the error into the prompt* just like they would file a github issue\r\n  - for extra help, they can use `debugger.py` which reads the whole codebase to make specific code change suggestions\r\n\r\nLoop until happiness is attained. Notice that AI is only used as long as it is adding value - once it gets in your way, just take over the codebase from your smol junior developer with no fuss and no hurt feelings. (*we could also have smol-dev take over an existing codebase and bootstrap its own prompt... but that's a Future Direction*)\r\n\r\n*Not no code, not low code, but some third thing.* \r\n\r\nPerhaps a higher order evolution of programming where you still need to be technical, but no longer have to implement every detail at least to scaffold things out.\r\n\r\n## video demo\r\n\r\n[![https://i3.ytimg.com/vi/UCo7YeTy-aE/hqdefault.jpg](https://i3.ytimg.com/vi/UCo7YeTy-aE/hqdefault.jpg)](https://youtu.be/UCo7YeTy-aE)\r\n\r\n## arch diagram\r\n\r\nnaturally generated with gpt4, like [we did for babyagi](https://twitter.com/swyx/status/1648724820316786688)\r\n![image](https://github.com/smol-ai/developer/assets/6764957/f8fc68f4-77f6-43ee-852f-a35fb195430a)\r\n\r\n\r\n### innovations and insights\r\n\r\n> Please subscribe to https://latent.space/ for a fuller writeup and insights and reflections"", ""- **ability to install its own dependencies**\r\n  - this leaks into depending on the execution environment, which we all know is the path to dependency madness. how to avoid? dockerize? nix? [web container](https://twitter.com/litbid/status/1658154530385670150)?\r\n  - Modal has an interesting possibility: generate functions that speak modal which also solves the dependency thing https://twitter.com/akshat_b/status/1658146096902811657\r\n- **self-heal** by running the code itself and use errors as information for reprompting \r\n  - however its a bit hard to get errors from the chrome extension environment so we did not try this\r\n- **using anthropic as the coding layer**\r\n  - you can run `modal run anthropic.py --prompt prompt.md --outputdir=anthropic` to try it\r\n  - but it doesnt work because anthropic doesnt follow instructions to generate file code very well.\r\n- **make agents that autonomously run this code in a loop/watch the prompt file** and regenerate code each time, on a new git branch\r\n  - the code could be generated on 5 simultaneous git branches and checking their output would just involve switching git branches"", ""# smol developer\r\n\r\n***Human-centric & Coherent Whole Program Synthesis*** aka your own personal junior developer\r\n\r\n> [Build the thing that builds the thing!](https://twitter.com/swyx/status/1657578738345979905) a `smol dev` for every dev in every situation\r\n\r\nthis is a prototype of a \""junior developer\"" agent (aka `smol dev`) that scaffolds an entire codebase out for you once you give it a product spec, but does not end the world or overpromise AGI. instead of making and maintaining specific, rigid, one-shot starters, like `create-react-app`, or `create-nextjs-app`, this is basically [`create-anything-app`](https://news.ycombinator.com/item?id=35942352) where you develop your scaffolding prompt in a tight loop with your smol dev.\r\n\r\nAI that is helpful, harmless, and honest is complemented by a codebase that is simple, safe, and smol - <200 lines of Python and Prompts, so this is easy to understand and customize.\r\n\r\n<p align=\""center\"">\r\n  <img height=200 src=\""https://pbs.twimg.com/media/FwEzVCcaMAE7t4h?format=jpg&name=large\"" />\r\n</p>\r\n\r\n\r\n*engineering with prompts, rather than prompt engineering* \r\n\r\nThe demo example in `prompt.md` shows the potential of AI-enabled, but still firmly human developer centric, workflow:\r\n\r\n- Human writes a basic prompt for the app they want to build\r\n- `main.py` generates code\r\n- Human runs/reads the code\r\n- Human can:\r\n  - simply add to the prompt as they discover underspecified parts of the prompt"", ""The program is a Chrome extension that summarizes web pages using the Anthropic Claude API. It consists of several files: popup.js, styles.css, \r\nbackground.js, popup.html, shared_dependencies.md, and content_script.js. \r\n\r\npopup.html is the main user interface for the extension, containing a form with several input fields and a submit button. popup.js handles the logic\r\nfor the form, including retrieving the user's input, calling the Anthropic API, and rendering the summary in the content div. styles.css provides \r\nstyling for the UI elements.\r\n\r\nbackground.js is responsible for executing content_script.js, which retrieves the page content (title and body text) and sends it to popup.js for \r\nprocessing. It also handles storing and retrieving the page content data using Chrome's storage API.\r\n\r\nshared_dependencies.md lists the shared variables, data schemas, DOM element IDs, message names, and function names used across the various files.\r\n\r\nOverall, the program uses a combination of JavaScript, HTML, and CSS to provide a user-friendly interface for summarizing web pages using the \r\nAnthropic Claude API."", ""## install\r\n\r\nit's basically: \r\n\r\n- `git clone https://github.com/smol-ai/developer`.\r\n- copy over `.example.env` to `.env` filling in your API keys.\r\n\r\nThere are no python dependencies to wrangle thanks to using Modal as a [self-provisioning runtime](https://www.google.com/search?q=self+provisioning+runtime).\r\n\r\nUnfortunately this project also uses 3 waitlisted things:\r\n\r\n- Modal.com - `pip install modal-client` (private beta - hit up the modal team to get an invite, and login)\r\n  - You can run this project w/o Modal following these instructions:\r\n  - `pip install -r requirements.txt`\r\n  - `python main_no_modal.py YOUR_PROMPT_HERE`\r\n- GPT-4 api (private beta) - can use 3.5 but obviously wont be as good\r\n- (for the demo project) anthropic claude 100k context api (private beta)\r\n\r\n> yes, the most important skill in being an ai engineer is social engineering to get off waitlists. Modal will let you in if you say the keyword \""swyx\""\r\n\r\nyou'll have to adapt this code on a fork if you want to use it on other infra. please open issues/PRs and i'll happily highlight your fork here.\r\n\r\n### trying the example chrome extension""]}",50,0.7261648178100586,0,What does this do?
CONTEXT_VALIDATOR,"{""query"": ""How does the code in this repository work?"", ""repo"": ""https://github.com/smol-ai/developer"", ""similar_documents"": [""- simply add to the prompt as they discover underspecified parts of the prompt\r\n  - manually runs the code and identifies errors\r\n  - *paste the error into the prompt* just like they would file a github issue\r\n  - for extra help, they can use `debugger.py` which reads the whole codebase to make specific code change suggestions\r\n\r\nLoop until happiness is attained. Notice that AI is only used as long as it is adding value - once it gets in your way, just take over the codebase from your smol junior developer with no fuss and no hurt feelings. (*we could also have smol-dev take over an existing codebase and bootstrap its own prompt... but that's a Future Direction*)\r\n\r\n*Not no code, not low code, but some third thing.* \r\n\r\nPerhaps a higher order evolution of programming where you still need to be technical, but no longer have to implement every detail at least to scaffold things out.\r\n\r\n## video demo\r\n\r\n[![https://i3.ytimg.com/vi/UCo7YeTy-aE/hqdefault.jpg](https://i3.ytimg.com/vi/UCo7YeTy-aE/hqdefault.jpg)](https://youtu.be/UCo7YeTy-aE)\r\n\r\n## arch diagram\r\n\r\nnaturally generated with gpt4, like [we did for babyagi](https://twitter.com/swyx/status/1648724820316786688)\r\n![image](https://github.com/smol-ai/developer/assets/6764957/f8fc68f4-77f6-43ee-852f-a35fb195430a)\r\n\r\n\r\n### innovations and insights\r\n\r\n> Please subscribe to https://latent.space/ for a fuller writeup and insights and reflections"", ""- **ability to install its own dependencies**\r\n  - this leaks into depending on the execution environment, which we all know is the path to dependency madness. how to avoid? dockerize? nix? [web container](https://twitter.com/litbid/status/1658154530385670150)?\r\n  - Modal has an interesting possibility: generate functions that speak modal which also solves the dependency thing https://twitter.com/akshat_b/status/1658146096902811657\r\n- **self-heal** by running the code itself and use errors as information for reprompting \r\n  - however its a bit hard to get errors from the chrome extension environment so we did not try this\r\n- **using anthropic as the coding layer**\r\n  - you can run `modal run anthropic.py --prompt prompt.md --outputdir=anthropic` to try it\r\n  - but it doesnt work because anthropic doesnt follow instructions to generate file code very well.\r\n- **make agents that autonomously run this code in a loop/watch the prompt file** and regenerate code each time, on a new git branch\r\n  - the code could be generated on 5 simultaneous git branches and checking their output would just involve switching git branches"", ""# smol developer\r\n\r\n***Human-centric & Coherent Whole Program Synthesis*** aka your own personal junior developer\r\n\r\n> [Build the thing that builds the thing!](https://twitter.com/swyx/status/1657578738345979905) a `smol dev` for every dev in every situation\r\n\r\nthis is a prototype of a \""junior developer\"" agent (aka `smol dev`) that scaffolds an entire codebase out for you once you give it a product spec, but does not end the world or overpromise AGI. instead of making and maintaining specific, rigid, one-shot starters, like `create-react-app`, or `create-nextjs-app`, this is basically [`create-anything-app`](https://news.ycombinator.com/item?id=35942352) where you develop your scaffolding prompt in a tight loop with your smol dev.\r\n\r\nAI that is helpful, harmless, and honest is complemented by a codebase that is simple, safe, and smol - <200 lines of Python and Prompts, so this is easy to understand and customize.\r\n\r\n<p align=\""center\"">\r\n  <img height=200 src=\""https://pbs.twimg.com/media/FwEzVCcaMAE7t4h?format=jpg&name=large\"" />\r\n</p>\r\n\r\n\r\n*engineering with prompts, rather than prompt engineering* \r\n\r\nThe demo example in `prompt.md` shows the potential of AI-enabled, but still firmly human developer centric, workflow:\r\n\r\n- Human writes a basic prompt for the app they want to build\r\n- `main.py` generates code\r\n- Human runs/reads the code\r\n- Human can:\r\n  - simply add to the prompt as they discover underspecified parts of the prompt"", ""## install\r\n\r\nit's basically: \r\n\r\n- `git clone https://github.com/smol-ai/developer`.\r\n- copy over `.example.env` to `.env` filling in your API keys.\r\n\r\nThere are no python dependencies to wrangle thanks to using Modal as a [self-provisioning runtime](https://www.google.com/search?q=self+provisioning+runtime).\r\n\r\nUnfortunately this project also uses 3 waitlisted things:\r\n\r\n- Modal.com - `pip install modal-client` (private beta - hit up the modal team to get an invite, and login)\r\n  - You can run this project w/o Modal following these instructions:\r\n  - `pip install -r requirements.txt`\r\n  - `python main_no_modal.py YOUR_PROMPT_HERE`\r\n- GPT-4 api (private beta) - can use 3.5 but obviously wont be as good\r\n- (for the demo project) anthropic claude 100k context api (private beta)\r\n\r\n> yes, the most important skill in being an ai engineer is social engineering to get off waitlists. Modal will let you in if you say the keyword \""swyx\""\r\n\r\nyou'll have to adapt this code on a fork if you want to use it on other infra. please open issues/PRs and i'll happily highlight your fork here.\r\n\r\n### trying the example chrome extension"", ""- **Markdown is all you need** - Markdown is the perfect way to prompt for whole program synthesis because it is easy to mix english and code (whether `variable_names` or entire \\`\\`\\` code fenced code samples)\r\n  - turns out you can specify prompts in code in prompts and gpt4 obeys that to the letter\r\n- **Copy and paste programming**\r\n  - teaching the program to understand how to code around a new API (Anthropic's API is after GPT3's knowledge cutoff) by just pasting in the `curl` input and output\r\n  - pasting error messages into the prompt and vaguely telling the program how you'd like it handled. it kind of feels like \""logbook driven programming\"".\r\n- **Debugging by `cat`ing** the whole codebase with your error message and getting specific fix suggestions - particularly delightful!\r\n- **Tricks for whole program coherence** - our chosen example usecase, Chrome extensions, have a lot of indirect dependencies across files. Any hallucination of cross dependencies causes the whole program to error. \r\n  - We solved this by adding an intermediate step asking GPT to think through `shared_dependencies.md`, and then insisting on using that in generating each file. This basically means GPT is able to talk to itself...\r\n  - ... but it's not perfect, yet. `shared_dependencies.md` is sometimes not comperehensive in understanding what are hard dependencies between files. So we just solved it by specifying a specific `name` in the prompt. felt dirty at first but it works, and really it's just clear unambiguous communication at the end of the day. \r\n  - see `prompt.md` for SOTA smol-dev prompting\r\n- **Low activation energy for unfamiliar APIs**""]}",50,0.7062628269195557,0,What does this do?
CONTEXT_VALIDATOR,"{""query"": ""What problem does the code in this repository solve?"", ""repo"": ""https://github.com/smol-ai/developer"", ""similar_documents"": [""- simply add to the prompt as they discover underspecified parts of the prompt\r\n  - manually runs the code and identifies errors\r\n  - *paste the error into the prompt* just like they would file a github issue\r\n  - for extra help, they can use `debugger.py` which reads the whole codebase to make specific code change suggestions\r\n\r\nLoop until happiness is attained. Notice that AI is only used as long as it is adding value - once it gets in your way, just take over the codebase from your smol junior developer with no fuss and no hurt feelings. (*we could also have smol-dev take over an existing codebase and bootstrap its own prompt... but that's a Future Direction*)\r\n\r\n*Not no code, not low code, but some third thing.* \r\n\r\nPerhaps a higher order evolution of programming where you still need to be technical, but no longer have to implement every detail at least to scaffold things out.\r\n\r\n## video demo\r\n\r\n[![https://i3.ytimg.com/vi/UCo7YeTy-aE/hqdefault.jpg](https://i3.ytimg.com/vi/UCo7YeTy-aE/hqdefault.jpg)](https://youtu.be/UCo7YeTy-aE)\r\n\r\n## arch diagram\r\n\r\nnaturally generated with gpt4, like [we did for babyagi](https://twitter.com/swyx/status/1648724820316786688)\r\n![image](https://github.com/smol-ai/developer/assets/6764957/f8fc68f4-77f6-43ee-852f-a35fb195430a)\r\n\r\n\r\n### innovations and insights\r\n\r\n> Please subscribe to https://latent.space/ for a fuller writeup and insights and reflections"", ""- **ability to install its own dependencies**\r\n  - this leaks into depending on the execution environment, which we all know is the path to dependency madness. how to avoid? dockerize? nix? [web container](https://twitter.com/litbid/status/1658154530385670150)?\r\n  - Modal has an interesting possibility: generate functions that speak modal which also solves the dependency thing https://twitter.com/akshat_b/status/1658146096902811657\r\n- **self-heal** by running the code itself and use errors as information for reprompting \r\n  - however its a bit hard to get errors from the chrome extension environment so we did not try this\r\n- **using anthropic as the coding layer**\r\n  - you can run `modal run anthropic.py --prompt prompt.md --outputdir=anthropic` to try it\r\n  - but it doesnt work because anthropic doesnt follow instructions to generate file code very well.\r\n- **make agents that autonomously run this code in a loop/watch the prompt file** and regenerate code each time, on a new git branch\r\n  - the code could be generated on 5 simultaneous git branches and checking their output would just involve switching git branches"", ""- **Markdown is all you need** - Markdown is the perfect way to prompt for whole program synthesis because it is easy to mix english and code (whether `variable_names` or entire \\`\\`\\` code fenced code samples)\r\n  - turns out you can specify prompts in code in prompts and gpt4 obeys that to the letter\r\n- **Copy and paste programming**\r\n  - teaching the program to understand how to code around a new API (Anthropic's API is after GPT3's knowledge cutoff) by just pasting in the `curl` input and output\r\n  - pasting error messages into the prompt and vaguely telling the program how you'd like it handled. it kind of feels like \""logbook driven programming\"".\r\n- **Debugging by `cat`ing** the whole codebase with your error message and getting specific fix suggestions - particularly delightful!\r\n- **Tricks for whole program coherence** - our chosen example usecase, Chrome extensions, have a lot of indirect dependencies across files. Any hallucination of cross dependencies causes the whole program to error. \r\n  - We solved this by adding an intermediate step asking GPT to think through `shared_dependencies.md`, and then insisting on using that in generating each file. This basically means GPT is able to talk to itself...\r\n  - ... but it's not perfect, yet. `shared_dependencies.md` is sometimes not comperehensive in understanding what are hard dependencies between files. So we just solved it by specifying a specific `name` in the prompt. felt dirty at first but it works, and really it's just clear unambiguous communication at the end of the day. \r\n  - see `prompt.md` for SOTA smol-dev prompting\r\n- **Low activation energy for unfamiliar APIs**"", ""# todo\r\n# https://twitter.com/nathanwchan/status/1658153897154981888?s=20"", ""# smol developer\r\n\r\n***Human-centric & Coherent Whole Program Synthesis*** aka your own personal junior developer\r\n\r\n> [Build the thing that builds the thing!](https://twitter.com/swyx/status/1657578738345979905) a `smol dev` for every dev in every situation\r\n\r\nthis is a prototype of a \""junior developer\"" agent (aka `smol dev`) that scaffolds an entire codebase out for you once you give it a product spec, but does not end the world or overpromise AGI. instead of making and maintaining specific, rigid, one-shot starters, like `create-react-app`, or `create-nextjs-app`, this is basically [`create-anything-app`](https://news.ycombinator.com/item?id=35942352) where you develop your scaffolding prompt in a tight loop with your smol dev.\r\n\r\nAI that is helpful, harmless, and honest is complemented by a codebase that is simple, safe, and smol - <200 lines of Python and Prompts, so this is easy to understand and customize.\r\n\r\n<p align=\""center\"">\r\n  <img height=200 src=\""https://pbs.twimg.com/media/FwEzVCcaMAE7t4h?format=jpg&name=large\"" />\r\n</p>\r\n\r\n\r\n*engineering with prompts, rather than prompt engineering* \r\n\r\nThe demo example in `prompt.md` shows the potential of AI-enabled, but still firmly human developer centric, workflow:\r\n\r\n- Human writes a basic prompt for the app they want to build\r\n- `main.py` generates code\r\n- Human runs/reads the code\r\n- Human can:\r\n  - simply add to the prompt as they discover underspecified parts of the prompt""]}",50,1.381256341934204,0,What does this do?
CONTEXT_VALIDATOR,"{""query"": ""What are the key features of the code in this repository?"", ""repo"": ""https://github.com/smol-ai/developer"", ""similar_documents"": [""- simply add to the prompt as they discover underspecified parts of the prompt\r\n  - manually runs the code and identifies errors\r\n  - *paste the error into the prompt* just like they would file a github issue\r\n  - for extra help, they can use `debugger.py` which reads the whole codebase to make specific code change suggestions\r\n\r\nLoop until happiness is attained. Notice that AI is only used as long as it is adding value - once it gets in your way, just take over the codebase from your smol junior developer with no fuss and no hurt feelings. (*we could also have smol-dev take over an existing codebase and bootstrap its own prompt... but that's a Future Direction*)\r\n\r\n*Not no code, not low code, but some third thing.* \r\n\r\nPerhaps a higher order evolution of programming where you still need to be technical, but no longer have to implement every detail at least to scaffold things out.\r\n\r\n## video demo\r\n\r\n[![https://i3.ytimg.com/vi/UCo7YeTy-aE/hqdefault.jpg](https://i3.ytimg.com/vi/UCo7YeTy-aE/hqdefault.jpg)](https://youtu.be/UCo7YeTy-aE)\r\n\r\n## arch diagram\r\n\r\nnaturally generated with gpt4, like [we did for babyagi](https://twitter.com/swyx/status/1648724820316786688)\r\n![image](https://github.com/smol-ai/developer/assets/6764957/f8fc68f4-77f6-43ee-852f-a35fb195430a)\r\n\r\n\r\n### innovations and insights\r\n\r\n> Please subscribe to https://latent.space/ for a fuller writeup and insights and reflections"", ""- **Markdown is all you need** - Markdown is the perfect way to prompt for whole program synthesis because it is easy to mix english and code (whether `variable_names` or entire \\`\\`\\` code fenced code samples)\r\n  - turns out you can specify prompts in code in prompts and gpt4 obeys that to the letter\r\n- **Copy and paste programming**\r\n  - teaching the program to understand how to code around a new API (Anthropic's API is after GPT3's knowledge cutoff) by just pasting in the `curl` input and output\r\n  - pasting error messages into the prompt and vaguely telling the program how you'd like it handled. it kind of feels like \""logbook driven programming\"".\r\n- **Debugging by `cat`ing** the whole codebase with your error message and getting specific fix suggestions - particularly delightful!\r\n- **Tricks for whole program coherence** - our chosen example usecase, Chrome extensions, have a lot of indirect dependencies across files. Any hallucination of cross dependencies causes the whole program to error. \r\n  - We solved this by adding an intermediate step asking GPT to think through `shared_dependencies.md`, and then insisting on using that in generating each file. This basically means GPT is able to talk to itself...\r\n  - ... but it's not perfect, yet. `shared_dependencies.md` is sometimes not comperehensive in understanding what are hard dependencies between files. So we just solved it by specifying a specific `name` in the prompt. felt dirty at first but it works, and really it's just clear unambiguous communication at the end of the day. \r\n  - see `prompt.md` for SOTA smol-dev prompting\r\n- **Low activation energy for unfamiliar APIs**"", ""modal-client\r\nopenai\r\ntiktoken"", ""OPENAI_API_KEY=sk-xxxxxx\r\nANTHROPIC_API_KEY=sk-ant-api03-xxxxxx"", ""- **ability to install its own dependencies**\r\n  - this leaks into depending on the execution environment, which we all know is the path to dependency madness. how to avoid? dockerize? nix? [web container](https://twitter.com/litbid/status/1658154530385670150)?\r\n  - Modal has an interesting possibility: generate functions that speak modal which also solves the dependency thing https://twitter.com/akshat_b/status/1658146096902811657\r\n- **self-heal** by running the code itself and use errors as information for reprompting \r\n  - however its a bit hard to get errors from the chrome extension environment so we did not try this\r\n- **using anthropic as the coding layer**\r\n  - you can run `modal run anthropic.py --prompt prompt.md --outputdir=anthropic` to try it\r\n  - but it doesnt work because anthropic doesnt follow instructions to generate file code very well.\r\n- **make agents that autonomously run this code in a loop/watch the prompt file** and regenerate code each time, on a new git branch\r\n  - the code could be generated on 5 simultaneous git branches and checking their output would just involve switching git branches""]}",50,0.7389154434204102,0,What does this do?
UPGRADE_QUERY,"{""query"": ""What does this do?"", ""repo"": ""https://github.com/smol-ai/developer""}","1. What is the purpose of the code in this repository?
2. Can you explain the functionality of the code in this repository?
3. How does the code in this repository work?
4. What problem does the code in this repository solve?
5. What are the key features of the code in this repository?",7.475091218948364,0,What does this do?
CONTEXT_VALIDATOR,"{""query"": ""What is the purpose of the code in this repository?"", ""repo"": ""https://github.com/smol-ai/developer"", ""similar_documents"": [""- simply add to the prompt as they discover underspecified parts of the prompt\r\n  - manually runs the code and identifies errors\r\n  - *paste the error into the prompt* just like they would file a github issue\r\n  - for extra help, they can use `debugger.py` which reads the whole codebase to make specific code change suggestions\r\n\r\nLoop until happiness is attained. Notice that AI is only used as long as it is adding value - once it gets in your way, just take over the codebase from your smol junior developer with no fuss and no hurt feelings. (*we could also have smol-dev take over an existing codebase and bootstrap its own prompt... but that's a Future Direction*)\r\n\r\n*Not no code, not low code, but some third thing.* \r\n\r\nPerhaps a higher order evolution of programming where you still need to be technical, but no longer have to implement every detail at least to scaffold things out.\r\n\r\n## video demo\r\n\r\n[![https://i3.ytimg.com/vi/UCo7YeTy-aE/hqdefault.jpg](https://i3.ytimg.com/vi/UCo7YeTy-aE/hqdefault.jpg)](https://youtu.be/UCo7YeTy-aE)\r\n\r\n## arch diagram\r\n\r\nnaturally generated with gpt4, like [we did for babyagi](https://twitter.com/swyx/status/1648724820316786688)\r\n![image](https://github.com/smol-ai/developer/assets/6764957/f8fc68f4-77f6-43ee-852f-a35fb195430a)\r\n\r\n\r\n### innovations and insights\r\n\r\n> Please subscribe to https://latent.space/ for a fuller writeup and insights and reflections"", ""MIT License Copyright (c) 2023 swyx\r\n\r\nPermission is hereby granted, free of\r\ncharge, to any person obtaining a copy of this software and associated\r\ndocumentation files (the \""Software\""), to deal in the Software without\r\nrestriction, including without limitation the rights to use, copy, modify, merge,\r\npublish, distribute, sublicense, and/or sell copies of the Software, and to\r\npermit persons to whom the Software is furnished to do so, subject to the\r\nfollowing conditions:\r\n\r\nThe above copyright notice and this permission notice\r\n(including the next paragraph) shall be included in all copies or substantial\r\nportions of the Software.\r\n\r\nTHE SOFTWARE IS PROVIDED \""AS IS\"", WITHOUT WARRANTY OF\r\nANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\r\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO\r\nEVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR\r\nOTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\r\nFROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\nTHE SOFTWARE."", ""- **ability to install its own dependencies**\r\n  - this leaks into depending on the execution environment, which we all know is the path to dependency madness. how to avoid? dockerize? nix? [web container](https://twitter.com/litbid/status/1658154530385670150)?\r\n  - Modal has an interesting possibility: generate functions that speak modal which also solves the dependency thing https://twitter.com/akshat_b/status/1658146096902811657\r\n- **self-heal** by running the code itself and use errors as information for reprompting \r\n  - however its a bit hard to get errors from the chrome extension environment so we did not try this\r\n- **using anthropic as the coding layer**\r\n  - you can run `modal run anthropic.py --prompt prompt.md --outputdir=anthropic` to try it\r\n  - but it doesnt work because anthropic doesnt follow instructions to generate file code very well.\r\n- **make agents that autonomously run this code in a loop/watch the prompt file** and regenerate code each time, on a new git branch\r\n  - the code could be generated on 5 simultaneous git branches and checking their output would just involve switching git branches"", ""# smol developer\r\n\r\n***Human-centric & Coherent Whole Program Synthesis*** aka your own personal junior developer\r\n\r\n> [Build the thing that builds the thing!](https://twitter.com/swyx/status/1657578738345979905) a `smol dev` for every dev in every situation\r\n\r\nthis is a prototype of a \""junior developer\"" agent (aka `smol dev`) that scaffolds an entire codebase out for you once you give it a product spec, but does not end the world or overpromise AGI. instead of making and maintaining specific, rigid, one-shot starters, like `create-react-app`, or `create-nextjs-app`, this is basically [`create-anything-app`](https://news.ycombinator.com/item?id=35942352) where you develop your scaffolding prompt in a tight loop with your smol dev.\r\n\r\nAI that is helpful, harmless, and honest is complemented by a codebase that is simple, safe, and smol - <200 lines of Python and Prompts, so this is easy to understand and customize.\r\n\r\n<p align=\""center\"">\r\n  <img height=200 src=\""https://pbs.twimg.com/media/FwEzVCcaMAE7t4h?format=jpg&name=large\"" />\r\n</p>\r\n\r\n\r\n*engineering with prompts, rather than prompt engineering* \r\n\r\nThe demo example in `prompt.md` shows the potential of AI-enabled, but still firmly human developer centric, workflow:\r\n\r\n- Human writes a basic prompt for the app they want to build\r\n- `main.py` generates code\r\n- Human runs/reads the code\r\n- Human can:\r\n  - simply add to the prompt as they discover underspecified parts of the prompt"", ""- **Markdown is all you need** - Markdown is the perfect way to prompt for whole program synthesis because it is easy to mix english and code (whether `variable_names` or entire \\`\\`\\` code fenced code samples)\r\n  - turns out you can specify prompts in code in prompts and gpt4 obeys that to the letter\r\n- **Copy and paste programming**\r\n  - teaching the program to understand how to code around a new API (Anthropic's API is after GPT3's knowledge cutoff) by just pasting in the `curl` input and output\r\n  - pasting error messages into the prompt and vaguely telling the program how you'd like it handled. it kind of feels like \""logbook driven programming\"".\r\n- **Debugging by `cat`ing** the whole codebase with your error message and getting specific fix suggestions - particularly delightful!\r\n- **Tricks for whole program coherence** - our chosen example usecase, Chrome extensions, have a lot of indirect dependencies across files. Any hallucination of cross dependencies causes the whole program to error. \r\n  - We solved this by adding an intermediate step asking GPT to think through `shared_dependencies.md`, and then insisting on using that in generating each file. This basically means GPT is able to talk to itself...\r\n  - ... but it's not perfect, yet. `shared_dependencies.md` is sometimes not comperehensive in understanding what are hard dependencies between files. So we just solved it by specifying a specific `name` in the prompt. felt dirty at first but it works, and really it's just clear unambiguous communication at the end of the day. \r\n  - see `prompt.md` for SOTA smol-dev prompting\r\n- **Low activation energy for unfamiliar APIs**""]}",50,0.7134044170379639,0,What does this do?
RUN_QUERY_RAG,"{""query"": ""What is the purpose of the code in this repository?"", ""repo"": ""https://github.com/smol-ai/developer"", ""similar_documents"": [""- simply add to the prompt as they discover underspecified parts of the prompt\r\n  - manually runs the code and identifies errors\r\n  - *paste the error into the prompt* just like they would file a github issue\r\n  - for extra help, they can use `debugger.py` which reads the whole codebase to make specific code change suggestions\r\n\r\nLoop until happiness is attained. Notice that AI is only used as long as it is adding value - once it gets in your way, just take over the codebase from your smol junior developer with no fuss and no hurt feelings. (*we could also have smol-dev take over an existing codebase and bootstrap its own prompt... but that's a Future Direction*)\r\n\r\n*Not no code, not low code, but some third thing.* \r\n\r\nPerhaps a higher order evolution of programming where you still need to be technical, but no longer have to implement every detail at least to scaffold things out.\r\n\r\n## video demo\r\n\r\n[![https://i3.ytimg.com/vi/UCo7YeTy-aE/hqdefault.jpg](https://i3.ytimg.com/vi/UCo7YeTy-aE/hqdefault.jpg)](https://youtu.be/UCo7YeTy-aE)\r\n\r\n## arch diagram\r\n\r\nnaturally generated with gpt4, like [we did for babyagi](https://twitter.com/swyx/status/1648724820316786688)\r\n![image](https://github.com/smol-ai/developer/assets/6764957/f8fc68f4-77f6-43ee-852f-a35fb195430a)\r\n\r\n\r\n### innovations and insights\r\n\r\n> Please subscribe to https://latent.space/ for a fuller writeup and insights and reflections"", ""MIT License Copyright (c) 2023 swyx\r\n\r\nPermission is hereby granted, free of\r\ncharge, to any person obtaining a copy of this software and associated\r\ndocumentation files (the \""Software\""), to deal in the Software without\r\nrestriction, including without limitation the rights to use, copy, modify, merge,\r\npublish, distribute, sublicense, and/or sell copies of the Software, and to\r\npermit persons to whom the Software is furnished to do so, subject to the\r\nfollowing conditions:\r\n\r\nThe above copyright notice and this permission notice\r\n(including the next paragraph) shall be included in all copies or substantial\r\nportions of the Software.\r\n\r\nTHE SOFTWARE IS PROVIDED \""AS IS\"", WITHOUT WARRANTY OF\r\nANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\r\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO\r\nEVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR\r\nOTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\r\nFROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\nTHE SOFTWARE."", ""- **ability to install its own dependencies**\r\n  - this leaks into depending on the execution environment, which we all know is the path to dependency madness. how to avoid? dockerize? nix? [web container](https://twitter.com/litbid/status/1658154530385670150)?\r\n  - Modal has an interesting possibility: generate functions that speak modal which also solves the dependency thing https://twitter.com/akshat_b/status/1658146096902811657\r\n- **self-heal** by running the code itself and use errors as information for reprompting \r\n  - however its a bit hard to get errors from the chrome extension environment so we did not try this\r\n- **using anthropic as the coding layer**\r\n  - you can run `modal run anthropic.py --prompt prompt.md --outputdir=anthropic` to try it\r\n  - but it doesnt work because anthropic doesnt follow instructions to generate file code very well.\r\n- **make agents that autonomously run this code in a loop/watch the prompt file** and regenerate code each time, on a new git branch\r\n  - the code could be generated on 5 simultaneous git branches and checking their output would just involve switching git branches"", ""# smol developer\r\n\r\n***Human-centric & Coherent Whole Program Synthesis*** aka your own personal junior developer\r\n\r\n> [Build the thing that builds the thing!](https://twitter.com/swyx/status/1657578738345979905) a `smol dev` for every dev in every situation\r\n\r\nthis is a prototype of a \""junior developer\"" agent (aka `smol dev`) that scaffolds an entire codebase out for you once you give it a product spec, but does not end the world or overpromise AGI. instead of making and maintaining specific, rigid, one-shot starters, like `create-react-app`, or `create-nextjs-app`, this is basically [`create-anything-app`](https://news.ycombinator.com/item?id=35942352) where you develop your scaffolding prompt in a tight loop with your smol dev.\r\n\r\nAI that is helpful, harmless, and honest is complemented by a codebase that is simple, safe, and smol - <200 lines of Python and Prompts, so this is easy to understand and customize.\r\n\r\n<p align=\""center\"">\r\n  <img height=200 src=\""https://pbs.twimg.com/media/FwEzVCcaMAE7t4h?format=jpg&name=large\"" />\r\n</p>\r\n\r\n\r\n*engineering with prompts, rather than prompt engineering* \r\n\r\nThe demo example in `prompt.md` shows the potential of AI-enabled, but still firmly human developer centric, workflow:\r\n\r\n- Human writes a basic prompt for the app they want to build\r\n- `main.py` generates code\r\n- Human runs/reads the code\r\n- Human can:\r\n  - simply add to the prompt as they discover underspecified parts of the prompt"", ""- **Markdown is all you need** - Markdown is the perfect way to prompt for whole program synthesis because it is easy to mix english and code (whether `variable_names` or entire \\`\\`\\` code fenced code samples)\r\n  - turns out you can specify prompts in code in prompts and gpt4 obeys that to the letter\r\n- **Copy and paste programming**\r\n  - teaching the program to understand how to code around a new API (Anthropic's API is after GPT3's knowledge cutoff) by just pasting in the `curl` input and output\r\n  - pasting error messages into the prompt and vaguely telling the program how you'd like it handled. it kind of feels like \""logbook driven programming\"".\r\n- **Debugging by `cat`ing** the whole codebase with your error message and getting specific fix suggestions - particularly delightful!\r\n- **Tricks for whole program coherence** - our chosen example usecase, Chrome extensions, have a lot of indirect dependencies across files. Any hallucination of cross dependencies causes the whole program to error. \r\n  - We solved this by adding an intermediate step asking GPT to think through `shared_dependencies.md`, and then insisting on using that in generating each file. This basically means GPT is able to talk to itself...\r\n  - ... but it's not perfect, yet. `shared_dependencies.md` is sometimes not comperehensive in understanding what are hard dependencies between files. So we just solved it by specifying a specific `name` in the prompt. felt dirty at first but it works, and really it's just clear unambiguous communication at the end of the day. \r\n  - see `prompt.md` for SOTA smol-dev prompting\r\n- **Low activation energy for unfamiliar APIs**""]}","The purpose of the code in this repository is to create a ""junior developer"" agent that can scaffold an entire codebase based on a product spec provided by the user. The agent uses prompts written in Markdown to generate code, which the user can then manually run and modify as needed. The codebase is designed to be simple, safe, and under 200 lines of Python and Prompts. The agent can also make specific code change suggestions using a tool called `debugger.py`. The codebase is intended to be human-centric and to complement AI that is helpful, harmless, and honest. The repository contains various documents that provide additional information on the codebase, including a video demo and an architecture diagram.",14.385043859481812,0,What does this do?
CONTEXT_VALIDATOR,"{""query"": ""What does this do?"", ""repo"": ""https://github.com/smol-ai/developer"", ""similar_documents"": [""# todo\r\n# https://twitter.com/nathanwchan/status/1658153897154981888?s=20"", ""# smol developer\r\n\r\n***Human-centric & Coherent Whole Program Synthesis*** aka your own personal junior developer\r\n\r\n> [Build the thing that builds the thing!](https://twitter.com/swyx/status/1657578738345979905) a `smol dev` for every dev in every situation\r\n\r\nthis is a prototype of a \""junior developer\"" agent (aka `smol dev`) that scaffolds an entire codebase out for you once you give it a product spec, but does not end the world or overpromise AGI. instead of making and maintaining specific, rigid, one-shot starters, like `create-react-app`, or `create-nextjs-app`, this is basically [`create-anything-app`](https://news.ycombinator.com/item?id=35942352) where you develop your scaffolding prompt in a tight loop with your smol dev.\r\n\r\nAI that is helpful, harmless, and honest is complemented by a codebase that is simple, safe, and smol - <200 lines of Python and Prompts, so this is easy to understand and customize.\r\n\r\n<p align=\""center\"">\r\n  <img height=200 src=\""https://pbs.twimg.com/media/FwEzVCcaMAE7t4h?format=jpg&name=large\"" />\r\n</p>\r\n\r\n\r\n*engineering with prompts, rather than prompt engineering* \r\n\r\nThe demo example in `prompt.md` shows the potential of AI-enabled, but still firmly human developer centric, workflow:\r\n\r\n- Human writes a basic prompt for the app they want to build\r\n- `main.py` generates code\r\n- Human runs/reads the code\r\n- Human can:\r\n  - simply add to the prompt as they discover underspecified parts of the prompt"", ""modal-client\r\nopenai\r\ntiktoken"", ""body {\r\n  font-family: Arial, sans-serif;\r\n  margin: 0;\r\n  padding: 15px;\r\n}\r\n\r\ntextarea, input {\r\n  display: block;\r\n  width: 100%;\r\n  margin-bottom: 10px;\r\n  padding: 5px;\r\n  font-size: 14px;\r\n}\r\n\r\nbutton {\r\n  background-color: #4CAF50;\r\n  border: none;\r\n  color: white;\r\n  padding: 10px 20px;\r\n  text-align: center;\r\n  text-decoration: none;\r\n  display: inline-block;\r\n  font-size: 14px;\r\n  margin: 10px 0;\r\n  cursor: pointer;\r\n}\r\n\r\nbutton:hover {\r\n  background-color: #45a049;\r\n}\r\n\r\n#content {\r\n  margin-top: 20px;\r\n  font-size: 14px;\r\n  line-height: 1.5;\r\n}\r\n\r\n#loadingIndicator {\r\n  display: none;\r\n  font-size: 14px;\r\n  color: #999;\r\n}"", ""The program is a Chrome extension that summarizes web pages using the Anthropic Claude API. It consists of several files: popup.js, styles.css, \r\nbackground.js, popup.html, shared_dependencies.md, and content_script.js. \r\n\r\npopup.html is the main user interface for the extension, containing a form with several input fields and a submit button. popup.js handles the logic\r\nfor the form, including retrieving the user's input, calling the Anthropic API, and rendering the summary in the content div. styles.css provides \r\nstyling for the UI elements.\r\n\r\nbackground.js is responsible for executing content_script.js, which retrieves the page content (title and body text) and sends it to popup.js for \r\nprocessing. It also handles storing and retrieving the page content data using Chrome's storage API.\r\n\r\nshared_dependencies.md lists the shared variables, data schemas, DOM element IDs, message names, and function names used across the various files.\r\n\r\nOverall, the program uses a combination of JavaScript, HTML, and CSS to provide a user-friendly interface for summarizing web pages using the \r\nAnthropic Claude API.""]}",60,0.5217061042785645,1,What does this do?
UPGRADE_QUERY,"{""query"": ""What does this do?"", ""repo"": ""https://github.com/smol-ai/developer""}","1. What is the purpose of the code in this repository?
2. Can you explain the functionality of the code in this repository?
3. How does the code in this repository work?
4. What problem does the code in this repository solve?
5. What are the key features of the code in this repository?",6.825177192687988,1,What does this do?
CONTEXT_VALIDATOR,"{""query"": ""What is the purpose of the code in this repository?"", ""repo"": ""https://github.com/smol-ai/developer"", ""similar_documents"": [""- simply add to the prompt as they discover underspecified parts of the prompt\r\n  - manually runs the code and identifies errors\r\n  - *paste the error into the prompt* just like they would file a github issue\r\n  - for extra help, they can use `debugger.py` which reads the whole codebase to make specific code change suggestions\r\n\r\nLoop until happiness is attained. Notice that AI is only used as long as it is adding value - once it gets in your way, just take over the codebase from your smol junior developer with no fuss and no hurt feelings. (*we could also have smol-dev take over an existing codebase and bootstrap its own prompt... but that's a Future Direction*)\r\n\r\n*Not no code, not low code, but some third thing.* \r\n\r\nPerhaps a higher order evolution of programming where you still need to be technical, but no longer have to implement every detail at least to scaffold things out.\r\n\r\n## video demo\r\n\r\n[![https://i3.ytimg.com/vi/UCo7YeTy-aE/hqdefault.jpg](https://i3.ytimg.com/vi/UCo7YeTy-aE/hqdefault.jpg)](https://youtu.be/UCo7YeTy-aE)\r\n\r\n## arch diagram\r\n\r\nnaturally generated with gpt4, like [we did for babyagi](https://twitter.com/swyx/status/1648724820316786688)\r\n![image](https://github.com/smol-ai/developer/assets/6764957/f8fc68f4-77f6-43ee-852f-a35fb195430a)\r\n\r\n\r\n### innovations and insights\r\n\r\n> Please subscribe to https://latent.space/ for a fuller writeup and insights and reflections"", ""MIT License Copyright (c) 2023 swyx\r\n\r\nPermission is hereby granted, free of\r\ncharge, to any person obtaining a copy of this software and associated\r\ndocumentation files (the \""Software\""), to deal in the Software without\r\nrestriction, including without limitation the rights to use, copy, modify, merge,\r\npublish, distribute, sublicense, and/or sell copies of the Software, and to\r\npermit persons to whom the Software is furnished to do so, subject to the\r\nfollowing conditions:\r\n\r\nThe above copyright notice and this permission notice\r\n(including the next paragraph) shall be included in all copies or substantial\r\nportions of the Software.\r\n\r\nTHE SOFTWARE IS PROVIDED \""AS IS\"", WITHOUT WARRANTY OF\r\nANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\r\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO\r\nEVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR\r\nOTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\r\nFROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\nTHE SOFTWARE."", ""- **ability to install its own dependencies**\r\n  - this leaks into depending on the execution environment, which we all know is the path to dependency madness. how to avoid? dockerize? nix? [web container](https://twitter.com/litbid/status/1658154530385670150)?\r\n  - Modal has an interesting possibility: generate functions that speak modal which also solves the dependency thing https://twitter.com/akshat_b/status/1658146096902811657\r\n- **self-heal** by running the code itself and use errors as information for reprompting \r\n  - however its a bit hard to get errors from the chrome extension environment so we did not try this\r\n- **using anthropic as the coding layer**\r\n  - you can run `modal run anthropic.py --prompt prompt.md --outputdir=anthropic` to try it\r\n  - but it doesnt work because anthropic doesnt follow instructions to generate file code very well.\r\n- **make agents that autonomously run this code in a loop/watch the prompt file** and regenerate code each time, on a new git branch\r\n  - the code could be generated on 5 simultaneous git branches and checking their output would just involve switching git branches"", ""# smol developer\r\n\r\n***Human-centric & Coherent Whole Program Synthesis*** aka your own personal junior developer\r\n\r\n> [Build the thing that builds the thing!](https://twitter.com/swyx/status/1657578738345979905) a `smol dev` for every dev in every situation\r\n\r\nthis is a prototype of a \""junior developer\"" agent (aka `smol dev`) that scaffolds an entire codebase out for you once you give it a product spec, but does not end the world or overpromise AGI. instead of making and maintaining specific, rigid, one-shot starters, like `create-react-app`, or `create-nextjs-app`, this is basically [`create-anything-app`](https://news.ycombinator.com/item?id=35942352) where you develop your scaffolding prompt in a tight loop with your smol dev.\r\n\r\nAI that is helpful, harmless, and honest is complemented by a codebase that is simple, safe, and smol - <200 lines of Python and Prompts, so this is easy to understand and customize.\r\n\r\n<p align=\""center\"">\r\n  <img height=200 src=\""https://pbs.twimg.com/media/FwEzVCcaMAE7t4h?format=jpg&name=large\"" />\r\n</p>\r\n\r\n\r\n*engineering with prompts, rather than prompt engineering* \r\n\r\nThe demo example in `prompt.md` shows the potential of AI-enabled, but still firmly human developer centric, workflow:\r\n\r\n- Human writes a basic prompt for the app they want to build\r\n- `main.py` generates code\r\n- Human runs/reads the code\r\n- Human can:\r\n  - simply add to the prompt as they discover underspecified parts of the prompt"", ""- **Markdown is all you need** - Markdown is the perfect way to prompt for whole program synthesis because it is easy to mix english and code (whether `variable_names` or entire \\`\\`\\` code fenced code samples)\r\n  - turns out you can specify prompts in code in prompts and gpt4 obeys that to the letter\r\n- **Copy and paste programming**\r\n  - teaching the program to understand how to code around a new API (Anthropic's API is after GPT3's knowledge cutoff) by just pasting in the `curl` input and output\r\n  - pasting error messages into the prompt and vaguely telling the program how you'd like it handled. it kind of feels like \""logbook driven programming\"".\r\n- **Debugging by `cat`ing** the whole codebase with your error message and getting specific fix suggestions - particularly delightful!\r\n- **Tricks for whole program coherence** - our chosen example usecase, Chrome extensions, have a lot of indirect dependencies across files. Any hallucination of cross dependencies causes the whole program to error. \r\n  - We solved this by adding an intermediate step asking GPT to think through `shared_dependencies.md`, and then insisting on using that in generating each file. This basically means GPT is able to talk to itself...\r\n  - ... but it's not perfect, yet. `shared_dependencies.md` is sometimes not comperehensive in understanding what are hard dependencies between files. So we just solved it by specifying a specific `name` in the prompt. felt dirty at first but it works, and really it's just clear unambiguous communication at the end of the day. \r\n  - see `prompt.md` for SOTA smol-dev prompting\r\n- **Low activation energy for unfamiliar APIs**""]}",50,0.6648130416870117,1,What does this do?
CONTEXT_VALIDATOR,"{""query"": ""Can you explain the functionality of the code in this repository?"", ""repo"": ""https://github.com/smol-ai/developer"", ""similar_documents"": [""- simply add to the prompt as they discover underspecified parts of the prompt\r\n  - manually runs the code and identifies errors\r\n  - *paste the error into the prompt* just like they would file a github issue\r\n  - for extra help, they can use `debugger.py` which reads the whole codebase to make specific code change suggestions\r\n\r\nLoop until happiness is attained. Notice that AI is only used as long as it is adding value - once it gets in your way, just take over the codebase from your smol junior developer with no fuss and no hurt feelings. (*we could also have smol-dev take over an existing codebase and bootstrap its own prompt... but that's a Future Direction*)\r\n\r\n*Not no code, not low code, but some third thing.* \r\n\r\nPerhaps a higher order evolution of programming where you still need to be technical, but no longer have to implement every detail at least to scaffold things out.\r\n\r\n## video demo\r\n\r\n[![https://i3.ytimg.com/vi/UCo7YeTy-aE/hqdefault.jpg](https://i3.ytimg.com/vi/UCo7YeTy-aE/hqdefault.jpg)](https://youtu.be/UCo7YeTy-aE)\r\n\r\n## arch diagram\r\n\r\nnaturally generated with gpt4, like [we did for babyagi](https://twitter.com/swyx/status/1648724820316786688)\r\n![image](https://github.com/smol-ai/developer/assets/6764957/f8fc68f4-77f6-43ee-852f-a35fb195430a)\r\n\r\n\r\n### innovations and insights\r\n\r\n> Please subscribe to https://latent.space/ for a fuller writeup and insights and reflections"", ""- **ability to install its own dependencies**\r\n  - this leaks into depending on the execution environment, which we all know is the path to dependency madness. how to avoid? dockerize? nix? [web container](https://twitter.com/litbid/status/1658154530385670150)?\r\n  - Modal has an interesting possibility: generate functions that speak modal which also solves the dependency thing https://twitter.com/akshat_b/status/1658146096902811657\r\n- **self-heal** by running the code itself and use errors as information for reprompting \r\n  - however its a bit hard to get errors from the chrome extension environment so we did not try this\r\n- **using anthropic as the coding layer**\r\n  - you can run `modal run anthropic.py --prompt prompt.md --outputdir=anthropic` to try it\r\n  - but it doesnt work because anthropic doesnt follow instructions to generate file code very well.\r\n- **make agents that autonomously run this code in a loop/watch the prompt file** and regenerate code each time, on a new git branch\r\n  - the code could be generated on 5 simultaneous git branches and checking their output would just involve switching git branches"", ""# smol developer\r\n\r\n***Human-centric & Coherent Whole Program Synthesis*** aka your own personal junior developer\r\n\r\n> [Build the thing that builds the thing!](https://twitter.com/swyx/status/1657578738345979905) a `smol dev` for every dev in every situation\r\n\r\nthis is a prototype of a \""junior developer\"" agent (aka `smol dev`) that scaffolds an entire codebase out for you once you give it a product spec, but does not end the world or overpromise AGI. instead of making and maintaining specific, rigid, one-shot starters, like `create-react-app`, or `create-nextjs-app`, this is basically [`create-anything-app`](https://news.ycombinator.com/item?id=35942352) where you develop your scaffolding prompt in a tight loop with your smol dev.\r\n\r\nAI that is helpful, harmless, and honest is complemented by a codebase that is simple, safe, and smol - <200 lines of Python and Prompts, so this is easy to understand and customize.\r\n\r\n<p align=\""center\"">\r\n  <img height=200 src=\""https://pbs.twimg.com/media/FwEzVCcaMAE7t4h?format=jpg&name=large\"" />\r\n</p>\r\n\r\n\r\n*engineering with prompts, rather than prompt engineering* \r\n\r\nThe demo example in `prompt.md` shows the potential of AI-enabled, but still firmly human developer centric, workflow:\r\n\r\n- Human writes a basic prompt for the app they want to build\r\n- `main.py` generates code\r\n- Human runs/reads the code\r\n- Human can:\r\n  - simply add to the prompt as they discover underspecified parts of the prompt"", ""The program is a Chrome extension that summarizes web pages using the Anthropic Claude API. It consists of several files: popup.js, styles.css, \r\nbackground.js, popup.html, shared_dependencies.md, and content_script.js. \r\n\r\npopup.html is the main user interface for the extension, containing a form with several input fields and a submit button. popup.js handles the logic\r\nfor the form, including retrieving the user's input, calling the Anthropic API, and rendering the summary in the content div. styles.css provides \r\nstyling for the UI elements.\r\n\r\nbackground.js is responsible for executing content_script.js, which retrieves the page content (title and body text) and sends it to popup.js for \r\nprocessing. It also handles storing and retrieving the page content data using Chrome's storage API.\r\n\r\nshared_dependencies.md lists the shared variables, data schemas, DOM element IDs, message names, and function names used across the various files.\r\n\r\nOverall, the program uses a combination of JavaScript, HTML, and CSS to provide a user-friendly interface for summarizing web pages using the \r\nAnthropic Claude API."", ""## install\r\n\r\nit's basically: \r\n\r\n- `git clone https://github.com/smol-ai/developer`.\r\n- copy over `.example.env` to `.env` filling in your API keys.\r\n\r\nThere are no python dependencies to wrangle thanks to using Modal as a [self-provisioning runtime](https://www.google.com/search?q=self+provisioning+runtime).\r\n\r\nUnfortunately this project also uses 3 waitlisted things:\r\n\r\n- Modal.com - `pip install modal-client` (private beta - hit up the modal team to get an invite, and login)\r\n  - You can run this project w/o Modal following these instructions:\r\n  - `pip install -r requirements.txt`\r\n  - `python main_no_modal.py YOUR_PROMPT_HERE`\r\n- GPT-4 api (private beta) - can use 3.5 but obviously wont be as good\r\n- (for the demo project) anthropic claude 100k context api (private beta)\r\n\r\n> yes, the most important skill in being an ai engineer is social engineering to get off waitlists. Modal will let you in if you say the keyword \""swyx\""\r\n\r\nyou'll have to adapt this code on a fork if you want to use it on other infra. please open issues/PRs and i'll happily highlight your fork here.\r\n\r\n### trying the example chrome extension""]}",50,0.5768423080444336,1,What does this do?
CONTEXT_VALIDATOR,"{""query"": ""How does the code in this repository work?"", ""repo"": ""https://github.com/smol-ai/developer"", ""similar_documents"": [""- simply add to the prompt as they discover underspecified parts of the prompt\r\n  - manually runs the code and identifies errors\r\n  - *paste the error into the prompt* just like they would file a github issue\r\n  - for extra help, they can use `debugger.py` which reads the whole codebase to make specific code change suggestions\r\n\r\nLoop until happiness is attained. Notice that AI is only used as long as it is adding value - once it gets in your way, just take over the codebase from your smol junior developer with no fuss and no hurt feelings. (*we could also have smol-dev take over an existing codebase and bootstrap its own prompt... but that's a Future Direction*)\r\n\r\n*Not no code, not low code, but some third thing.* \r\n\r\nPerhaps a higher order evolution of programming where you still need to be technical, but no longer have to implement every detail at least to scaffold things out.\r\n\r\n## video demo\r\n\r\n[![https://i3.ytimg.com/vi/UCo7YeTy-aE/hqdefault.jpg](https://i3.ytimg.com/vi/UCo7YeTy-aE/hqdefault.jpg)](https://youtu.be/UCo7YeTy-aE)\r\n\r\n## arch diagram\r\n\r\nnaturally generated with gpt4, like [we did for babyagi](https://twitter.com/swyx/status/1648724820316786688)\r\n![image](https://github.com/smol-ai/developer/assets/6764957/f8fc68f4-77f6-43ee-852f-a35fb195430a)\r\n\r\n\r\n### innovations and insights\r\n\r\n> Please subscribe to https://latent.space/ for a fuller writeup and insights and reflections"", ""- **ability to install its own dependencies**\r\n  - this leaks into depending on the execution environment, which we all know is the path to dependency madness. how to avoid? dockerize? nix? [web container](https://twitter.com/litbid/status/1658154530385670150)?\r\n  - Modal has an interesting possibility: generate functions that speak modal which also solves the dependency thing https://twitter.com/akshat_b/status/1658146096902811657\r\n- **self-heal** by running the code itself and use errors as information for reprompting \r\n  - however its a bit hard to get errors from the chrome extension environment so we did not try this\r\n- **using anthropic as the coding layer**\r\n  - you can run `modal run anthropic.py --prompt prompt.md --outputdir=anthropic` to try it\r\n  - but it doesnt work because anthropic doesnt follow instructions to generate file code very well.\r\n- **make agents that autonomously run this code in a loop/watch the prompt file** and regenerate code each time, on a new git branch\r\n  - the code could be generated on 5 simultaneous git branches and checking their output would just involve switching git branches"", ""# smol developer\r\n\r\n***Human-centric & Coherent Whole Program Synthesis*** aka your own personal junior developer\r\n\r\n> [Build the thing that builds the thing!](https://twitter.com/swyx/status/1657578738345979905) a `smol dev` for every dev in every situation\r\n\r\nthis is a prototype of a \""junior developer\"" agent (aka `smol dev`) that scaffolds an entire codebase out for you once you give it a product spec, but does not end the world or overpromise AGI. instead of making and maintaining specific, rigid, one-shot starters, like `create-react-app`, or `create-nextjs-app`, this is basically [`create-anything-app`](https://news.ycombinator.com/item?id=35942352) where you develop your scaffolding prompt in a tight loop with your smol dev.\r\n\r\nAI that is helpful, harmless, and honest is complemented by a codebase that is simple, safe, and smol - <200 lines of Python and Prompts, so this is easy to understand and customize.\r\n\r\n<p align=\""center\"">\r\n  <img height=200 src=\""https://pbs.twimg.com/media/FwEzVCcaMAE7t4h?format=jpg&name=large\"" />\r\n</p>\r\n\r\n\r\n*engineering with prompts, rather than prompt engineering* \r\n\r\nThe demo example in `prompt.md` shows the potential of AI-enabled, but still firmly human developer centric, workflow:\r\n\r\n- Human writes a basic prompt for the app they want to build\r\n- `main.py` generates code\r\n- Human runs/reads the code\r\n- Human can:\r\n  - simply add to the prompt as they discover underspecified parts of the prompt"", ""## install\r\n\r\nit's basically: \r\n\r\n- `git clone https://github.com/smol-ai/developer`.\r\n- copy over `.example.env` to `.env` filling in your API keys.\r\n\r\nThere are no python dependencies to wrangle thanks to using Modal as a [self-provisioning runtime](https://www.google.com/search?q=self+provisioning+runtime).\r\n\r\nUnfortunately this project also uses 3 waitlisted things:\r\n\r\n- Modal.com - `pip install modal-client` (private beta - hit up the modal team to get an invite, and login)\r\n  - You can run this project w/o Modal following these instructions:\r\n  - `pip install -r requirements.txt`\r\n  - `python main_no_modal.py YOUR_PROMPT_HERE`\r\n- GPT-4 api (private beta) - can use 3.5 but obviously wont be as good\r\n- (for the demo project) anthropic claude 100k context api (private beta)\r\n\r\n> yes, the most important skill in being an ai engineer is social engineering to get off waitlists. Modal will let you in if you say the keyword \""swyx\""\r\n\r\nyou'll have to adapt this code on a fork if you want to use it on other infra. please open issues/PRs and i'll happily highlight your fork here.\r\n\r\n### trying the example chrome extension"", ""- **Markdown is all you need** - Markdown is the perfect way to prompt for whole program synthesis because it is easy to mix english and code (whether `variable_names` or entire \\`\\`\\` code fenced code samples)\r\n  - turns out you can specify prompts in code in prompts and gpt4 obeys that to the letter\r\n- **Copy and paste programming**\r\n  - teaching the program to understand how to code around a new API (Anthropic's API is after GPT3's knowledge cutoff) by just pasting in the `curl` input and output\r\n  - pasting error messages into the prompt and vaguely telling the program how you'd like it handled. it kind of feels like \""logbook driven programming\"".\r\n- **Debugging by `cat`ing** the whole codebase with your error message and getting specific fix suggestions - particularly delightful!\r\n- **Tricks for whole program coherence** - our chosen example usecase, Chrome extensions, have a lot of indirect dependencies across files. Any hallucination of cross dependencies causes the whole program to error. \r\n  - We solved this by adding an intermediate step asking GPT to think through `shared_dependencies.md`, and then insisting on using that in generating each file. This basically means GPT is able to talk to itself...\r\n  - ... but it's not perfect, yet. `shared_dependencies.md` is sometimes not comperehensive in understanding what are hard dependencies between files. So we just solved it by specifying a specific `name` in the prompt. felt dirty at first but it works, and really it's just clear unambiguous communication at the end of the day. \r\n  - see `prompt.md` for SOTA smol-dev prompting\r\n- **Low activation energy for unfamiliar APIs**""]}",50,0.7148823738098145,1,What does this do?
CONTEXT_VALIDATOR,"{""query"": ""What problem does the code in this repository solve?"", ""repo"": ""https://github.com/smol-ai/developer"", ""similar_documents"": [""- simply add to the prompt as they discover underspecified parts of the prompt\r\n  - manually runs the code and identifies errors\r\n  - *paste the error into the prompt* just like they would file a github issue\r\n  - for extra help, they can use `debugger.py` which reads the whole codebase to make specific code change suggestions\r\n\r\nLoop until happiness is attained. Notice that AI is only used as long as it is adding value - once it gets in your way, just take over the codebase from your smol junior developer with no fuss and no hurt feelings. (*we could also have smol-dev take over an existing codebase and bootstrap its own prompt... but that's a Future Direction*)\r\n\r\n*Not no code, not low code, but some third thing.* \r\n\r\nPerhaps a higher order evolution of programming where you still need to be technical, but no longer have to implement every detail at least to scaffold things out.\r\n\r\n## video demo\r\n\r\n[![https://i3.ytimg.com/vi/UCo7YeTy-aE/hqdefault.jpg](https://i3.ytimg.com/vi/UCo7YeTy-aE/hqdefault.jpg)](https://youtu.be/UCo7YeTy-aE)\r\n\r\n## arch diagram\r\n\r\nnaturally generated with gpt4, like [we did for babyagi](https://twitter.com/swyx/status/1648724820316786688)\r\n![image](https://github.com/smol-ai/developer/assets/6764957/f8fc68f4-77f6-43ee-852f-a35fb195430a)\r\n\r\n\r\n### innovations and insights\r\n\r\n> Please subscribe to https://latent.space/ for a fuller writeup and insights and reflections"", ""- **ability to install its own dependencies**\r\n  - this leaks into depending on the execution environment, which we all know is the path to dependency madness. how to avoid? dockerize? nix? [web container](https://twitter.com/litbid/status/1658154530385670150)?\r\n  - Modal has an interesting possibility: generate functions that speak modal which also solves the dependency thing https://twitter.com/akshat_b/status/1658146096902811657\r\n- **self-heal** by running the code itself and use errors as information for reprompting \r\n  - however its a bit hard to get errors from the chrome extension environment so we did not try this\r\n- **using anthropic as the coding layer**\r\n  - you can run `modal run anthropic.py --prompt prompt.md --outputdir=anthropic` to try it\r\n  - but it doesnt work because anthropic doesnt follow instructions to generate file code very well.\r\n- **make agents that autonomously run this code in a loop/watch the prompt file** and regenerate code each time, on a new git branch\r\n  - the code could be generated on 5 simultaneous git branches and checking their output would just involve switching git branches"", ""- **Markdown is all you need** - Markdown is the perfect way to prompt for whole program synthesis because it is easy to mix english and code (whether `variable_names` or entire \\`\\`\\` code fenced code samples)\r\n  - turns out you can specify prompts in code in prompts and gpt4 obeys that to the letter\r\n- **Copy and paste programming**\r\n  - teaching the program to understand how to code around a new API (Anthropic's API is after GPT3's knowledge cutoff) by just pasting in the `curl` input and output\r\n  - pasting error messages into the prompt and vaguely telling the program how you'd like it handled. it kind of feels like \""logbook driven programming\"".\r\n- **Debugging by `cat`ing** the whole codebase with your error message and getting specific fix suggestions - particularly delightful!\r\n- **Tricks for whole program coherence** - our chosen example usecase, Chrome extensions, have a lot of indirect dependencies across files. Any hallucination of cross dependencies causes the whole program to error. \r\n  - We solved this by adding an intermediate step asking GPT to think through `shared_dependencies.md`, and then insisting on using that in generating each file. This basically means GPT is able to talk to itself...\r\n  - ... but it's not perfect, yet. `shared_dependencies.md` is sometimes not comperehensive in understanding what are hard dependencies between files. So we just solved it by specifying a specific `name` in the prompt. felt dirty at first but it works, and really it's just clear unambiguous communication at the end of the day. \r\n  - see `prompt.md` for SOTA smol-dev prompting\r\n- **Low activation energy for unfamiliar APIs**"", ""# todo\r\n# https://twitter.com/nathanwchan/status/1658153897154981888?s=20"", ""# smol developer\r\n\r\n***Human-centric & Coherent Whole Program Synthesis*** aka your own personal junior developer\r\n\r\n> [Build the thing that builds the thing!](https://twitter.com/swyx/status/1657578738345979905) a `smol dev` for every dev in every situation\r\n\r\nthis is a prototype of a \""junior developer\"" agent (aka `smol dev`) that scaffolds an entire codebase out for you once you give it a product spec, but does not end the world or overpromise AGI. instead of making and maintaining specific, rigid, one-shot starters, like `create-react-app`, or `create-nextjs-app`, this is basically [`create-anything-app`](https://news.ycombinator.com/item?id=35942352) where you develop your scaffolding prompt in a tight loop with your smol dev.\r\n\r\nAI that is helpful, harmless, and honest is complemented by a codebase that is simple, safe, and smol - <200 lines of Python and Prompts, so this is easy to understand and customize.\r\n\r\n<p align=\""center\"">\r\n  <img height=200 src=\""https://pbs.twimg.com/media/FwEzVCcaMAE7t4h?format=jpg&name=large\"" />\r\n</p>\r\n\r\n\r\n*engineering with prompts, rather than prompt engineering* \r\n\r\nThe demo example in `prompt.md` shows the potential of AI-enabled, but still firmly human developer centric, workflow:\r\n\r\n- Human writes a basic prompt for the app they want to build\r\n- `main.py` generates code\r\n- Human runs/reads the code\r\n- Human can:\r\n  - simply add to the prompt as they discover underspecified parts of the prompt""]}",50,0.575096845626831,1,What does this do?
CONTEXT_VALIDATOR,"{""query"": ""What are the key features of the code in this repository?"", ""repo"": ""https://github.com/smol-ai/developer"", ""similar_documents"": [""- simply add to the prompt as they discover underspecified parts of the prompt\r\n  - manually runs the code and identifies errors\r\n  - *paste the error into the prompt* just like they would file a github issue\r\n  - for extra help, they can use `debugger.py` which reads the whole codebase to make specific code change suggestions\r\n\r\nLoop until happiness is attained. Notice that AI is only used as long as it is adding value - once it gets in your way, just take over the codebase from your smol junior developer with no fuss and no hurt feelings. (*we could also have smol-dev take over an existing codebase and bootstrap its own prompt... but that's a Future Direction*)\r\n\r\n*Not no code, not low code, but some third thing.* \r\n\r\nPerhaps a higher order evolution of programming where you still need to be technical, but no longer have to implement every detail at least to scaffold things out.\r\n\r\n## video demo\r\n\r\n[![https://i3.ytimg.com/vi/UCo7YeTy-aE/hqdefault.jpg](https://i3.ytimg.com/vi/UCo7YeTy-aE/hqdefault.jpg)](https://youtu.be/UCo7YeTy-aE)\r\n\r\n## arch diagram\r\n\r\nnaturally generated with gpt4, like [we did for babyagi](https://twitter.com/swyx/status/1648724820316786688)\r\n![image](https://github.com/smol-ai/developer/assets/6764957/f8fc68f4-77f6-43ee-852f-a35fb195430a)\r\n\r\n\r\n### innovations and insights\r\n\r\n> Please subscribe to https://latent.space/ for a fuller writeup and insights and reflections"", ""- **Markdown is all you need** - Markdown is the perfect way to prompt for whole program synthesis because it is easy to mix english and code (whether `variable_names` or entire \\`\\`\\` code fenced code samples)\r\n  - turns out you can specify prompts in code in prompts and gpt4 obeys that to the letter\r\n- **Copy and paste programming**\r\n  - teaching the program to understand how to code around a new API (Anthropic's API is after GPT3's knowledge cutoff) by just pasting in the `curl` input and output\r\n  - pasting error messages into the prompt and vaguely telling the program how you'd like it handled. it kind of feels like \""logbook driven programming\"".\r\n- **Debugging by `cat`ing** the whole codebase with your error message and getting specific fix suggestions - particularly delightful!\r\n- **Tricks for whole program coherence** - our chosen example usecase, Chrome extensions, have a lot of indirect dependencies across files. Any hallucination of cross dependencies causes the whole program to error. \r\n  - We solved this by adding an intermediate step asking GPT to think through `shared_dependencies.md`, and then insisting on using that in generating each file. This basically means GPT is able to talk to itself...\r\n  - ... but it's not perfect, yet. `shared_dependencies.md` is sometimes not comperehensive in understanding what are hard dependencies between files. So we just solved it by specifying a specific `name` in the prompt. felt dirty at first but it works, and really it's just clear unambiguous communication at the end of the day. \r\n  - see `prompt.md` for SOTA smol-dev prompting\r\n- **Low activation energy for unfamiliar APIs**"", ""modal-client\r\nopenai\r\ntiktoken"", ""OPENAI_API_KEY=sk-xxxxxx\r\nANTHROPIC_API_KEY=sk-ant-api03-xxxxxx"", ""- **ability to install its own dependencies**\r\n  - this leaks into depending on the execution environment, which we all know is the path to dependency madness. how to avoid? dockerize? nix? [web container](https://twitter.com/litbid/status/1658154530385670150)?\r\n  - Modal has an interesting possibility: generate functions that speak modal which also solves the dependency thing https://twitter.com/akshat_b/status/1658146096902811657\r\n- **self-heal** by running the code itself and use errors as information for reprompting \r\n  - however its a bit hard to get errors from the chrome extension environment so we did not try this\r\n- **using anthropic as the coding layer**\r\n  - you can run `modal run anthropic.py --prompt prompt.md --outputdir=anthropic` to try it\r\n  - but it doesnt work because anthropic doesnt follow instructions to generate file code very well.\r\n- **make agents that autonomously run this code in a loop/watch the prompt file** and regenerate code each time, on a new git branch\r\n  - the code could be generated on 5 simultaneous git branches and checking their output would just involve switching git branches""]}",50,0.5757613182067871,1,What does this do?
UPGRADE_QUERY,"{""query"": ""What does this do?"", ""repo"": ""https://github.com/smol-ai/developer""}","1. What is the purpose of the code in this repository?
2. Can you explain the functionality of the code in this repository?
3. How does the code in this repository work?
4. What problem does the code in this repository solve?
5. What are the key features of the code in this repository?",6.332667112350464,1,What does this do?
CONTEXT_VALIDATOR,"{""query"": ""What is the purpose of the code in this repository?"", ""repo"": ""https://github.com/smol-ai/developer"", ""similar_documents"": [""- simply add to the prompt as they discover underspecified parts of the prompt\r\n  - manually runs the code and identifies errors\r\n  - *paste the error into the prompt* just like they would file a github issue\r\n  - for extra help, they can use `debugger.py` which reads the whole codebase to make specific code change suggestions\r\n\r\nLoop until happiness is attained. Notice that AI is only used as long as it is adding value - once it gets in your way, just take over the codebase from your smol junior developer with no fuss and no hurt feelings. (*we could also have smol-dev take over an existing codebase and bootstrap its own prompt... but that's a Future Direction*)\r\n\r\n*Not no code, not low code, but some third thing.* \r\n\r\nPerhaps a higher order evolution of programming where you still need to be technical, but no longer have to implement every detail at least to scaffold things out.\r\n\r\n## video demo\r\n\r\n[![https://i3.ytimg.com/vi/UCo7YeTy-aE/hqdefault.jpg](https://i3.ytimg.com/vi/UCo7YeTy-aE/hqdefault.jpg)](https://youtu.be/UCo7YeTy-aE)\r\n\r\n## arch diagram\r\n\r\nnaturally generated with gpt4, like [we did for babyagi](https://twitter.com/swyx/status/1648724820316786688)\r\n![image](https://github.com/smol-ai/developer/assets/6764957/f8fc68f4-77f6-43ee-852f-a35fb195430a)\r\n\r\n\r\n### innovations and insights\r\n\r\n> Please subscribe to https://latent.space/ for a fuller writeup and insights and reflections"", ""MIT License Copyright (c) 2023 swyx\r\n\r\nPermission is hereby granted, free of\r\ncharge, to any person obtaining a copy of this software and associated\r\ndocumentation files (the \""Software\""), to deal in the Software without\r\nrestriction, including without limitation the rights to use, copy, modify, merge,\r\npublish, distribute, sublicense, and/or sell copies of the Software, and to\r\npermit persons to whom the Software is furnished to do so, subject to the\r\nfollowing conditions:\r\n\r\nThe above copyright notice and this permission notice\r\n(including the next paragraph) shall be included in all copies or substantial\r\nportions of the Software.\r\n\r\nTHE SOFTWARE IS PROVIDED \""AS IS\"", WITHOUT WARRANTY OF\r\nANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\r\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO\r\nEVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR\r\nOTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\r\nFROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\nTHE SOFTWARE."", ""- **ability to install its own dependencies**\r\n  - this leaks into depending on the execution environment, which we all know is the path to dependency madness. how to avoid? dockerize? nix? [web container](https://twitter.com/litbid/status/1658154530385670150)?\r\n  - Modal has an interesting possibility: generate functions that speak modal which also solves the dependency thing https://twitter.com/akshat_b/status/1658146096902811657\r\n- **self-heal** by running the code itself and use errors as information for reprompting \r\n  - however its a bit hard to get errors from the chrome extension environment so we did not try this\r\n- **using anthropic as the coding layer**\r\n  - you can run `modal run anthropic.py --prompt prompt.md --outputdir=anthropic` to try it\r\n  - but it doesnt work because anthropic doesnt follow instructions to generate file code very well.\r\n- **make agents that autonomously run this code in a loop/watch the prompt file** and regenerate code each time, on a new git branch\r\n  - the code could be generated on 5 simultaneous git branches and checking their output would just involve switching git branches"", ""# smol developer\r\n\r\n***Human-centric & Coherent Whole Program Synthesis*** aka your own personal junior developer\r\n\r\n> [Build the thing that builds the thing!](https://twitter.com/swyx/status/1657578738345979905) a `smol dev` for every dev in every situation\r\n\r\nthis is a prototype of a \""junior developer\"" agent (aka `smol dev`) that scaffolds an entire codebase out for you once you give it a product spec, but does not end the world or overpromise AGI. instead of making and maintaining specific, rigid, one-shot starters, like `create-react-app`, or `create-nextjs-app`, this is basically [`create-anything-app`](https://news.ycombinator.com/item?id=35942352) where you develop your scaffolding prompt in a tight loop with your smol dev.\r\n\r\nAI that is helpful, harmless, and honest is complemented by a codebase that is simple, safe, and smol - <200 lines of Python and Prompts, so this is easy to understand and customize.\r\n\r\n<p align=\""center\"">\r\n  <img height=200 src=\""https://pbs.twimg.com/media/FwEzVCcaMAE7t4h?format=jpg&name=large\"" />\r\n</p>\r\n\r\n\r\n*engineering with prompts, rather than prompt engineering* \r\n\r\nThe demo example in `prompt.md` shows the potential of AI-enabled, but still firmly human developer centric, workflow:\r\n\r\n- Human writes a basic prompt for the app they want to build\r\n- `main.py` generates code\r\n- Human runs/reads the code\r\n- Human can:\r\n  - simply add to the prompt as they discover underspecified parts of the prompt"", ""- **Markdown is all you need** - Markdown is the perfect way to prompt for whole program synthesis because it is easy to mix english and code (whether `variable_names` or entire \\`\\`\\` code fenced code samples)\r\n  - turns out you can specify prompts in code in prompts and gpt4 obeys that to the letter\r\n- **Copy and paste programming**\r\n  - teaching the program to understand how to code around a new API (Anthropic's API is after GPT3's knowledge cutoff) by just pasting in the `curl` input and output\r\n  - pasting error messages into the prompt and vaguely telling the program how you'd like it handled. it kind of feels like \""logbook driven programming\"".\r\n- **Debugging by `cat`ing** the whole codebase with your error message and getting specific fix suggestions - particularly delightful!\r\n- **Tricks for whole program coherence** - our chosen example usecase, Chrome extensions, have a lot of indirect dependencies across files. Any hallucination of cross dependencies causes the whole program to error. \r\n  - We solved this by adding an intermediate step asking GPT to think through `shared_dependencies.md`, and then insisting on using that in generating each file. This basically means GPT is able to talk to itself...\r\n  - ... but it's not perfect, yet. `shared_dependencies.md` is sometimes not comperehensive in understanding what are hard dependencies between files. So we just solved it by specifying a specific `name` in the prompt. felt dirty at first but it works, and really it's just clear unambiguous communication at the end of the day. \r\n  - see `prompt.md` for SOTA smol-dev prompting\r\n- **Low activation energy for unfamiliar APIs**""]}",50,0.6366558074951172,1,What does this do?
CONTEXT_VALIDATOR,"{""query"": ""Can you explain the functionality of the code in this repository?"", ""repo"": ""https://github.com/smol-ai/developer"", ""similar_documents"": [""- simply add to the prompt as they discover underspecified parts of the prompt\r\n  - manually runs the code and identifies errors\r\n  - *paste the error into the prompt* just like they would file a github issue\r\n  - for extra help, they can use `debugger.py` which reads the whole codebase to make specific code change suggestions\r\n\r\nLoop until happiness is attained. Notice that AI is only used as long as it is adding value - once it gets in your way, just take over the codebase from your smol junior developer with no fuss and no hurt feelings. (*we could also have smol-dev take over an existing codebase and bootstrap its own prompt... but that's a Future Direction*)\r\n\r\n*Not no code, not low code, but some third thing.* \r\n\r\nPerhaps a higher order evolution of programming where you still need to be technical, but no longer have to implement every detail at least to scaffold things out.\r\n\r\n## video demo\r\n\r\n[![https://i3.ytimg.com/vi/UCo7YeTy-aE/hqdefault.jpg](https://i3.ytimg.com/vi/UCo7YeTy-aE/hqdefault.jpg)](https://youtu.be/UCo7YeTy-aE)\r\n\r\n## arch diagram\r\n\r\nnaturally generated with gpt4, like [we did for babyagi](https://twitter.com/swyx/status/1648724820316786688)\r\n![image](https://github.com/smol-ai/developer/assets/6764957/f8fc68f4-77f6-43ee-852f-a35fb195430a)\r\n\r\n\r\n### innovations and insights\r\n\r\n> Please subscribe to https://latent.space/ for a fuller writeup and insights and reflections"", ""- **ability to install its own dependencies**\r\n  - this leaks into depending on the execution environment, which we all know is the path to dependency madness. how to avoid? dockerize? nix? [web container](https://twitter.com/litbid/status/1658154530385670150)?\r\n  - Modal has an interesting possibility: generate functions that speak modal which also solves the dependency thing https://twitter.com/akshat_b/status/1658146096902811657\r\n- **self-heal** by running the code itself and use errors as information for reprompting \r\n  - however its a bit hard to get errors from the chrome extension environment so we did not try this\r\n- **using anthropic as the coding layer**\r\n  - you can run `modal run anthropic.py --prompt prompt.md --outputdir=anthropic` to try it\r\n  - but it doesnt work because anthropic doesnt follow instructions to generate file code very well.\r\n- **make agents that autonomously run this code in a loop/watch the prompt file** and regenerate code each time, on a new git branch\r\n  - the code could be generated on 5 simultaneous git branches and checking their output would just involve switching git branches"", ""# smol developer\r\n\r\n***Human-centric & Coherent Whole Program Synthesis*** aka your own personal junior developer\r\n\r\n> [Build the thing that builds the thing!](https://twitter.com/swyx/status/1657578738345979905) a `smol dev` for every dev in every situation\r\n\r\nthis is a prototype of a \""junior developer\"" agent (aka `smol dev`) that scaffolds an entire codebase out for you once you give it a product spec, but does not end the world or overpromise AGI. instead of making and maintaining specific, rigid, one-shot starters, like `create-react-app`, or `create-nextjs-app`, this is basically [`create-anything-app`](https://news.ycombinator.com/item?id=35942352) where you develop your scaffolding prompt in a tight loop with your smol dev.\r\n\r\nAI that is helpful, harmless, and honest is complemented by a codebase that is simple, safe, and smol - <200 lines of Python and Prompts, so this is easy to understand and customize.\r\n\r\n<p align=\""center\"">\r\n  <img height=200 src=\""https://pbs.twimg.com/media/FwEzVCcaMAE7t4h?format=jpg&name=large\"" />\r\n</p>\r\n\r\n\r\n*engineering with prompts, rather than prompt engineering* \r\n\r\nThe demo example in `prompt.md` shows the potential of AI-enabled, but still firmly human developer centric, workflow:\r\n\r\n- Human writes a basic prompt for the app they want to build\r\n- `main.py` generates code\r\n- Human runs/reads the code\r\n- Human can:\r\n  - simply add to the prompt as they discover underspecified parts of the prompt"", ""The program is a Chrome extension that summarizes web pages using the Anthropic Claude API. It consists of several files: popup.js, styles.css, \r\nbackground.js, popup.html, shared_dependencies.md, and content_script.js. \r\n\r\npopup.html is the main user interface for the extension, containing a form with several input fields and a submit button. popup.js handles the logic\r\nfor the form, including retrieving the user's input, calling the Anthropic API, and rendering the summary in the content div. styles.css provides \r\nstyling for the UI elements.\r\n\r\nbackground.js is responsible for executing content_script.js, which retrieves the page content (title and body text) and sends it to popup.js for \r\nprocessing. It also handles storing and retrieving the page content data using Chrome's storage API.\r\n\r\nshared_dependencies.md lists the shared variables, data schemas, DOM element IDs, message names, and function names used across the various files.\r\n\r\nOverall, the program uses a combination of JavaScript, HTML, and CSS to provide a user-friendly interface for summarizing web pages using the \r\nAnthropic Claude API."", ""## install\r\n\r\nit's basically: \r\n\r\n- `git clone https://github.com/smol-ai/developer`.\r\n- copy over `.example.env` to `.env` filling in your API keys.\r\n\r\nThere are no python dependencies to wrangle thanks to using Modal as a [self-provisioning runtime](https://www.google.com/search?q=self+provisioning+runtime).\r\n\r\nUnfortunately this project also uses 3 waitlisted things:\r\n\r\n- Modal.com - `pip install modal-client` (private beta - hit up the modal team to get an invite, and login)\r\n  - You can run this project w/o Modal following these instructions:\r\n  - `pip install -r requirements.txt`\r\n  - `python main_no_modal.py YOUR_PROMPT_HERE`\r\n- GPT-4 api (private beta) - can use 3.5 but obviously wont be as good\r\n- (for the demo project) anthropic claude 100k context api (private beta)\r\n\r\n> yes, the most important skill in being an ai engineer is social engineering to get off waitlists. Modal will let you in if you say the keyword \""swyx\""\r\n\r\nyou'll have to adapt this code on a fork if you want to use it on other infra. please open issues/PRs and i'll happily highlight your fork here.\r\n\r\n### trying the example chrome extension""]}",30,0.6856489181518555,1,What does this do?
CONTEXT_VALIDATOR,"{""query"": ""How does the code in this repository work?"", ""repo"": ""https://github.com/smol-ai/developer"", ""similar_documents"": [""- simply add to the prompt as they discover underspecified parts of the prompt\r\n  - manually runs the code and identifies errors\r\n  - *paste the error into the prompt* just like they would file a github issue\r\n  - for extra help, they can use `debugger.py` which reads the whole codebase to make specific code change suggestions\r\n\r\nLoop until happiness is attained. Notice that AI is only used as long as it is adding value - once it gets in your way, just take over the codebase from your smol junior developer with no fuss and no hurt feelings. (*we could also have smol-dev take over an existing codebase and bootstrap its own prompt... but that's a Future Direction*)\r\n\r\n*Not no code, not low code, but some third thing.* \r\n\r\nPerhaps a higher order evolution of programming where you still need to be technical, but no longer have to implement every detail at least to scaffold things out.\r\n\r\n## video demo\r\n\r\n[![https://i3.ytimg.com/vi/UCo7YeTy-aE/hqdefault.jpg](https://i3.ytimg.com/vi/UCo7YeTy-aE/hqdefault.jpg)](https://youtu.be/UCo7YeTy-aE)\r\n\r\n## arch diagram\r\n\r\nnaturally generated with gpt4, like [we did for babyagi](https://twitter.com/swyx/status/1648724820316786688)\r\n![image](https://github.com/smol-ai/developer/assets/6764957/f8fc68f4-77f6-43ee-852f-a35fb195430a)\r\n\r\n\r\n### innovations and insights\r\n\r\n> Please subscribe to https://latent.space/ for a fuller writeup and insights and reflections"", ""- **ability to install its own dependencies**\r\n  - this leaks into depending on the execution environment, which we all know is the path to dependency madness. how to avoid? dockerize? nix? [web container](https://twitter.com/litbid/status/1658154530385670150)?\r\n  - Modal has an interesting possibility: generate functions that speak modal which also solves the dependency thing https://twitter.com/akshat_b/status/1658146096902811657\r\n- **self-heal** by running the code itself and use errors as information for reprompting \r\n  - however its a bit hard to get errors from the chrome extension environment so we did not try this\r\n- **using anthropic as the coding layer**\r\n  - you can run `modal run anthropic.py --prompt prompt.md --outputdir=anthropic` to try it\r\n  - but it doesnt work because anthropic doesnt follow instructions to generate file code very well.\r\n- **make agents that autonomously run this code in a loop/watch the prompt file** and regenerate code each time, on a new git branch\r\n  - the code could be generated on 5 simultaneous git branches and checking their output would just involve switching git branches"", ""# smol developer\r\n\r\n***Human-centric & Coherent Whole Program Synthesis*** aka your own personal junior developer\r\n\r\n> [Build the thing that builds the thing!](https://twitter.com/swyx/status/1657578738345979905) a `smol dev` for every dev in every situation\r\n\r\nthis is a prototype of a \""junior developer\"" agent (aka `smol dev`) that scaffolds an entire codebase out for you once you give it a product spec, but does not end the world or overpromise AGI. instead of making and maintaining specific, rigid, one-shot starters, like `create-react-app`, or `create-nextjs-app`, this is basically [`create-anything-app`](https://news.ycombinator.com/item?id=35942352) where you develop your scaffolding prompt in a tight loop with your smol dev.\r\n\r\nAI that is helpful, harmless, and honest is complemented by a codebase that is simple, safe, and smol - <200 lines of Python and Prompts, so this is easy to understand and customize.\r\n\r\n<p align=\""center\"">\r\n  <img height=200 src=\""https://pbs.twimg.com/media/FwEzVCcaMAE7t4h?format=jpg&name=large\"" />\r\n</p>\r\n\r\n\r\n*engineering with prompts, rather than prompt engineering* \r\n\r\nThe demo example in `prompt.md` shows the potential of AI-enabled, but still firmly human developer centric, workflow:\r\n\r\n- Human writes a basic prompt for the app they want to build\r\n- `main.py` generates code\r\n- Human runs/reads the code\r\n- Human can:\r\n  - simply add to the prompt as they discover underspecified parts of the prompt"", ""## install\r\n\r\nit's basically: \r\n\r\n- `git clone https://github.com/smol-ai/developer`.\r\n- copy over `.example.env` to `.env` filling in your API keys.\r\n\r\nThere are no python dependencies to wrangle thanks to using Modal as a [self-provisioning runtime](https://www.google.com/search?q=self+provisioning+runtime).\r\n\r\nUnfortunately this project also uses 3 waitlisted things:\r\n\r\n- Modal.com - `pip install modal-client` (private beta - hit up the modal team to get an invite, and login)\r\n  - You can run this project w/o Modal following these instructions:\r\n  - `pip install -r requirements.txt`\r\n  - `python main_no_modal.py YOUR_PROMPT_HERE`\r\n- GPT-4 api (private beta) - can use 3.5 but obviously wont be as good\r\n- (for the demo project) anthropic claude 100k context api (private beta)\r\n\r\n> yes, the most important skill in being an ai engineer is social engineering to get off waitlists. Modal will let you in if you say the keyword \""swyx\""\r\n\r\nyou'll have to adapt this code on a fork if you want to use it on other infra. please open issues/PRs and i'll happily highlight your fork here.\r\n\r\n### trying the example chrome extension"", ""- **Markdown is all you need** - Markdown is the perfect way to prompt for whole program synthesis because it is easy to mix english and code (whether `variable_names` or entire \\`\\`\\` code fenced code samples)\r\n  - turns out you can specify prompts in code in prompts and gpt4 obeys that to the letter\r\n- **Copy and paste programming**\r\n  - teaching the program to understand how to code around a new API (Anthropic's API is after GPT3's knowledge cutoff) by just pasting in the `curl` input and output\r\n  - pasting error messages into the prompt and vaguely telling the program how you'd like it handled. it kind of feels like \""logbook driven programming\"".\r\n- **Debugging by `cat`ing** the whole codebase with your error message and getting specific fix suggestions - particularly delightful!\r\n- **Tricks for whole program coherence** - our chosen example usecase, Chrome extensions, have a lot of indirect dependencies across files. Any hallucination of cross dependencies causes the whole program to error. \r\n  - We solved this by adding an intermediate step asking GPT to think through `shared_dependencies.md`, and then insisting on using that in generating each file. This basically means GPT is able to talk to itself...\r\n  - ... but it's not perfect, yet. `shared_dependencies.md` is sometimes not comperehensive in understanding what are hard dependencies between files. So we just solved it by specifying a specific `name` in the prompt. felt dirty at first but it works, and really it's just clear unambiguous communication at the end of the day. \r\n  - see `prompt.md` for SOTA smol-dev prompting\r\n- **Low activation energy for unfamiliar APIs**""]}",50,1.0265674591064453,1,What does this do?
CONTEXT_VALIDATOR,"{""query"": ""What problem does the code in this repository solve?"", ""repo"": ""https://github.com/smol-ai/developer"", ""similar_documents"": [""- simply add to the prompt as they discover underspecified parts of the prompt\r\n  - manually runs the code and identifies errors\r\n  - *paste the error into the prompt* just like they would file a github issue\r\n  - for extra help, they can use `debugger.py` which reads the whole codebase to make specific code change suggestions\r\n\r\nLoop until happiness is attained. Notice that AI is only used as long as it is adding value - once it gets in your way, just take over the codebase from your smol junior developer with no fuss and no hurt feelings. (*we could also have smol-dev take over an existing codebase and bootstrap its own prompt... but that's a Future Direction*)\r\n\r\n*Not no code, not low code, but some third thing.* \r\n\r\nPerhaps a higher order evolution of programming where you still need to be technical, but no longer have to implement every detail at least to scaffold things out.\r\n\r\n## video demo\r\n\r\n[![https://i3.ytimg.com/vi/UCo7YeTy-aE/hqdefault.jpg](https://i3.ytimg.com/vi/UCo7YeTy-aE/hqdefault.jpg)](https://youtu.be/UCo7YeTy-aE)\r\n\r\n## arch diagram\r\n\r\nnaturally generated with gpt4, like [we did for babyagi](https://twitter.com/swyx/status/1648724820316786688)\r\n![image](https://github.com/smol-ai/developer/assets/6764957/f8fc68f4-77f6-43ee-852f-a35fb195430a)\r\n\r\n\r\n### innovations and insights\r\n\r\n> Please subscribe to https://latent.space/ for a fuller writeup and insights and reflections"", ""- **ability to install its own dependencies**\r\n  - this leaks into depending on the execution environment, which we all know is the path to dependency madness. how to avoid? dockerize? nix? [web container](https://twitter.com/litbid/status/1658154530385670150)?\r\n  - Modal has an interesting possibility: generate functions that speak modal which also solves the dependency thing https://twitter.com/akshat_b/status/1658146096902811657\r\n- **self-heal** by running the code itself and use errors as information for reprompting \r\n  - however its a bit hard to get errors from the chrome extension environment so we did not try this\r\n- **using anthropic as the coding layer**\r\n  - you can run `modal run anthropic.py --prompt prompt.md --outputdir=anthropic` to try it\r\n  - but it doesnt work because anthropic doesnt follow instructions to generate file code very well.\r\n- **make agents that autonomously run this code in a loop/watch the prompt file** and regenerate code each time, on a new git branch\r\n  - the code could be generated on 5 simultaneous git branches and checking their output would just involve switching git branches"", ""- **Markdown is all you need** - Markdown is the perfect way to prompt for whole program synthesis because it is easy to mix english and code (whether `variable_names` or entire \\`\\`\\` code fenced code samples)\r\n  - turns out you can specify prompts in code in prompts and gpt4 obeys that to the letter\r\n- **Copy and paste programming**\r\n  - teaching the program to understand how to code around a new API (Anthropic's API is after GPT3's knowledge cutoff) by just pasting in the `curl` input and output\r\n  - pasting error messages into the prompt and vaguely telling the program how you'd like it handled. it kind of feels like \""logbook driven programming\"".\r\n- **Debugging by `cat`ing** the whole codebase with your error message and getting specific fix suggestions - particularly delightful!\r\n- **Tricks for whole program coherence** - our chosen example usecase, Chrome extensions, have a lot of indirect dependencies across files. Any hallucination of cross dependencies causes the whole program to error. \r\n  - We solved this by adding an intermediate step asking GPT to think through `shared_dependencies.md`, and then insisting on using that in generating each file. This basically means GPT is able to talk to itself...\r\n  - ... but it's not perfect, yet. `shared_dependencies.md` is sometimes not comperehensive in understanding what are hard dependencies between files. So we just solved it by specifying a specific `name` in the prompt. felt dirty at first but it works, and really it's just clear unambiguous communication at the end of the day. \r\n  - see `prompt.md` for SOTA smol-dev prompting\r\n- **Low activation energy for unfamiliar APIs**"", ""# todo\r\n# https://twitter.com/nathanwchan/status/1658153897154981888?s=20"", ""# smol developer\r\n\r\n***Human-centric & Coherent Whole Program Synthesis*** aka your own personal junior developer\r\n\r\n> [Build the thing that builds the thing!](https://twitter.com/swyx/status/1657578738345979905) a `smol dev` for every dev in every situation\r\n\r\nthis is a prototype of a \""junior developer\"" agent (aka `smol dev`) that scaffolds an entire codebase out for you once you give it a product spec, but does not end the world or overpromise AGI. instead of making and maintaining specific, rigid, one-shot starters, like `create-react-app`, or `create-nextjs-app`, this is basically [`create-anything-app`](https://news.ycombinator.com/item?id=35942352) where you develop your scaffolding prompt in a tight loop with your smol dev.\r\n\r\nAI that is helpful, harmless, and honest is complemented by a codebase that is simple, safe, and smol - <200 lines of Python and Prompts, so this is easy to understand and customize.\r\n\r\n<p align=\""center\"">\r\n  <img height=200 src=\""https://pbs.twimg.com/media/FwEzVCcaMAE7t4h?format=jpg&name=large\"" />\r\n</p>\r\n\r\n\r\n*engineering with prompts, rather than prompt engineering* \r\n\r\nThe demo example in `prompt.md` shows the potential of AI-enabled, but still firmly human developer centric, workflow:\r\n\r\n- Human writes a basic prompt for the app they want to build\r\n- `main.py` generates code\r\n- Human runs/reads the code\r\n- Human can:\r\n  - simply add to the prompt as they discover underspecified parts of the prompt""]}",50,0.781848669052124,1,What does this do?
CONTEXT_VALIDATOR,"{""query"": ""What are the key features of the code in this repository?"", ""repo"": ""https://github.com/smol-ai/developer"", ""similar_documents"": [""- simply add to the prompt as they discover underspecified parts of the prompt\r\n  - manually runs the code and identifies errors\r\n  - *paste the error into the prompt* just like they would file a github issue\r\n  - for extra help, they can use `debugger.py` which reads the whole codebase to make specific code change suggestions\r\n\r\nLoop until happiness is attained. Notice that AI is only used as long as it is adding value - once it gets in your way, just take over the codebase from your smol junior developer with no fuss and no hurt feelings. (*we could also have smol-dev take over an existing codebase and bootstrap its own prompt... but that's a Future Direction*)\r\n\r\n*Not no code, not low code, but some third thing.* \r\n\r\nPerhaps a higher order evolution of programming where you still need to be technical, but no longer have to implement every detail at least to scaffold things out.\r\n\r\n## video demo\r\n\r\n[![https://i3.ytimg.com/vi/UCo7YeTy-aE/hqdefault.jpg](https://i3.ytimg.com/vi/UCo7YeTy-aE/hqdefault.jpg)](https://youtu.be/UCo7YeTy-aE)\r\n\r\n## arch diagram\r\n\r\nnaturally generated with gpt4, like [we did for babyagi](https://twitter.com/swyx/status/1648724820316786688)\r\n![image](https://github.com/smol-ai/developer/assets/6764957/f8fc68f4-77f6-43ee-852f-a35fb195430a)\r\n\r\n\r\n### innovations and insights\r\n\r\n> Please subscribe to https://latent.space/ for a fuller writeup and insights and reflections"", ""- **Markdown is all you need** - Markdown is the perfect way to prompt for whole program synthesis because it is easy to mix english and code (whether `variable_names` or entire \\`\\`\\` code fenced code samples)\r\n  - turns out you can specify prompts in code in prompts and gpt4 obeys that to the letter\r\n- **Copy and paste programming**\r\n  - teaching the program to understand how to code around a new API (Anthropic's API is after GPT3's knowledge cutoff) by just pasting in the `curl` input and output\r\n  - pasting error messages into the prompt and vaguely telling the program how you'd like it handled. it kind of feels like \""logbook driven programming\"".\r\n- **Debugging by `cat`ing** the whole codebase with your error message and getting specific fix suggestions - particularly delightful!\r\n- **Tricks for whole program coherence** - our chosen example usecase, Chrome extensions, have a lot of indirect dependencies across files. Any hallucination of cross dependencies causes the whole program to error. \r\n  - We solved this by adding an intermediate step asking GPT to think through `shared_dependencies.md`, and then insisting on using that in generating each file. This basically means GPT is able to talk to itself...\r\n  - ... but it's not perfect, yet. `shared_dependencies.md` is sometimes not comperehensive in understanding what are hard dependencies between files. So we just solved it by specifying a specific `name` in the prompt. felt dirty at first but it works, and really it's just clear unambiguous communication at the end of the day. \r\n  - see `prompt.md` for SOTA smol-dev prompting\r\n- **Low activation energy for unfamiliar APIs**"", ""modal-client\r\nopenai\r\ntiktoken"", ""OPENAI_API_KEY=sk-xxxxxx\r\nANTHROPIC_API_KEY=sk-ant-api03-xxxxxx"", ""- **ability to install its own dependencies**\r\n  - this leaks into depending on the execution environment, which we all know is the path to dependency madness. how to avoid? dockerize? nix? [web container](https://twitter.com/litbid/status/1658154530385670150)?\r\n  - Modal has an interesting possibility: generate functions that speak modal which also solves the dependency thing https://twitter.com/akshat_b/status/1658146096902811657\r\n- **self-heal** by running the code itself and use errors as information for reprompting \r\n  - however its a bit hard to get errors from the chrome extension environment so we did not try this\r\n- **using anthropic as the coding layer**\r\n  - you can run `modal run anthropic.py --prompt prompt.md --outputdir=anthropic` to try it\r\n  - but it doesnt work because anthropic doesnt follow instructions to generate file code very well.\r\n- **make agents that autonomously run this code in a loop/watch the prompt file** and regenerate code each time, on a new git branch\r\n  - the code could be generated on 5 simultaneous git branches and checking their output would just involve switching git branches""]}",50,0.6493773460388184,1,What does this do?
UPGRADE_QUERY,"{""query"": ""What does this do?"", ""repo"": ""https://github.com/smol-ai/developer""}","1. What is the purpose of the code in this repository?
2. Can you explain the functionality of the code in this repository?
3. How does the code in this repository work?
4. What problem does the code in this repository solve?
5. What are the key features of the code in this repository?",7.5538952350616455,1,What does this do?
CONTEXT_VALIDATOR,"{""query"": ""What is the purpose of the code in this repository?"", ""repo"": ""https://github.com/smol-ai/developer"", ""similar_documents"": [""- simply add to the prompt as they discover underspecified parts of the prompt\r\n  - manually runs the code and identifies errors\r\n  - *paste the error into the prompt* just like they would file a github issue\r\n  - for extra help, they can use `debugger.py` which reads the whole codebase to make specific code change suggestions\r\n\r\nLoop until happiness is attained. Notice that AI is only used as long as it is adding value - once it gets in your way, just take over the codebase from your smol junior developer with no fuss and no hurt feelings. (*we could also have smol-dev take over an existing codebase and bootstrap its own prompt... but that's a Future Direction*)\r\n\r\n*Not no code, not low code, but some third thing.* \r\n\r\nPerhaps a higher order evolution of programming where you still need to be technical, but no longer have to implement every detail at least to scaffold things out.\r\n\r\n## video demo\r\n\r\n[![https://i3.ytimg.com/vi/UCo7YeTy-aE/hqdefault.jpg](https://i3.ytimg.com/vi/UCo7YeTy-aE/hqdefault.jpg)](https://youtu.be/UCo7YeTy-aE)\r\n\r\n## arch diagram\r\n\r\nnaturally generated with gpt4, like [we did for babyagi](https://twitter.com/swyx/status/1648724820316786688)\r\n![image](https://github.com/smol-ai/developer/assets/6764957/f8fc68f4-77f6-43ee-852f-a35fb195430a)\r\n\r\n\r\n### innovations and insights\r\n\r\n> Please subscribe to https://latent.space/ for a fuller writeup and insights and reflections"", ""MIT License Copyright (c) 2023 swyx\r\n\r\nPermission is hereby granted, free of\r\ncharge, to any person obtaining a copy of this software and associated\r\ndocumentation files (the \""Software\""), to deal in the Software without\r\nrestriction, including without limitation the rights to use, copy, modify, merge,\r\npublish, distribute, sublicense, and/or sell copies of the Software, and to\r\npermit persons to whom the Software is furnished to do so, subject to the\r\nfollowing conditions:\r\n\r\nThe above copyright notice and this permission notice\r\n(including the next paragraph) shall be included in all copies or substantial\r\nportions of the Software.\r\n\r\nTHE SOFTWARE IS PROVIDED \""AS IS\"", WITHOUT WARRANTY OF\r\nANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\r\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO\r\nEVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR\r\nOTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\r\nFROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\nTHE SOFTWARE."", ""- **ability to install its own dependencies**\r\n  - this leaks into depending on the execution environment, which we all know is the path to dependency madness. how to avoid? dockerize? nix? [web container](https://twitter.com/litbid/status/1658154530385670150)?\r\n  - Modal has an interesting possibility: generate functions that speak modal which also solves the dependency thing https://twitter.com/akshat_b/status/1658146096902811657\r\n- **self-heal** by running the code itself and use errors as information for reprompting \r\n  - however its a bit hard to get errors from the chrome extension environment so we did not try this\r\n- **using anthropic as the coding layer**\r\n  - you can run `modal run anthropic.py --prompt prompt.md --outputdir=anthropic` to try it\r\n  - but it doesnt work because anthropic doesnt follow instructions to generate file code very well.\r\n- **make agents that autonomously run this code in a loop/watch the prompt file** and regenerate code each time, on a new git branch\r\n  - the code could be generated on 5 simultaneous git branches and checking their output would just involve switching git branches"", ""# smol developer\r\n\r\n***Human-centric & Coherent Whole Program Synthesis*** aka your own personal junior developer\r\n\r\n> [Build the thing that builds the thing!](https://twitter.com/swyx/status/1657578738345979905) a `smol dev` for every dev in every situation\r\n\r\nthis is a prototype of a \""junior developer\"" agent (aka `smol dev`) that scaffolds an entire codebase out for you once you give it a product spec, but does not end the world or overpromise AGI. instead of making and maintaining specific, rigid, one-shot starters, like `create-react-app`, or `create-nextjs-app`, this is basically [`create-anything-app`](https://news.ycombinator.com/item?id=35942352) where you develop your scaffolding prompt in a tight loop with your smol dev.\r\n\r\nAI that is helpful, harmless, and honest is complemented by a codebase that is simple, safe, and smol - <200 lines of Python and Prompts, so this is easy to understand and customize.\r\n\r\n<p align=\""center\"">\r\n  <img height=200 src=\""https://pbs.twimg.com/media/FwEzVCcaMAE7t4h?format=jpg&name=large\"" />\r\n</p>\r\n\r\n\r\n*engineering with prompts, rather than prompt engineering* \r\n\r\nThe demo example in `prompt.md` shows the potential of AI-enabled, but still firmly human developer centric, workflow:\r\n\r\n- Human writes a basic prompt for the app they want to build\r\n- `main.py` generates code\r\n- Human runs/reads the code\r\n- Human can:\r\n  - simply add to the prompt as they discover underspecified parts of the prompt"", ""- **Markdown is all you need** - Markdown is the perfect way to prompt for whole program synthesis because it is easy to mix english and code (whether `variable_names` or entire \\`\\`\\` code fenced code samples)\r\n  - turns out you can specify prompts in code in prompts and gpt4 obeys that to the letter\r\n- **Copy and paste programming**\r\n  - teaching the program to understand how to code around a new API (Anthropic's API is after GPT3's knowledge cutoff) by just pasting in the `curl` input and output\r\n  - pasting error messages into the prompt and vaguely telling the program how you'd like it handled. it kind of feels like \""logbook driven programming\"".\r\n- **Debugging by `cat`ing** the whole codebase with your error message and getting specific fix suggestions - particularly delightful!\r\n- **Tricks for whole program coherence** - our chosen example usecase, Chrome extensions, have a lot of indirect dependencies across files. Any hallucination of cross dependencies causes the whole program to error. \r\n  - We solved this by adding an intermediate step asking GPT to think through `shared_dependencies.md`, and then insisting on using that in generating each file. This basically means GPT is able to talk to itself...\r\n  - ... but it's not perfect, yet. `shared_dependencies.md` is sometimes not comperehensive in understanding what are hard dependencies between files. So we just solved it by specifying a specific `name` in the prompt. felt dirty at first but it works, and really it's just clear unambiguous communication at the end of the day. \r\n  - see `prompt.md` for SOTA smol-dev prompting\r\n- **Low activation energy for unfamiliar APIs**""]}",50,0.6737911701202393,1,What does this do?
RUN_QUERY_RAG,"{""query"": ""What is the purpose of the code in this repository?"", ""repo"": ""https://github.com/smol-ai/developer"", ""similar_documents"": [""- simply add to the prompt as they discover underspecified parts of the prompt\r\n  - manually runs the code and identifies errors\r\n  - *paste the error into the prompt* just like they would file a github issue\r\n  - for extra help, they can use `debugger.py` which reads the whole codebase to make specific code change suggestions\r\n\r\nLoop until happiness is attained. Notice that AI is only used as long as it is adding value - once it gets in your way, just take over the codebase from your smol junior developer with no fuss and no hurt feelings. (*we could also have smol-dev take over an existing codebase and bootstrap its own prompt... but that's a Future Direction*)\r\n\r\n*Not no code, not low code, but some third thing.* \r\n\r\nPerhaps a higher order evolution of programming where you still need to be technical, but no longer have to implement every detail at least to scaffold things out.\r\n\r\n## video demo\r\n\r\n[![https://i3.ytimg.com/vi/UCo7YeTy-aE/hqdefault.jpg](https://i3.ytimg.com/vi/UCo7YeTy-aE/hqdefault.jpg)](https://youtu.be/UCo7YeTy-aE)\r\n\r\n## arch diagram\r\n\r\nnaturally generated with gpt4, like [we did for babyagi](https://twitter.com/swyx/status/1648724820316786688)\r\n![image](https://github.com/smol-ai/developer/assets/6764957/f8fc68f4-77f6-43ee-852f-a35fb195430a)\r\n\r\n\r\n### innovations and insights\r\n\r\n> Please subscribe to https://latent.space/ for a fuller writeup and insights and reflections"", ""MIT License Copyright (c) 2023 swyx\r\n\r\nPermission is hereby granted, free of\r\ncharge, to any person obtaining a copy of this software and associated\r\ndocumentation files (the \""Software\""), to deal in the Software without\r\nrestriction, including without limitation the rights to use, copy, modify, merge,\r\npublish, distribute, sublicense, and/or sell copies of the Software, and to\r\npermit persons to whom the Software is furnished to do so, subject to the\r\nfollowing conditions:\r\n\r\nThe above copyright notice and this permission notice\r\n(including the next paragraph) shall be included in all copies or substantial\r\nportions of the Software.\r\n\r\nTHE SOFTWARE IS PROVIDED \""AS IS\"", WITHOUT WARRANTY OF\r\nANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\r\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO\r\nEVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR\r\nOTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\r\nFROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\nTHE SOFTWARE."", ""- **ability to install its own dependencies**\r\n  - this leaks into depending on the execution environment, which we all know is the path to dependency madness. how to avoid? dockerize? nix? [web container](https://twitter.com/litbid/status/1658154530385670150)?\r\n  - Modal has an interesting possibility: generate functions that speak modal which also solves the dependency thing https://twitter.com/akshat_b/status/1658146096902811657\r\n- **self-heal** by running the code itself and use errors as information for reprompting \r\n  - however its a bit hard to get errors from the chrome extension environment so we did not try this\r\n- **using anthropic as the coding layer**\r\n  - you can run `modal run anthropic.py --prompt prompt.md --outputdir=anthropic` to try it\r\n  - but it doesnt work because anthropic doesnt follow instructions to generate file code very well.\r\n- **make agents that autonomously run this code in a loop/watch the prompt file** and regenerate code each time, on a new git branch\r\n  - the code could be generated on 5 simultaneous git branches and checking their output would just involve switching git branches"", ""# smol developer\r\n\r\n***Human-centric & Coherent Whole Program Synthesis*** aka your own personal junior developer\r\n\r\n> [Build the thing that builds the thing!](https://twitter.com/swyx/status/1657578738345979905) a `smol dev` for every dev in every situation\r\n\r\nthis is a prototype of a \""junior developer\"" agent (aka `smol dev`) that scaffolds an entire codebase out for you once you give it a product spec, but does not end the world or overpromise AGI. instead of making and maintaining specific, rigid, one-shot starters, like `create-react-app`, or `create-nextjs-app`, this is basically [`create-anything-app`](https://news.ycombinator.com/item?id=35942352) where you develop your scaffolding prompt in a tight loop with your smol dev.\r\n\r\nAI that is helpful, harmless, and honest is complemented by a codebase that is simple, safe, and smol - <200 lines of Python and Prompts, so this is easy to understand and customize.\r\n\r\n<p align=\""center\"">\r\n  <img height=200 src=\""https://pbs.twimg.com/media/FwEzVCcaMAE7t4h?format=jpg&name=large\"" />\r\n</p>\r\n\r\n\r\n*engineering with prompts, rather than prompt engineering* \r\n\r\nThe demo example in `prompt.md` shows the potential of AI-enabled, but still firmly human developer centric, workflow:\r\n\r\n- Human writes a basic prompt for the app they want to build\r\n- `main.py` generates code\r\n- Human runs/reads the code\r\n- Human can:\r\n  - simply add to the prompt as they discover underspecified parts of the prompt"", ""- **Markdown is all you need** - Markdown is the perfect way to prompt for whole program synthesis because it is easy to mix english and code (whether `variable_names` or entire \\`\\`\\` code fenced code samples)\r\n  - turns out you can specify prompts in code in prompts and gpt4 obeys that to the letter\r\n- **Copy and paste programming**\r\n  - teaching the program to understand how to code around a new API (Anthropic's API is after GPT3's knowledge cutoff) by just pasting in the `curl` input and output\r\n  - pasting error messages into the prompt and vaguely telling the program how you'd like it handled. it kind of feels like \""logbook driven programming\"".\r\n- **Debugging by `cat`ing** the whole codebase with your error message and getting specific fix suggestions - particularly delightful!\r\n- **Tricks for whole program coherence** - our chosen example usecase, Chrome extensions, have a lot of indirect dependencies across files. Any hallucination of cross dependencies causes the whole program to error. \r\n  - We solved this by adding an intermediate step asking GPT to think through `shared_dependencies.md`, and then insisting on using that in generating each file. This basically means GPT is able to talk to itself...\r\n  - ... but it's not perfect, yet. `shared_dependencies.md` is sometimes not comperehensive in understanding what are hard dependencies between files. So we just solved it by specifying a specific `name` in the prompt. felt dirty at first but it works, and really it's just clear unambiguous communication at the end of the day. \r\n  - see `prompt.md` for SOTA smol-dev prompting\r\n- **Low activation energy for unfamiliar APIs**""]}","The purpose of the code in this repository is to create a ""junior developer"" agent that can scaffold an entire codebase based on a product spec provided by the user. The agent uses prompts written in Markdown to generate code, which the user can then run and modify as needed. The codebase is designed to be simple, safe, and under 200 lines of Python and Prompts. The agent can also use AI to suggest specific code changes and can self-heal by using errors as information for reprompting. The codebase is licensed under the MIT License.",10.71152663230896,1,What does this do?
CONTEXT_VALIDATOR,"{""query"": ""What does this do?"", ""repo"": ""https://github.com/smol-ai/developer"", ""similar_documents"": [""# todo\r\n# https://twitter.com/nathanwchan/status/1658153897154981888?s=20"", ""# smol developer\r\n\r\n***Human-centric & Coherent Whole Program Synthesis*** aka your own personal junior developer\r\n\r\n> [Build the thing that builds the thing!](https://twitter.com/swyx/status/1657578738345979905) a `smol dev` for every dev in every situation\r\n\r\nthis is a prototype of a \""junior developer\"" agent (aka `smol dev`) that scaffolds an entire codebase out for you once you give it a product spec, but does not end the world or overpromise AGI. instead of making and maintaining specific, rigid, one-shot starters, like `create-react-app`, or `create-nextjs-app`, this is basically [`create-anything-app`](https://news.ycombinator.com/item?id=35942352) where you develop your scaffolding prompt in a tight loop with your smol dev.\r\n\r\nAI that is helpful, harmless, and honest is complemented by a codebase that is simple, safe, and smol - <200 lines of Python and Prompts, so this is easy to understand and customize.\r\n\r\n<p align=\""center\"">\r\n  <img height=200 src=\""https://pbs.twimg.com/media/FwEzVCcaMAE7t4h?format=jpg&name=large\"" />\r\n</p>\r\n\r\n\r\n*engineering with prompts, rather than prompt engineering* \r\n\r\nThe demo example in `prompt.md` shows the potential of AI-enabled, but still firmly human developer centric, workflow:\r\n\r\n- Human writes a basic prompt for the app they want to build\r\n- `main.py` generates code\r\n- Human runs/reads the code\r\n- Human can:\r\n  - simply add to the prompt as they discover underspecified parts of the prompt"", ""modal-client\r\nopenai\r\ntiktoken"", ""body {\r\n  font-family: Arial, sans-serif;\r\n  margin: 0;\r\n  padding: 15px;\r\n}\r\n\r\ntextarea, input {\r\n  display: block;\r\n  width: 100%;\r\n  margin-bottom: 10px;\r\n  padding: 5px;\r\n  font-size: 14px;\r\n}\r\n\r\nbutton {\r\n  background-color: #4CAF50;\r\n  border: none;\r\n  color: white;\r\n  padding: 10px 20px;\r\n  text-align: center;\r\n  text-decoration: none;\r\n  display: inline-block;\r\n  font-size: 14px;\r\n  margin: 10px 0;\r\n  cursor: pointer;\r\n}\r\n\r\nbutton:hover {\r\n  background-color: #45a049;\r\n}\r\n\r\n#content {\r\n  margin-top: 20px;\r\n  font-size: 14px;\r\n  line-height: 1.5;\r\n}\r\n\r\n#loadingIndicator {\r\n  display: none;\r\n  font-size: 14px;\r\n  color: #999;\r\n}"", ""The program is a Chrome extension that summarizes web pages using the Anthropic Claude API. It consists of several files: popup.js, styles.css, \r\nbackground.js, popup.html, shared_dependencies.md, and content_script.js. \r\n\r\npopup.html is the main user interface for the extension, containing a form with several input fields and a submit button. popup.js handles the logic\r\nfor the form, including retrieving the user's input, calling the Anthropic API, and rendering the summary in the content div. styles.css provides \r\nstyling for the UI elements.\r\n\r\nbackground.js is responsible for executing content_script.js, which retrieves the page content (title and body text) and sends it to popup.js for \r\nprocessing. It also handles storing and retrieving the page content data using Chrome's storage API.\r\n\r\nshared_dependencies.md lists the shared variables, data schemas, DOM element IDs, message names, and function names used across the various files.\r\n\r\nOverall, the program uses a combination of JavaScript, HTML, and CSS to provide a user-friendly interface for summarizing web pages using the \r\nAnthropic Claude API.""]}",50,1.6649482250213623,2,What does this do?
UPGRADE_QUERY,"{""query"": ""What does this do?"", ""repo"": ""https://github.com/smol-ai/developer""}","1. What is the purpose of this code repository and how can it be used?
2. Can you provide a brief overview of the functionality of this code repository?
3. How does this code repository differ from similar repositories and what advantages does it offer?
4. What are some practical applications of the code in this repository and how can it be integrated into existing projects?
5. Can you provide examples of how this code repository has been used in real-world scenarios?",8.297023296356201,2,What does this do?
CONTEXT_VALIDATOR,"{""query"": ""What is the purpose of this code repository and how can it be used?"", ""repo"": ""https://github.com/smol-ai/developer"", ""similar_documents"": [""- simply add to the prompt as they discover underspecified parts of the prompt\r\n  - manually runs the code and identifies errors\r\n  - *paste the error into the prompt* just like they would file a github issue\r\n  - for extra help, they can use `debugger.py` which reads the whole codebase to make specific code change suggestions\r\n\r\nLoop until happiness is attained. Notice that AI is only used as long as it is adding value - once it gets in your way, just take over the codebase from your smol junior developer with no fuss and no hurt feelings. (*we could also have smol-dev take over an existing codebase and bootstrap its own prompt... but that's a Future Direction*)\r\n\r\n*Not no code, not low code, but some third thing.* \r\n\r\nPerhaps a higher order evolution of programming where you still need to be technical, but no longer have to implement every detail at least to scaffold things out.\r\n\r\n## video demo\r\n\r\n[![https://i3.ytimg.com/vi/UCo7YeTy-aE/hqdefault.jpg](https://i3.ytimg.com/vi/UCo7YeTy-aE/hqdefault.jpg)](https://youtu.be/UCo7YeTy-aE)\r\n\r\n## arch diagram\r\n\r\nnaturally generated with gpt4, like [we did for babyagi](https://twitter.com/swyx/status/1648724820316786688)\r\n![image](https://github.com/smol-ai/developer/assets/6764957/f8fc68f4-77f6-43ee-852f-a35fb195430a)\r\n\r\n\r\n### innovations and insights\r\n\r\n> Please subscribe to https://latent.space/ for a fuller writeup and insights and reflections"", ""- **ability to install its own dependencies**\r\n  - this leaks into depending on the execution environment, which we all know is the path to dependency madness. how to avoid? dockerize? nix? [web container](https://twitter.com/litbid/status/1658154530385670150)?\r\n  - Modal has an interesting possibility: generate functions that speak modal which also solves the dependency thing https://twitter.com/akshat_b/status/1658146096902811657\r\n- **self-heal** by running the code itself and use errors as information for reprompting \r\n  - however its a bit hard to get errors from the chrome extension environment so we did not try this\r\n- **using anthropic as the coding layer**\r\n  - you can run `modal run anthropic.py --prompt prompt.md --outputdir=anthropic` to try it\r\n  - but it doesnt work because anthropic doesnt follow instructions to generate file code very well.\r\n- **make agents that autonomously run this code in a loop/watch the prompt file** and regenerate code each time, on a new git branch\r\n  - the code could be generated on 5 simultaneous git branches and checking their output would just involve switching git branches"", ""- **Markdown is all you need** - Markdown is the perfect way to prompt for whole program synthesis because it is easy to mix english and code (whether `variable_names` or entire \\`\\`\\` code fenced code samples)\r\n  - turns out you can specify prompts in code in prompts and gpt4 obeys that to the letter\r\n- **Copy and paste programming**\r\n  - teaching the program to understand how to code around a new API (Anthropic's API is after GPT3's knowledge cutoff) by just pasting in the `curl` input and output\r\n  - pasting error messages into the prompt and vaguely telling the program how you'd like it handled. it kind of feels like \""logbook driven programming\"".\r\n- **Debugging by `cat`ing** the whole codebase with your error message and getting specific fix suggestions - particularly delightful!\r\n- **Tricks for whole program coherence** - our chosen example usecase, Chrome extensions, have a lot of indirect dependencies across files. Any hallucination of cross dependencies causes the whole program to error. \r\n  - We solved this by adding an intermediate step asking GPT to think through `shared_dependencies.md`, and then insisting on using that in generating each file. This basically means GPT is able to talk to itself...\r\n  - ... but it's not perfect, yet. `shared_dependencies.md` is sometimes not comperehensive in understanding what are hard dependencies between files. So we just solved it by specifying a specific `name` in the prompt. felt dirty at first but it works, and really it's just clear unambiguous communication at the end of the day. \r\n  - see `prompt.md` for SOTA smol-dev prompting\r\n- **Low activation energy for unfamiliar APIs**"", ""MIT License Copyright (c) 2023 swyx\r\n\r\nPermission is hereby granted, free of\r\ncharge, to any person obtaining a copy of this software and associated\r\ndocumentation files (the \""Software\""), to deal in the Software without\r\nrestriction, including without limitation the rights to use, copy, modify, merge,\r\npublish, distribute, sublicense, and/or sell copies of the Software, and to\r\npermit persons to whom the Software is furnished to do so, subject to the\r\nfollowing conditions:\r\n\r\nThe above copyright notice and this permission notice\r\n(including the next paragraph) shall be included in all copies or substantial\r\nportions of the Software.\r\n\r\nTHE SOFTWARE IS PROVIDED \""AS IS\"", WITHOUT WARRANTY OF\r\nANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\r\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO\r\nEVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR\r\nOTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\r\nFROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\nTHE SOFTWARE."", ""# smol developer\r\n\r\n***Human-centric & Coherent Whole Program Synthesis*** aka your own personal junior developer\r\n\r\n> [Build the thing that builds the thing!](https://twitter.com/swyx/status/1657578738345979905) a `smol dev` for every dev in every situation\r\n\r\nthis is a prototype of a \""junior developer\"" agent (aka `smol dev`) that scaffolds an entire codebase out for you once you give it a product spec, but does not end the world or overpromise AGI. instead of making and maintaining specific, rigid, one-shot starters, like `create-react-app`, or `create-nextjs-app`, this is basically [`create-anything-app`](https://news.ycombinator.com/item?id=35942352) where you develop your scaffolding prompt in a tight loop with your smol dev.\r\n\r\nAI that is helpful, harmless, and honest is complemented by a codebase that is simple, safe, and smol - <200 lines of Python and Prompts, so this is easy to understand and customize.\r\n\r\n<p align=\""center\"">\r\n  <img height=200 src=\""https://pbs.twimg.com/media/FwEzVCcaMAE7t4h?format=jpg&name=large\"" />\r\n</p>\r\n\r\n\r\n*engineering with prompts, rather than prompt engineering* \r\n\r\nThe demo example in `prompt.md` shows the potential of AI-enabled, but still firmly human developer centric, workflow:\r\n\r\n- Human writes a basic prompt for the app they want to build\r\n- `main.py` generates code\r\n- Human runs/reads the code\r\n- Human can:\r\n  - simply add to the prompt as they discover underspecified parts of the prompt""]}",50,0.675389289855957,2,What does this do?
CONTEXT_VALIDATOR,"{""query"": ""Can you provide a brief overview of the functionality of this code repository?"", ""repo"": ""https://github.com/smol-ai/developer"", ""similar_documents"": [""- simply add to the prompt as they discover underspecified parts of the prompt\r\n  - manually runs the code and identifies errors\r\n  - *paste the error into the prompt* just like they would file a github issue\r\n  - for extra help, they can use `debugger.py` which reads the whole codebase to make specific code change suggestions\r\n\r\nLoop until happiness is attained. Notice that AI is only used as long as it is adding value - once it gets in your way, just take over the codebase from your smol junior developer with no fuss and no hurt feelings. (*we could also have smol-dev take over an existing codebase and bootstrap its own prompt... but that's a Future Direction*)\r\n\r\n*Not no code, not low code, but some third thing.* \r\n\r\nPerhaps a higher order evolution of programming where you still need to be technical, but no longer have to implement every detail at least to scaffold things out.\r\n\r\n## video demo\r\n\r\n[![https://i3.ytimg.com/vi/UCo7YeTy-aE/hqdefault.jpg](https://i3.ytimg.com/vi/UCo7YeTy-aE/hqdefault.jpg)](https://youtu.be/UCo7YeTy-aE)\r\n\r\n## arch diagram\r\n\r\nnaturally generated with gpt4, like [we did for babyagi](https://twitter.com/swyx/status/1648724820316786688)\r\n![image](https://github.com/smol-ai/developer/assets/6764957/f8fc68f4-77f6-43ee-852f-a35fb195430a)\r\n\r\n\r\n### innovations and insights\r\n\r\n> Please subscribe to https://latent.space/ for a fuller writeup and insights and reflections"", ""The program is a Chrome extension that summarizes web pages using the Anthropic Claude API. It consists of several files: popup.js, styles.css, \r\nbackground.js, popup.html, shared_dependencies.md, and content_script.js. \r\n\r\npopup.html is the main user interface for the extension, containing a form with several input fields and a submit button. popup.js handles the logic\r\nfor the form, including retrieving the user's input, calling the Anthropic API, and rendering the summary in the content div. styles.css provides \r\nstyling for the UI elements.\r\n\r\nbackground.js is responsible for executing content_script.js, which retrieves the page content (title and body text) and sends it to popup.js for \r\nprocessing. It also handles storing and retrieving the page content data using Chrome's storage API.\r\n\r\nshared_dependencies.md lists the shared variables, data schemas, DOM element IDs, message names, and function names used across the various files.\r\n\r\nOverall, the program uses a combination of JavaScript, HTML, and CSS to provide a user-friendly interface for summarizing web pages using the \r\nAnthropic Claude API."", ""# smol developer\r\n\r\n***Human-centric & Coherent Whole Program Synthesis*** aka your own personal junior developer\r\n\r\n> [Build the thing that builds the thing!](https://twitter.com/swyx/status/1657578738345979905) a `smol dev` for every dev in every situation\r\n\r\nthis is a prototype of a \""junior developer\"" agent (aka `smol dev`) that scaffolds an entire codebase out for you once you give it a product spec, but does not end the world or overpromise AGI. instead of making and maintaining specific, rigid, one-shot starters, like `create-react-app`, or `create-nextjs-app`, this is basically [`create-anything-app`](https://news.ycombinator.com/item?id=35942352) where you develop your scaffolding prompt in a tight loop with your smol dev.\r\n\r\nAI that is helpful, harmless, and honest is complemented by a codebase that is simple, safe, and smol - <200 lines of Python and Prompts, so this is easy to understand and customize.\r\n\r\n<p align=\""center\"">\r\n  <img height=200 src=\""https://pbs.twimg.com/media/FwEzVCcaMAE7t4h?format=jpg&name=large\"" />\r\n</p>\r\n\r\n\r\n*engineering with prompts, rather than prompt engineering* \r\n\r\nThe demo example in `prompt.md` shows the potential of AI-enabled, but still firmly human developer centric, workflow:\r\n\r\n- Human writes a basic prompt for the app they want to build\r\n- `main.py` generates code\r\n- Human runs/reads the code\r\n- Human can:\r\n  - simply add to the prompt as they discover underspecified parts of the prompt"", ""- **ability to install its own dependencies**\r\n  - this leaks into depending on the execution environment, which we all know is the path to dependency madness. how to avoid? dockerize? nix? [web container](https://twitter.com/litbid/status/1658154530385670150)?\r\n  - Modal has an interesting possibility: generate functions that speak modal which also solves the dependency thing https://twitter.com/akshat_b/status/1658146096902811657\r\n- **self-heal** by running the code itself and use errors as information for reprompting \r\n  - however its a bit hard to get errors from the chrome extension environment so we did not try this\r\n- **using anthropic as the coding layer**\r\n  - you can run `modal run anthropic.py --prompt prompt.md --outputdir=anthropic` to try it\r\n  - but it doesnt work because anthropic doesnt follow instructions to generate file code very well.\r\n- **make agents that autonomously run this code in a loop/watch the prompt file** and regenerate code each time, on a new git branch\r\n  - the code could be generated on 5 simultaneous git branches and checking their output would just involve switching git branches"", ""- **Markdown is all you need** - Markdown is the perfect way to prompt for whole program synthesis because it is easy to mix english and code (whether `variable_names` or entire \\`\\`\\` code fenced code samples)\r\n  - turns out you can specify prompts in code in prompts and gpt4 obeys that to the letter\r\n- **Copy and paste programming**\r\n  - teaching the program to understand how to code around a new API (Anthropic's API is after GPT3's knowledge cutoff) by just pasting in the `curl` input and output\r\n  - pasting error messages into the prompt and vaguely telling the program how you'd like it handled. it kind of feels like \""logbook driven programming\"".\r\n- **Debugging by `cat`ing** the whole codebase with your error message and getting specific fix suggestions - particularly delightful!\r\n- **Tricks for whole program coherence** - our chosen example usecase, Chrome extensions, have a lot of indirect dependencies across files. Any hallucination of cross dependencies causes the whole program to error. \r\n  - We solved this by adding an intermediate step asking GPT to think through `shared_dependencies.md`, and then insisting on using that in generating each file. This basically means GPT is able to talk to itself...\r\n  - ... but it's not perfect, yet. `shared_dependencies.md` is sometimes not comperehensive in understanding what are hard dependencies between files. So we just solved it by specifying a specific `name` in the prompt. felt dirty at first but it works, and really it's just clear unambiguous communication at the end of the day. \r\n  - see `prompt.md` for SOTA smol-dev prompting\r\n- **Low activation energy for unfamiliar APIs**""]}",50,0.68747878074646,2,What does this do?
CONTEXT_VALIDATOR,"{""query"": ""How does this code repository differ from similar repositories and what advantages does it offer?"", ""repo"": ""https://github.com/smol-ai/developer"", ""similar_documents"": [""- simply add to the prompt as they discover underspecified parts of the prompt\r\n  - manually runs the code and identifies errors\r\n  - *paste the error into the prompt* just like they would file a github issue\r\n  - for extra help, they can use `debugger.py` which reads the whole codebase to make specific code change suggestions\r\n\r\nLoop until happiness is attained. Notice that AI is only used as long as it is adding value - once it gets in your way, just take over the codebase from your smol junior developer with no fuss and no hurt feelings. (*we could also have smol-dev take over an existing codebase and bootstrap its own prompt... but that's a Future Direction*)\r\n\r\n*Not no code, not low code, but some third thing.* \r\n\r\nPerhaps a higher order evolution of programming where you still need to be technical, but no longer have to implement every detail at least to scaffold things out.\r\n\r\n## video demo\r\n\r\n[![https://i3.ytimg.com/vi/UCo7YeTy-aE/hqdefault.jpg](https://i3.ytimg.com/vi/UCo7YeTy-aE/hqdefault.jpg)](https://youtu.be/UCo7YeTy-aE)\r\n\r\n## arch diagram\r\n\r\nnaturally generated with gpt4, like [we did for babyagi](https://twitter.com/swyx/status/1648724820316786688)\r\n![image](https://github.com/smol-ai/developer/assets/6764957/f8fc68f4-77f6-43ee-852f-a35fb195430a)\r\n\r\n\r\n### innovations and insights\r\n\r\n> Please subscribe to https://latent.space/ for a fuller writeup and insights and reflections"", ""- **Markdown is all you need** - Markdown is the perfect way to prompt for whole program synthesis because it is easy to mix english and code (whether `variable_names` or entire \\`\\`\\` code fenced code samples)\r\n  - turns out you can specify prompts in code in prompts and gpt4 obeys that to the letter\r\n- **Copy and paste programming**\r\n  - teaching the program to understand how to code around a new API (Anthropic's API is after GPT3's knowledge cutoff) by just pasting in the `curl` input and output\r\n  - pasting error messages into the prompt and vaguely telling the program how you'd like it handled. it kind of feels like \""logbook driven programming\"".\r\n- **Debugging by `cat`ing** the whole codebase with your error message and getting specific fix suggestions - particularly delightful!\r\n- **Tricks for whole program coherence** - our chosen example usecase, Chrome extensions, have a lot of indirect dependencies across files. Any hallucination of cross dependencies causes the whole program to error. \r\n  - We solved this by adding an intermediate step asking GPT to think through `shared_dependencies.md`, and then insisting on using that in generating each file. This basically means GPT is able to talk to itself...\r\n  - ... but it's not perfect, yet. `shared_dependencies.md` is sometimes not comperehensive in understanding what are hard dependencies between files. So we just solved it by specifying a specific `name` in the prompt. felt dirty at first but it works, and really it's just clear unambiguous communication at the end of the day. \r\n  - see `prompt.md` for SOTA smol-dev prompting\r\n- **Low activation energy for unfamiliar APIs**"", ""- **ability to install its own dependencies**\r\n  - this leaks into depending on the execution environment, which we all know is the path to dependency madness. how to avoid? dockerize? nix? [web container](https://twitter.com/litbid/status/1658154530385670150)?\r\n  - Modal has an interesting possibility: generate functions that speak modal which also solves the dependency thing https://twitter.com/akshat_b/status/1658146096902811657\r\n- **self-heal** by running the code itself and use errors as information for reprompting \r\n  - however its a bit hard to get errors from the chrome extension environment so we did not try this\r\n- **using anthropic as the coding layer**\r\n  - you can run `modal run anthropic.py --prompt prompt.md --outputdir=anthropic` to try it\r\n  - but it doesnt work because anthropic doesnt follow instructions to generate file code very well.\r\n- **make agents that autonomously run this code in a loop/watch the prompt file** and regenerate code each time, on a new git branch\r\n  - the code could be generated on 5 simultaneous git branches and checking their output would just involve switching git branches"", ""# smol developer\r\n\r\n***Human-centric & Coherent Whole Program Synthesis*** aka your own personal junior developer\r\n\r\n> [Build the thing that builds the thing!](https://twitter.com/swyx/status/1657578738345979905) a `smol dev` for every dev in every situation\r\n\r\nthis is a prototype of a \""junior developer\"" agent (aka `smol dev`) that scaffolds an entire codebase out for you once you give it a product spec, but does not end the world or overpromise AGI. instead of making and maintaining specific, rigid, one-shot starters, like `create-react-app`, or `create-nextjs-app`, this is basically [`create-anything-app`](https://news.ycombinator.com/item?id=35942352) where you develop your scaffolding prompt in a tight loop with your smol dev.\r\n\r\nAI that is helpful, harmless, and honest is complemented by a codebase that is simple, safe, and smol - <200 lines of Python and Prompts, so this is easy to understand and customize.\r\n\r\n<p align=\""center\"">\r\n  <img height=200 src=\""https://pbs.twimg.com/media/FwEzVCcaMAE7t4h?format=jpg&name=large\"" />\r\n</p>\r\n\r\n\r\n*engineering with prompts, rather than prompt engineering* \r\n\r\nThe demo example in `prompt.md` shows the potential of AI-enabled, but still firmly human developer centric, workflow:\r\n\r\n- Human writes a basic prompt for the app they want to build\r\n- `main.py` generates code\r\n- Human runs/reads the code\r\n- Human can:\r\n  - simply add to the prompt as they discover underspecified parts of the prompt"", ""modal-client\r\nopenai\r\ntiktoken""]}",50,0.580169677734375,2,What does this do?
CONTEXT_VALIDATOR,"{""query"": ""What are some practical applications of the code in this repository and how can it be integrated into existing projects?"", ""repo"": ""https://github.com/smol-ai/developer"", ""similar_documents"": [""- **ability to install its own dependencies**\r\n  - this leaks into depending on the execution environment, which we all know is the path to dependency madness. how to avoid? dockerize? nix? [web container](https://twitter.com/litbid/status/1658154530385670150)?\r\n  - Modal has an interesting possibility: generate functions that speak modal which also solves the dependency thing https://twitter.com/akshat_b/status/1658146096902811657\r\n- **self-heal** by running the code itself and use errors as information for reprompting \r\n  - however its a bit hard to get errors from the chrome extension environment so we did not try this\r\n- **using anthropic as the coding layer**\r\n  - you can run `modal run anthropic.py --prompt prompt.md --outputdir=anthropic` to try it\r\n  - but it doesnt work because anthropic doesnt follow instructions to generate file code very well.\r\n- **make agents that autonomously run this code in a loop/watch the prompt file** and regenerate code each time, on a new git branch\r\n  - the code could be generated on 5 simultaneous git branches and checking their output would just involve switching git branches"", ""- simply add to the prompt as they discover underspecified parts of the prompt\r\n  - manually runs the code and identifies errors\r\n  - *paste the error into the prompt* just like they would file a github issue\r\n  - for extra help, they can use `debugger.py` which reads the whole codebase to make specific code change suggestions\r\n\r\nLoop until happiness is attained. Notice that AI is only used as long as it is adding value - once it gets in your way, just take over the codebase from your smol junior developer with no fuss and no hurt feelings. (*we could also have smol-dev take over an existing codebase and bootstrap its own prompt... but that's a Future Direction*)\r\n\r\n*Not no code, not low code, but some third thing.* \r\n\r\nPerhaps a higher order evolution of programming where you still need to be technical, but no longer have to implement every detail at least to scaffold things out.\r\n\r\n## video demo\r\n\r\n[![https://i3.ytimg.com/vi/UCo7YeTy-aE/hqdefault.jpg](https://i3.ytimg.com/vi/UCo7YeTy-aE/hqdefault.jpg)](https://youtu.be/UCo7YeTy-aE)\r\n\r\n## arch diagram\r\n\r\nnaturally generated with gpt4, like [we did for babyagi](https://twitter.com/swyx/status/1648724820316786688)\r\n![image](https://github.com/smol-ai/developer/assets/6764957/f8fc68f4-77f6-43ee-852f-a35fb195430a)\r\n\r\n\r\n### innovations and insights\r\n\r\n> Please subscribe to https://latent.space/ for a fuller writeup and insights and reflections"", ""- **Markdown is all you need** - Markdown is the perfect way to prompt for whole program synthesis because it is easy to mix english and code (whether `variable_names` or entire \\`\\`\\` code fenced code samples)\r\n  - turns out you can specify prompts in code in prompts and gpt4 obeys that to the letter\r\n- **Copy and paste programming**\r\n  - teaching the program to understand how to code around a new API (Anthropic's API is after GPT3's knowledge cutoff) by just pasting in the `curl` input and output\r\n  - pasting error messages into the prompt and vaguely telling the program how you'd like it handled. it kind of feels like \""logbook driven programming\"".\r\n- **Debugging by `cat`ing** the whole codebase with your error message and getting specific fix suggestions - particularly delightful!\r\n- **Tricks for whole program coherence** - our chosen example usecase, Chrome extensions, have a lot of indirect dependencies across files. Any hallucination of cross dependencies causes the whole program to error. \r\n  - We solved this by adding an intermediate step asking GPT to think through `shared_dependencies.md`, and then insisting on using that in generating each file. This basically means GPT is able to talk to itself...\r\n  - ... but it's not perfect, yet. `shared_dependencies.md` is sometimes not comperehensive in understanding what are hard dependencies between files. So we just solved it by specifying a specific `name` in the prompt. felt dirty at first but it works, and really it's just clear unambiguous communication at the end of the day. \r\n  - see `prompt.md` for SOTA smol-dev prompting\r\n- **Low activation energy for unfamiliar APIs**"", ""# smol developer\r\n\r\n***Human-centric & Coherent Whole Program Synthesis*** aka your own personal junior developer\r\n\r\n> [Build the thing that builds the thing!](https://twitter.com/swyx/status/1657578738345979905) a `smol dev` for every dev in every situation\r\n\r\nthis is a prototype of a \""junior developer\"" agent (aka `smol dev`) that scaffolds an entire codebase out for you once you give it a product spec, but does not end the world or overpromise AGI. instead of making and maintaining specific, rigid, one-shot starters, like `create-react-app`, or `create-nextjs-app`, this is basically [`create-anything-app`](https://news.ycombinator.com/item?id=35942352) where you develop your scaffolding prompt in a tight loop with your smol dev.\r\n\r\nAI that is helpful, harmless, and honest is complemented by a codebase that is simple, safe, and smol - <200 lines of Python and Prompts, so this is easy to understand and customize.\r\n\r\n<p align=\""center\"">\r\n  <img height=200 src=\""https://pbs.twimg.com/media/FwEzVCcaMAE7t4h?format=jpg&name=large\"" />\r\n</p>\r\n\r\n\r\n*engineering with prompts, rather than prompt engineering* \r\n\r\nThe demo example in `prompt.md` shows the potential of AI-enabled, but still firmly human developer centric, workflow:\r\n\r\n- Human writes a basic prompt for the app they want to build\r\n- `main.py` generates code\r\n- Human runs/reads the code\r\n- Human can:\r\n  - simply add to the prompt as they discover underspecified parts of the prompt"", ""modal-client\r\nopenai\r\ntiktoken""]}",50,0.6570131778717041,2,What does this do?
CONTEXT_VALIDATOR,"{""query"": ""Can you provide examples of how this code repository has been used in real-world scenarios?"", ""repo"": ""https://github.com/smol-ai/developer"", ""similar_documents"": [""- simply add to the prompt as they discover underspecified parts of the prompt\r\n  - manually runs the code and identifies errors\r\n  - *paste the error into the prompt* just like they would file a github issue\r\n  - for extra help, they can use `debugger.py` which reads the whole codebase to make specific code change suggestions\r\n\r\nLoop until happiness is attained. Notice that AI is only used as long as it is adding value - once it gets in your way, just take over the codebase from your smol junior developer with no fuss and no hurt feelings. (*we could also have smol-dev take over an existing codebase and bootstrap its own prompt... but that's a Future Direction*)\r\n\r\n*Not no code, not low code, but some third thing.* \r\n\r\nPerhaps a higher order evolution of programming where you still need to be technical, but no longer have to implement every detail at least to scaffold things out.\r\n\r\n## video demo\r\n\r\n[![https://i3.ytimg.com/vi/UCo7YeTy-aE/hqdefault.jpg](https://i3.ytimg.com/vi/UCo7YeTy-aE/hqdefault.jpg)](https://youtu.be/UCo7YeTy-aE)\r\n\r\n## arch diagram\r\n\r\nnaturally generated with gpt4, like [we did for babyagi](https://twitter.com/swyx/status/1648724820316786688)\r\n![image](https://github.com/smol-ai/developer/assets/6764957/f8fc68f4-77f6-43ee-852f-a35fb195430a)\r\n\r\n\r\n### innovations and insights\r\n\r\n> Please subscribe to https://latent.space/ for a fuller writeup and insights and reflections"", ""modal-client\r\nopenai\r\ntiktoken"", ""- **ability to install its own dependencies**\r\n  - this leaks into depending on the execution environment, which we all know is the path to dependency madness. how to avoid? dockerize? nix? [web container](https://twitter.com/litbid/status/1658154530385670150)?\r\n  - Modal has an interesting possibility: generate functions that speak modal which also solves the dependency thing https://twitter.com/akshat_b/status/1658146096902811657\r\n- **self-heal** by running the code itself and use errors as information for reprompting \r\n  - however its a bit hard to get errors from the chrome extension environment so we did not try this\r\n- **using anthropic as the coding layer**\r\n  - you can run `modal run anthropic.py --prompt prompt.md --outputdir=anthropic` to try it\r\n  - but it doesnt work because anthropic doesnt follow instructions to generate file code very well.\r\n- **make agents that autonomously run this code in a loop/watch the prompt file** and regenerate code each time, on a new git branch\r\n  - the code could be generated on 5 simultaneous git branches and checking their output would just involve switching git branches"", ""- **Markdown is all you need** - Markdown is the perfect way to prompt for whole program synthesis because it is easy to mix english and code (whether `variable_names` or entire \\`\\`\\` code fenced code samples)\r\n  - turns out you can specify prompts in code in prompts and gpt4 obeys that to the letter\r\n- **Copy and paste programming**\r\n  - teaching the program to understand how to code around a new API (Anthropic's API is after GPT3's knowledge cutoff) by just pasting in the `curl` input and output\r\n  - pasting error messages into the prompt and vaguely telling the program how you'd like it handled. it kind of feels like \""logbook driven programming\"".\r\n- **Debugging by `cat`ing** the whole codebase with your error message and getting specific fix suggestions - particularly delightful!\r\n- **Tricks for whole program coherence** - our chosen example usecase, Chrome extensions, have a lot of indirect dependencies across files. Any hallucination of cross dependencies causes the whole program to error. \r\n  - We solved this by adding an intermediate step asking GPT to think through `shared_dependencies.md`, and then insisting on using that in generating each file. This basically means GPT is able to talk to itself...\r\n  - ... but it's not perfect, yet. `shared_dependencies.md` is sometimes not comperehensive in understanding what are hard dependencies between files. So we just solved it by specifying a specific `name` in the prompt. felt dirty at first but it works, and really it's just clear unambiguous communication at the end of the day. \r\n  - see `prompt.md` for SOTA smol-dev prompting\r\n- **Low activation energy for unfamiliar APIs**"", ""# smol developer\r\n\r\n***Human-centric & Coherent Whole Program Synthesis*** aka your own personal junior developer\r\n\r\n> [Build the thing that builds the thing!](https://twitter.com/swyx/status/1657578738345979905) a `smol dev` for every dev in every situation\r\n\r\nthis is a prototype of a \""junior developer\"" agent (aka `smol dev`) that scaffolds an entire codebase out for you once you give it a product spec, but does not end the world or overpromise AGI. instead of making and maintaining specific, rigid, one-shot starters, like `create-react-app`, or `create-nextjs-app`, this is basically [`create-anything-app`](https://news.ycombinator.com/item?id=35942352) where you develop your scaffolding prompt in a tight loop with your smol dev.\r\n\r\nAI that is helpful, harmless, and honest is complemented by a codebase that is simple, safe, and smol - <200 lines of Python and Prompts, so this is easy to understand and customize.\r\n\r\n<p align=\""center\"">\r\n  <img height=200 src=\""https://pbs.twimg.com/media/FwEzVCcaMAE7t4h?format=jpg&name=large\"" />\r\n</p>\r\n\r\n\r\n*engineering with prompts, rather than prompt engineering* \r\n\r\nThe demo example in `prompt.md` shows the potential of AI-enabled, but still firmly human developer centric, workflow:\r\n\r\n- Human writes a basic prompt for the app they want to build\r\n- `main.py` generates code\r\n- Human runs/reads the code\r\n- Human can:\r\n  - simply add to the prompt as they discover underspecified parts of the prompt""]}",50,0.748225212097168,2,What does this do?
UPGRADE_QUERY,"{""query"": ""What does this do?"", ""repo"": ""https://github.com/smol-ai/developer""}","1. What is the purpose of the code in this repository?
2. Can you explain the functionality of the code in this repository?
3. How does the code in this repository work?
4. What problem does the code in this repository solve?
5. What are the main features of the code in this repository?",5.836038112640381,2,What does this do?
CONTEXT_VALIDATOR,"{""query"": ""What is the purpose of the code in this repository?"", ""repo"": ""https://github.com/smol-ai/developer"", ""similar_documents"": [""- simply add to the prompt as they discover underspecified parts of the prompt\r\n  - manually runs the code and identifies errors\r\n  - *paste the error into the prompt* just like they would file a github issue\r\n  - for extra help, they can use `debugger.py` which reads the whole codebase to make specific code change suggestions\r\n\r\nLoop until happiness is attained. Notice that AI is only used as long as it is adding value - once it gets in your way, just take over the codebase from your smol junior developer with no fuss and no hurt feelings. (*we could also have smol-dev take over an existing codebase and bootstrap its own prompt... but that's a Future Direction*)\r\n\r\n*Not no code, not low code, but some third thing.* \r\n\r\nPerhaps a higher order evolution of programming where you still need to be technical, but no longer have to implement every detail at least to scaffold things out.\r\n\r\n## video demo\r\n\r\n[![https://i3.ytimg.com/vi/UCo7YeTy-aE/hqdefault.jpg](https://i3.ytimg.com/vi/UCo7YeTy-aE/hqdefault.jpg)](https://youtu.be/UCo7YeTy-aE)\r\n\r\n## arch diagram\r\n\r\nnaturally generated with gpt4, like [we did for babyagi](https://twitter.com/swyx/status/1648724820316786688)\r\n![image](https://github.com/smol-ai/developer/assets/6764957/f8fc68f4-77f6-43ee-852f-a35fb195430a)\r\n\r\n\r\n### innovations and insights\r\n\r\n> Please subscribe to https://latent.space/ for a fuller writeup and insights and reflections"", ""MIT License Copyright (c) 2023 swyx\r\n\r\nPermission is hereby granted, free of\r\ncharge, to any person obtaining a copy of this software and associated\r\ndocumentation files (the \""Software\""), to deal in the Software without\r\nrestriction, including without limitation the rights to use, copy, modify, merge,\r\npublish, distribute, sublicense, and/or sell copies of the Software, and to\r\npermit persons to whom the Software is furnished to do so, subject to the\r\nfollowing conditions:\r\n\r\nThe above copyright notice and this permission notice\r\n(including the next paragraph) shall be included in all copies or substantial\r\nportions of the Software.\r\n\r\nTHE SOFTWARE IS PROVIDED \""AS IS\"", WITHOUT WARRANTY OF\r\nANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\r\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO\r\nEVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR\r\nOTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\r\nFROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\nTHE SOFTWARE."", ""- **ability to install its own dependencies**\r\n  - this leaks into depending on the execution environment, which we all know is the path to dependency madness. how to avoid? dockerize? nix? [web container](https://twitter.com/litbid/status/1658154530385670150)?\r\n  - Modal has an interesting possibility: generate functions that speak modal which also solves the dependency thing https://twitter.com/akshat_b/status/1658146096902811657\r\n- **self-heal** by running the code itself and use errors as information for reprompting \r\n  - however its a bit hard to get errors from the chrome extension environment so we did not try this\r\n- **using anthropic as the coding layer**\r\n  - you can run `modal run anthropic.py --prompt prompt.md --outputdir=anthropic` to try it\r\n  - but it doesnt work because anthropic doesnt follow instructions to generate file code very well.\r\n- **make agents that autonomously run this code in a loop/watch the prompt file** and regenerate code each time, on a new git branch\r\n  - the code could be generated on 5 simultaneous git branches and checking their output would just involve switching git branches"", ""# smol developer\r\n\r\n***Human-centric & Coherent Whole Program Synthesis*** aka your own personal junior developer\r\n\r\n> [Build the thing that builds the thing!](https://twitter.com/swyx/status/1657578738345979905) a `smol dev` for every dev in every situation\r\n\r\nthis is a prototype of a \""junior developer\"" agent (aka `smol dev`) that scaffolds an entire codebase out for you once you give it a product spec, but does not end the world or overpromise AGI. instead of making and maintaining specific, rigid, one-shot starters, like `create-react-app`, or `create-nextjs-app`, this is basically [`create-anything-app`](https://news.ycombinator.com/item?id=35942352) where you develop your scaffolding prompt in a tight loop with your smol dev.\r\n\r\nAI that is helpful, harmless, and honest is complemented by a codebase that is simple, safe, and smol - <200 lines of Python and Prompts, so this is easy to understand and customize.\r\n\r\n<p align=\""center\"">\r\n  <img height=200 src=\""https://pbs.twimg.com/media/FwEzVCcaMAE7t4h?format=jpg&name=large\"" />\r\n</p>\r\n\r\n\r\n*engineering with prompts, rather than prompt engineering* \r\n\r\nThe demo example in `prompt.md` shows the potential of AI-enabled, but still firmly human developer centric, workflow:\r\n\r\n- Human writes a basic prompt for the app they want to build\r\n- `main.py` generates code\r\n- Human runs/reads the code\r\n- Human can:\r\n  - simply add to the prompt as they discover underspecified parts of the prompt"", ""- **Markdown is all you need** - Markdown is the perfect way to prompt for whole program synthesis because it is easy to mix english and code (whether `variable_names` or entire \\`\\`\\` code fenced code samples)\r\n  - turns out you can specify prompts in code in prompts and gpt4 obeys that to the letter\r\n- **Copy and paste programming**\r\n  - teaching the program to understand how to code around a new API (Anthropic's API is after GPT3's knowledge cutoff) by just pasting in the `curl` input and output\r\n  - pasting error messages into the prompt and vaguely telling the program how you'd like it handled. it kind of feels like \""logbook driven programming\"".\r\n- **Debugging by `cat`ing** the whole codebase with your error message and getting specific fix suggestions - particularly delightful!\r\n- **Tricks for whole program coherence** - our chosen example usecase, Chrome extensions, have a lot of indirect dependencies across files. Any hallucination of cross dependencies causes the whole program to error. \r\n  - We solved this by adding an intermediate step asking GPT to think through `shared_dependencies.md`, and then insisting on using that in generating each file. This basically means GPT is able to talk to itself...\r\n  - ... but it's not perfect, yet. `shared_dependencies.md` is sometimes not comperehensive in understanding what are hard dependencies between files. So we just solved it by specifying a specific `name` in the prompt. felt dirty at first but it works, and really it's just clear unambiguous communication at the end of the day. \r\n  - see `prompt.md` for SOTA smol-dev prompting\r\n- **Low activation energy for unfamiliar APIs**""]}",50,0.6508595943450928,2,What does this do?
CONTEXT_VALIDATOR,"{""query"": ""Can you explain the functionality of the code in this repository?"", ""repo"": ""https://github.com/smol-ai/developer"", ""similar_documents"": [""- simply add to the prompt as they discover underspecified parts of the prompt\r\n  - manually runs the code and identifies errors\r\n  - *paste the error into the prompt* just like they would file a github issue\r\n  - for extra help, they can use `debugger.py` which reads the whole codebase to make specific code change suggestions\r\n\r\nLoop until happiness is attained. Notice that AI is only used as long as it is adding value - once it gets in your way, just take over the codebase from your smol junior developer with no fuss and no hurt feelings. (*we could also have smol-dev take over an existing codebase and bootstrap its own prompt... but that's a Future Direction*)\r\n\r\n*Not no code, not low code, but some third thing.* \r\n\r\nPerhaps a higher order evolution of programming where you still need to be technical, but no longer have to implement every detail at least to scaffold things out.\r\n\r\n## video demo\r\n\r\n[![https://i3.ytimg.com/vi/UCo7YeTy-aE/hqdefault.jpg](https://i3.ytimg.com/vi/UCo7YeTy-aE/hqdefault.jpg)](https://youtu.be/UCo7YeTy-aE)\r\n\r\n## arch diagram\r\n\r\nnaturally generated with gpt4, like [we did for babyagi](https://twitter.com/swyx/status/1648724820316786688)\r\n![image](https://github.com/smol-ai/developer/assets/6764957/f8fc68f4-77f6-43ee-852f-a35fb195430a)\r\n\r\n\r\n### innovations and insights\r\n\r\n> Please subscribe to https://latent.space/ for a fuller writeup and insights and reflections"", ""- **ability to install its own dependencies**\r\n  - this leaks into depending on the execution environment, which we all know is the path to dependency madness. how to avoid? dockerize? nix? [web container](https://twitter.com/litbid/status/1658154530385670150)?\r\n  - Modal has an interesting possibility: generate functions that speak modal which also solves the dependency thing https://twitter.com/akshat_b/status/1658146096902811657\r\n- **self-heal** by running the code itself and use errors as information for reprompting \r\n  - however its a bit hard to get errors from the chrome extension environment so we did not try this\r\n- **using anthropic as the coding layer**\r\n  - you can run `modal run anthropic.py --prompt prompt.md --outputdir=anthropic` to try it\r\n  - but it doesnt work because anthropic doesnt follow instructions to generate file code very well.\r\n- **make agents that autonomously run this code in a loop/watch the prompt file** and regenerate code each time, on a new git branch\r\n  - the code could be generated on 5 simultaneous git branches and checking their output would just involve switching git branches"", ""# smol developer\r\n\r\n***Human-centric & Coherent Whole Program Synthesis*** aka your own personal junior developer\r\n\r\n> [Build the thing that builds the thing!](https://twitter.com/swyx/status/1657578738345979905) a `smol dev` for every dev in every situation\r\n\r\nthis is a prototype of a \""junior developer\"" agent (aka `smol dev`) that scaffolds an entire codebase out for you once you give it a product spec, but does not end the world or overpromise AGI. instead of making and maintaining specific, rigid, one-shot starters, like `create-react-app`, or `create-nextjs-app`, this is basically [`create-anything-app`](https://news.ycombinator.com/item?id=35942352) where you develop your scaffolding prompt in a tight loop with your smol dev.\r\n\r\nAI that is helpful, harmless, and honest is complemented by a codebase that is simple, safe, and smol - <200 lines of Python and Prompts, so this is easy to understand and customize.\r\n\r\n<p align=\""center\"">\r\n  <img height=200 src=\""https://pbs.twimg.com/media/FwEzVCcaMAE7t4h?format=jpg&name=large\"" />\r\n</p>\r\n\r\n\r\n*engineering with prompts, rather than prompt engineering* \r\n\r\nThe demo example in `prompt.md` shows the potential of AI-enabled, but still firmly human developer centric, workflow:\r\n\r\n- Human writes a basic prompt for the app they want to build\r\n- `main.py` generates code\r\n- Human runs/reads the code\r\n- Human can:\r\n  - simply add to the prompt as they discover underspecified parts of the prompt"", ""The program is a Chrome extension that summarizes web pages using the Anthropic Claude API. It consists of several files: popup.js, styles.css, \r\nbackground.js, popup.html, shared_dependencies.md, and content_script.js. \r\n\r\npopup.html is the main user interface for the extension, containing a form with several input fields and a submit button. popup.js handles the logic\r\nfor the form, including retrieving the user's input, calling the Anthropic API, and rendering the summary in the content div. styles.css provides \r\nstyling for the UI elements.\r\n\r\nbackground.js is responsible for executing content_script.js, which retrieves the page content (title and body text) and sends it to popup.js for \r\nprocessing. It also handles storing and retrieving the page content data using Chrome's storage API.\r\n\r\nshared_dependencies.md lists the shared variables, data schemas, DOM element IDs, message names, and function names used across the various files.\r\n\r\nOverall, the program uses a combination of JavaScript, HTML, and CSS to provide a user-friendly interface for summarizing web pages using the \r\nAnthropic Claude API."", ""## install\r\n\r\nit's basically: \r\n\r\n- `git clone https://github.com/smol-ai/developer`.\r\n- copy over `.example.env` to `.env` filling in your API keys.\r\n\r\nThere are no python dependencies to wrangle thanks to using Modal as a [self-provisioning runtime](https://www.google.com/search?q=self+provisioning+runtime).\r\n\r\nUnfortunately this project also uses 3 waitlisted things:\r\n\r\n- Modal.com - `pip install modal-client` (private beta - hit up the modal team to get an invite, and login)\r\n  - You can run this project w/o Modal following these instructions:\r\n  - `pip install -r requirements.txt`\r\n  - `python main_no_modal.py YOUR_PROMPT_HERE`\r\n- GPT-4 api (private beta) - can use 3.5 but obviously wont be as good\r\n- (for the demo project) anthropic claude 100k context api (private beta)\r\n\r\n> yes, the most important skill in being an ai engineer is social engineering to get off waitlists. Modal will let you in if you say the keyword \""swyx\""\r\n\r\nyou'll have to adapt this code on a fork if you want to use it on other infra. please open issues/PRs and i'll happily highlight your fork here.\r\n\r\n### trying the example chrome extension""]}",50,1.4121475219726562,2,What does this do?
CONTEXT_VALIDATOR,"{""query"": ""How does the code in this repository work?"", ""repo"": ""https://github.com/smol-ai/developer"", ""similar_documents"": [""- simply add to the prompt as they discover underspecified parts of the prompt\r\n  - manually runs the code and identifies errors\r\n  - *paste the error into the prompt* just like they would file a github issue\r\n  - for extra help, they can use `debugger.py` which reads the whole codebase to make specific code change suggestions\r\n\r\nLoop until happiness is attained. Notice that AI is only used as long as it is adding value - once it gets in your way, just take over the codebase from your smol junior developer with no fuss and no hurt feelings. (*we could also have smol-dev take over an existing codebase and bootstrap its own prompt... but that's a Future Direction*)\r\n\r\n*Not no code, not low code, but some third thing.* \r\n\r\nPerhaps a higher order evolution of programming where you still need to be technical, but no longer have to implement every detail at least to scaffold things out.\r\n\r\n## video demo\r\n\r\n[![https://i3.ytimg.com/vi/UCo7YeTy-aE/hqdefault.jpg](https://i3.ytimg.com/vi/UCo7YeTy-aE/hqdefault.jpg)](https://youtu.be/UCo7YeTy-aE)\r\n\r\n## arch diagram\r\n\r\nnaturally generated with gpt4, like [we did for babyagi](https://twitter.com/swyx/status/1648724820316786688)\r\n![image](https://github.com/smol-ai/developer/assets/6764957/f8fc68f4-77f6-43ee-852f-a35fb195430a)\r\n\r\n\r\n### innovations and insights\r\n\r\n> Please subscribe to https://latent.space/ for a fuller writeup and insights and reflections"", ""- **ability to install its own dependencies**\r\n  - this leaks into depending on the execution environment, which we all know is the path to dependency madness. how to avoid? dockerize? nix? [web container](https://twitter.com/litbid/status/1658154530385670150)?\r\n  - Modal has an interesting possibility: generate functions that speak modal which also solves the dependency thing https://twitter.com/akshat_b/status/1658146096902811657\r\n- **self-heal** by running the code itself and use errors as information for reprompting \r\n  - however its a bit hard to get errors from the chrome extension environment so we did not try this\r\n- **using anthropic as the coding layer**\r\n  - you can run `modal run anthropic.py --prompt prompt.md --outputdir=anthropic` to try it\r\n  - but it doesnt work because anthropic doesnt follow instructions to generate file code very well.\r\n- **make agents that autonomously run this code in a loop/watch the prompt file** and regenerate code each time, on a new git branch\r\n  - the code could be generated on 5 simultaneous git branches and checking their output would just involve switching git branches"", ""# smol developer\r\n\r\n***Human-centric & Coherent Whole Program Synthesis*** aka your own personal junior developer\r\n\r\n> [Build the thing that builds the thing!](https://twitter.com/swyx/status/1657578738345979905) a `smol dev` for every dev in every situation\r\n\r\nthis is a prototype of a \""junior developer\"" agent (aka `smol dev`) that scaffolds an entire codebase out for you once you give it a product spec, but does not end the world or overpromise AGI. instead of making and maintaining specific, rigid, one-shot starters, like `create-react-app`, or `create-nextjs-app`, this is basically [`create-anything-app`](https://news.ycombinator.com/item?id=35942352) where you develop your scaffolding prompt in a tight loop with your smol dev.\r\n\r\nAI that is helpful, harmless, and honest is complemented by a codebase that is simple, safe, and smol - <200 lines of Python and Prompts, so this is easy to understand and customize.\r\n\r\n<p align=\""center\"">\r\n  <img height=200 src=\""https://pbs.twimg.com/media/FwEzVCcaMAE7t4h?format=jpg&name=large\"" />\r\n</p>\r\n\r\n\r\n*engineering with prompts, rather than prompt engineering* \r\n\r\nThe demo example in `prompt.md` shows the potential of AI-enabled, but still firmly human developer centric, workflow:\r\n\r\n- Human writes a basic prompt for the app they want to build\r\n- `main.py` generates code\r\n- Human runs/reads the code\r\n- Human can:\r\n  - simply add to the prompt as they discover underspecified parts of the prompt"", ""## install\r\n\r\nit's basically: \r\n\r\n- `git clone https://github.com/smol-ai/developer`.\r\n- copy over `.example.env` to `.env` filling in your API keys.\r\n\r\nThere are no python dependencies to wrangle thanks to using Modal as a [self-provisioning runtime](https://www.google.com/search?q=self+provisioning+runtime).\r\n\r\nUnfortunately this project also uses 3 waitlisted things:\r\n\r\n- Modal.com - `pip install modal-client` (private beta - hit up the modal team to get an invite, and login)\r\n  - You can run this project w/o Modal following these instructions:\r\n  - `pip install -r requirements.txt`\r\n  - `python main_no_modal.py YOUR_PROMPT_HERE`\r\n- GPT-4 api (private beta) - can use 3.5 but obviously wont be as good\r\n- (for the demo project) anthropic claude 100k context api (private beta)\r\n\r\n> yes, the most important skill in being an ai engineer is social engineering to get off waitlists. Modal will let you in if you say the keyword \""swyx\""\r\n\r\nyou'll have to adapt this code on a fork if you want to use it on other infra. please open issues/PRs and i'll happily highlight your fork here.\r\n\r\n### trying the example chrome extension"", ""- **Markdown is all you need** - Markdown is the perfect way to prompt for whole program synthesis because it is easy to mix english and code (whether `variable_names` or entire \\`\\`\\` code fenced code samples)\r\n  - turns out you can specify prompts in code in prompts and gpt4 obeys that to the letter\r\n- **Copy and paste programming**\r\n  - teaching the program to understand how to code around a new API (Anthropic's API is after GPT3's knowledge cutoff) by just pasting in the `curl` input and output\r\n  - pasting error messages into the prompt and vaguely telling the program how you'd like it handled. it kind of feels like \""logbook driven programming\"".\r\n- **Debugging by `cat`ing** the whole codebase with your error message and getting specific fix suggestions - particularly delightful!\r\n- **Tricks for whole program coherence** - our chosen example usecase, Chrome extensions, have a lot of indirect dependencies across files. Any hallucination of cross dependencies causes the whole program to error. \r\n  - We solved this by adding an intermediate step asking GPT to think through `shared_dependencies.md`, and then insisting on using that in generating each file. This basically means GPT is able to talk to itself...\r\n  - ... but it's not perfect, yet. `shared_dependencies.md` is sometimes not comperehensive in understanding what are hard dependencies between files. So we just solved it by specifying a specific `name` in the prompt. felt dirty at first but it works, and really it's just clear unambiguous communication at the end of the day. \r\n  - see `prompt.md` for SOTA smol-dev prompting\r\n- **Low activation energy for unfamiliar APIs**""]}",50,0.6122245788574219,2,What does this do?
CONTEXT_VALIDATOR,"{""query"": ""What problem does the code in this repository solve?"", ""repo"": ""https://github.com/smol-ai/developer"", ""similar_documents"": [""- simply add to the prompt as they discover underspecified parts of the prompt\r\n  - manually runs the code and identifies errors\r\n  - *paste the error into the prompt* just like they would file a github issue\r\n  - for extra help, they can use `debugger.py` which reads the whole codebase to make specific code change suggestions\r\n\r\nLoop until happiness is attained. Notice that AI is only used as long as it is adding value - once it gets in your way, just take over the codebase from your smol junior developer with no fuss and no hurt feelings. (*we could also have smol-dev take over an existing codebase and bootstrap its own prompt... but that's a Future Direction*)\r\n\r\n*Not no code, not low code, but some third thing.* \r\n\r\nPerhaps a higher order evolution of programming where you still need to be technical, but no longer have to implement every detail at least to scaffold things out.\r\n\r\n## video demo\r\n\r\n[![https://i3.ytimg.com/vi/UCo7YeTy-aE/hqdefault.jpg](https://i3.ytimg.com/vi/UCo7YeTy-aE/hqdefault.jpg)](https://youtu.be/UCo7YeTy-aE)\r\n\r\n## arch diagram\r\n\r\nnaturally generated with gpt4, like [we did for babyagi](https://twitter.com/swyx/status/1648724820316786688)\r\n![image](https://github.com/smol-ai/developer/assets/6764957/f8fc68f4-77f6-43ee-852f-a35fb195430a)\r\n\r\n\r\n### innovations and insights\r\n\r\n> Please subscribe to https://latent.space/ for a fuller writeup and insights and reflections"", ""- **ability to install its own dependencies**\r\n  - this leaks into depending on the execution environment, which we all know is the path to dependency madness. how to avoid? dockerize? nix? [web container](https://twitter.com/litbid/status/1658154530385670150)?\r\n  - Modal has an interesting possibility: generate functions that speak modal which also solves the dependency thing https://twitter.com/akshat_b/status/1658146096902811657\r\n- **self-heal** by running the code itself and use errors as information for reprompting \r\n  - however its a bit hard to get errors from the chrome extension environment so we did not try this\r\n- **using anthropic as the coding layer**\r\n  - you can run `modal run anthropic.py --prompt prompt.md --outputdir=anthropic` to try it\r\n  - but it doesnt work because anthropic doesnt follow instructions to generate file code very well.\r\n- **make agents that autonomously run this code in a loop/watch the prompt file** and regenerate code each time, on a new git branch\r\n  - the code could be generated on 5 simultaneous git branches and checking their output would just involve switching git branches"", ""- **Markdown is all you need** - Markdown is the perfect way to prompt for whole program synthesis because it is easy to mix english and code (whether `variable_names` or entire \\`\\`\\` code fenced code samples)\r\n  - turns out you can specify prompts in code in prompts and gpt4 obeys that to the letter\r\n- **Copy and paste programming**\r\n  - teaching the program to understand how to code around a new API (Anthropic's API is after GPT3's knowledge cutoff) by just pasting in the `curl` input and output\r\n  - pasting error messages into the prompt and vaguely telling the program how you'd like it handled. it kind of feels like \""logbook driven programming\"".\r\n- **Debugging by `cat`ing** the whole codebase with your error message and getting specific fix suggestions - particularly delightful!\r\n- **Tricks for whole program coherence** - our chosen example usecase, Chrome extensions, have a lot of indirect dependencies across files. Any hallucination of cross dependencies causes the whole program to error. \r\n  - We solved this by adding an intermediate step asking GPT to think through `shared_dependencies.md`, and then insisting on using that in generating each file. This basically means GPT is able to talk to itself...\r\n  - ... but it's not perfect, yet. `shared_dependencies.md` is sometimes not comperehensive in understanding what are hard dependencies between files. So we just solved it by specifying a specific `name` in the prompt. felt dirty at first but it works, and really it's just clear unambiguous communication at the end of the day. \r\n  - see `prompt.md` for SOTA smol-dev prompting\r\n- **Low activation energy for unfamiliar APIs**"", ""# todo\r\n# https://twitter.com/nathanwchan/status/1658153897154981888?s=20"", ""# smol developer\r\n\r\n***Human-centric & Coherent Whole Program Synthesis*** aka your own personal junior developer\r\n\r\n> [Build the thing that builds the thing!](https://twitter.com/swyx/status/1657578738345979905) a `smol dev` for every dev in every situation\r\n\r\nthis is a prototype of a \""junior developer\"" agent (aka `smol dev`) that scaffolds an entire codebase out for you once you give it a product spec, but does not end the world or overpromise AGI. instead of making and maintaining specific, rigid, one-shot starters, like `create-react-app`, or `create-nextjs-app`, this is basically [`create-anything-app`](https://news.ycombinator.com/item?id=35942352) where you develop your scaffolding prompt in a tight loop with your smol dev.\r\n\r\nAI that is helpful, harmless, and honest is complemented by a codebase that is simple, safe, and smol - <200 lines of Python and Prompts, so this is easy to understand and customize.\r\n\r\n<p align=\""center\"">\r\n  <img height=200 src=\""https://pbs.twimg.com/media/FwEzVCcaMAE7t4h?format=jpg&name=large\"" />\r\n</p>\r\n\r\n\r\n*engineering with prompts, rather than prompt engineering* \r\n\r\nThe demo example in `prompt.md` shows the potential of AI-enabled, but still firmly human developer centric, workflow:\r\n\r\n- Human writes a basic prompt for the app they want to build\r\n- `main.py` generates code\r\n- Human runs/reads the code\r\n- Human can:\r\n  - simply add to the prompt as they discover underspecified parts of the prompt""]}",50,0.8070423603057861,2,What does this do?
CONTEXT_VALIDATOR,"{""query"": ""What are the main features of the code in this repository?"", ""repo"": ""https://github.com/smol-ai/developer"", ""similar_documents"": [""body {\r\n  font-family: Arial, sans-serif;\r\n  margin: 0;\r\n  padding: 15px;\r\n}\r\n\r\ntextarea, input {\r\n  display: block;\r\n  width: 100%;\r\n  margin-bottom: 10px;\r\n  padding: 5px;\r\n  font-size: 14px;\r\n}\r\n\r\nbutton {\r\n  background-color: #4CAF50;\r\n  border: none;\r\n  color: white;\r\n  padding: 10px 20px;\r\n  text-align: center;\r\n  text-decoration: none;\r\n  display: inline-block;\r\n  font-size: 14px;\r\n  margin: 10px 0;\r\n  cursor: pointer;\r\n}\r\n\r\nbutton:hover {\r\n  background-color: #45a049;\r\n}\r\n\r\n#content {\r\n  margin-top: 20px;\r\n  font-size: 14px;\r\n  line-height: 1.5;\r\n}\r\n\r\n#loadingIndicator {\r\n  display: none;\r\n  font-size: 14px;\r\n  color: #999;\r\n}"", ""- simply add to the prompt as they discover underspecified parts of the prompt\r\n  - manually runs the code and identifies errors\r\n  - *paste the error into the prompt* just like they would file a github issue\r\n  - for extra help, they can use `debugger.py` which reads the whole codebase to make specific code change suggestions\r\n\r\nLoop until happiness is attained. Notice that AI is only used as long as it is adding value - once it gets in your way, just take over the codebase from your smol junior developer with no fuss and no hurt feelings. (*we could also have smol-dev take over an existing codebase and bootstrap its own prompt... but that's a Future Direction*)\r\n\r\n*Not no code, not low code, but some third thing.* \r\n\r\nPerhaps a higher order evolution of programming where you still need to be technical, but no longer have to implement every detail at least to scaffold things out.\r\n\r\n## video demo\r\n\r\n[![https://i3.ytimg.com/vi/UCo7YeTy-aE/hqdefault.jpg](https://i3.ytimg.com/vi/UCo7YeTy-aE/hqdefault.jpg)](https://youtu.be/UCo7YeTy-aE)\r\n\r\n## arch diagram\r\n\r\nnaturally generated with gpt4, like [we did for babyagi](https://twitter.com/swyx/status/1648724820316786688)\r\n![image](https://github.com/smol-ai/developer/assets/6764957/f8fc68f4-77f6-43ee-852f-a35fb195430a)\r\n\r\n\r\n### innovations and insights\r\n\r\n> Please subscribe to https://latent.space/ for a fuller writeup and insights and reflections"", ""- **Markdown is all you need** - Markdown is the perfect way to prompt for whole program synthesis because it is easy to mix english and code (whether `variable_names` or entire \\`\\`\\` code fenced code samples)\r\n  - turns out you can specify prompts in code in prompts and gpt4 obeys that to the letter\r\n- **Copy and paste programming**\r\n  - teaching the program to understand how to code around a new API (Anthropic's API is after GPT3's knowledge cutoff) by just pasting in the `curl` input and output\r\n  - pasting error messages into the prompt and vaguely telling the program how you'd like it handled. it kind of feels like \""logbook driven programming\"".\r\n- **Debugging by `cat`ing** the whole codebase with your error message and getting specific fix suggestions - particularly delightful!\r\n- **Tricks for whole program coherence** - our chosen example usecase, Chrome extensions, have a lot of indirect dependencies across files. Any hallucination of cross dependencies causes the whole program to error. \r\n  - We solved this by adding an intermediate step asking GPT to think through `shared_dependencies.md`, and then insisting on using that in generating each file. This basically means GPT is able to talk to itself...\r\n  - ... but it's not perfect, yet. `shared_dependencies.md` is sometimes not comperehensive in understanding what are hard dependencies between files. So we just solved it by specifying a specific `name` in the prompt. felt dirty at first but it works, and really it's just clear unambiguous communication at the end of the day. \r\n  - see `prompt.md` for SOTA smol-dev prompting\r\n- **Low activation energy for unfamiliar APIs**"", ""# smol developer\r\n\r\n***Human-centric & Coherent Whole Program Synthesis*** aka your own personal junior developer\r\n\r\n> [Build the thing that builds the thing!](https://twitter.com/swyx/status/1657578738345979905) a `smol dev` for every dev in every situation\r\n\r\nthis is a prototype of a \""junior developer\"" agent (aka `smol dev`) that scaffolds an entire codebase out for you once you give it a product spec, but does not end the world or overpromise AGI. instead of making and maintaining specific, rigid, one-shot starters, like `create-react-app`, or `create-nextjs-app`, this is basically [`create-anything-app`](https://news.ycombinator.com/item?id=35942352) where you develop your scaffolding prompt in a tight loop with your smol dev.\r\n\r\nAI that is helpful, harmless, and honest is complemented by a codebase that is simple, safe, and smol - <200 lines of Python and Prompts, so this is easy to understand and customize.\r\n\r\n<p align=\""center\"">\r\n  <img height=200 src=\""https://pbs.twimg.com/media/FwEzVCcaMAE7t4h?format=jpg&name=large\"" />\r\n</p>\r\n\r\n\r\n*engineering with prompts, rather than prompt engineering* \r\n\r\nThe demo example in `prompt.md` shows the potential of AI-enabled, but still firmly human developer centric, workflow:\r\n\r\n- Human writes a basic prompt for the app they want to build\r\n- `main.py` generates code\r\n- Human runs/reads the code\r\n- Human can:\r\n  - simply add to the prompt as they discover underspecified parts of the prompt"", ""- **ability to install its own dependencies**\r\n  - this leaks into depending on the execution environment, which we all know is the path to dependency madness. how to avoid? dockerize? nix? [web container](https://twitter.com/litbid/status/1658154530385670150)?\r\n  - Modal has an interesting possibility: generate functions that speak modal which also solves the dependency thing https://twitter.com/akshat_b/status/1658146096902811657\r\n- **self-heal** by running the code itself and use errors as information for reprompting \r\n  - however its a bit hard to get errors from the chrome extension environment so we did not try this\r\n- **using anthropic as the coding layer**\r\n  - you can run `modal run anthropic.py --prompt prompt.md --outputdir=anthropic` to try it\r\n  - but it doesnt work because anthropic doesnt follow instructions to generate file code very well.\r\n- **make agents that autonomously run this code in a loop/watch the prompt file** and regenerate code each time, on a new git branch\r\n  - the code could be generated on 5 simultaneous git branches and checking their output would just involve switching git branches""]}",10,0.7428410053253174,2,What does this do?
UPGRADE_QUERY,"{""query"": ""What does this do?"", ""repo"": ""https://github.com/smol-ai/developer""}","1. What is the purpose of the code in this repository?
2. Can you explain the functionality of the code in this repository?
3. How does the code in this repository work?
4. What problem does the code in this repository solve?
5. What are the key features of the code in this repository?",70.39724373817444,2,What does this do?
CONTEXT_VALIDATOR,"{""query"": ""What is the purpose of the code in this repository?"", ""repo"": ""https://github.com/smol-ai/developer"", ""similar_documents"": [""- simply add to the prompt as they discover underspecified parts of the prompt\r\n  - manually runs the code and identifies errors\r\n  - *paste the error into the prompt* just like they would file a github issue\r\n  - for extra help, they can use `debugger.py` which reads the whole codebase to make specific code change suggestions\r\n\r\nLoop until happiness is attained. Notice that AI is only used as long as it is adding value - once it gets in your way, just take over the codebase from your smol junior developer with no fuss and no hurt feelings. (*we could also have smol-dev take over an existing codebase and bootstrap its own prompt... but that's a Future Direction*)\r\n\r\n*Not no code, not low code, but some third thing.* \r\n\r\nPerhaps a higher order evolution of programming where you still need to be technical, but no longer have to implement every detail at least to scaffold things out.\r\n\r\n## video demo\r\n\r\n[![https://i3.ytimg.com/vi/UCo7YeTy-aE/hqdefault.jpg](https://i3.ytimg.com/vi/UCo7YeTy-aE/hqdefault.jpg)](https://youtu.be/UCo7YeTy-aE)\r\n\r\n## arch diagram\r\n\r\nnaturally generated with gpt4, like [we did for babyagi](https://twitter.com/swyx/status/1648724820316786688)\r\n![image](https://github.com/smol-ai/developer/assets/6764957/f8fc68f4-77f6-43ee-852f-a35fb195430a)\r\n\r\n\r\n### innovations and insights\r\n\r\n> Please subscribe to https://latent.space/ for a fuller writeup and insights and reflections"", ""MIT License Copyright (c) 2023 swyx\r\n\r\nPermission is hereby granted, free of\r\ncharge, to any person obtaining a copy of this software and associated\r\ndocumentation files (the \""Software\""), to deal in the Software without\r\nrestriction, including without limitation the rights to use, copy, modify, merge,\r\npublish, distribute, sublicense, and/or sell copies of the Software, and to\r\npermit persons to whom the Software is furnished to do so, subject to the\r\nfollowing conditions:\r\n\r\nThe above copyright notice and this permission notice\r\n(including the next paragraph) shall be included in all copies or substantial\r\nportions of the Software.\r\n\r\nTHE SOFTWARE IS PROVIDED \""AS IS\"", WITHOUT WARRANTY OF\r\nANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\r\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO\r\nEVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR\r\nOTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\r\nFROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\nTHE SOFTWARE."", ""- **ability to install its own dependencies**\r\n  - this leaks into depending on the execution environment, which we all know is the path to dependency madness. how to avoid? dockerize? nix? [web container](https://twitter.com/litbid/status/1658154530385670150)?\r\n  - Modal has an interesting possibility: generate functions that speak modal which also solves the dependency thing https://twitter.com/akshat_b/status/1658146096902811657\r\n- **self-heal** by running the code itself and use errors as information for reprompting \r\n  - however its a bit hard to get errors from the chrome extension environment so we did not try this\r\n- **using anthropic as the coding layer**\r\n  - you can run `modal run anthropic.py --prompt prompt.md --outputdir=anthropic` to try it\r\n  - but it doesnt work because anthropic doesnt follow instructions to generate file code very well.\r\n- **make agents that autonomously run this code in a loop/watch the prompt file** and regenerate code each time, on a new git branch\r\n  - the code could be generated on 5 simultaneous git branches and checking their output would just involve switching git branches"", ""# smol developer\r\n\r\n***Human-centric & Coherent Whole Program Synthesis*** aka your own personal junior developer\r\n\r\n> [Build the thing that builds the thing!](https://twitter.com/swyx/status/1657578738345979905) a `smol dev` for every dev in every situation\r\n\r\nthis is a prototype of a \""junior developer\"" agent (aka `smol dev`) that scaffolds an entire codebase out for you once you give it a product spec, but does not end the world or overpromise AGI. instead of making and maintaining specific, rigid, one-shot starters, like `create-react-app`, or `create-nextjs-app`, this is basically [`create-anything-app`](https://news.ycombinator.com/item?id=35942352) where you develop your scaffolding prompt in a tight loop with your smol dev.\r\n\r\nAI that is helpful, harmless, and honest is complemented by a codebase that is simple, safe, and smol - <200 lines of Python and Prompts, so this is easy to understand and customize.\r\n\r\n<p align=\""center\"">\r\n  <img height=200 src=\""https://pbs.twimg.com/media/FwEzVCcaMAE7t4h?format=jpg&name=large\"" />\r\n</p>\r\n\r\n\r\n*engineering with prompts, rather than prompt engineering* \r\n\r\nThe demo example in `prompt.md` shows the potential of AI-enabled, but still firmly human developer centric, workflow:\r\n\r\n- Human writes a basic prompt for the app they want to build\r\n- `main.py` generates code\r\n- Human runs/reads the code\r\n- Human can:\r\n  - simply add to the prompt as they discover underspecified parts of the prompt"", ""- **Markdown is all you need** - Markdown is the perfect way to prompt for whole program synthesis because it is easy to mix english and code (whether `variable_names` or entire \\`\\`\\` code fenced code samples)\r\n  - turns out you can specify prompts in code in prompts and gpt4 obeys that to the letter\r\n- **Copy and paste programming**\r\n  - teaching the program to understand how to code around a new API (Anthropic's API is after GPT3's knowledge cutoff) by just pasting in the `curl` input and output\r\n  - pasting error messages into the prompt and vaguely telling the program how you'd like it handled. it kind of feels like \""logbook driven programming\"".\r\n- **Debugging by `cat`ing** the whole codebase with your error message and getting specific fix suggestions - particularly delightful!\r\n- **Tricks for whole program coherence** - our chosen example usecase, Chrome extensions, have a lot of indirect dependencies across files. Any hallucination of cross dependencies causes the whole program to error. \r\n  - We solved this by adding an intermediate step asking GPT to think through `shared_dependencies.md`, and then insisting on using that in generating each file. This basically means GPT is able to talk to itself...\r\n  - ... but it's not perfect, yet. `shared_dependencies.md` is sometimes not comperehensive in understanding what are hard dependencies between files. So we just solved it by specifying a specific `name` in the prompt. felt dirty at first but it works, and really it's just clear unambiguous communication at the end of the day. \r\n  - see `prompt.md` for SOTA smol-dev prompting\r\n- **Low activation energy for unfamiliar APIs**""]}",50,0.6887085437774658,2,What does this do?
RUN_QUERY_RAG,"{""query"": ""What is the purpose of the code in this repository?"", ""repo"": ""https://github.com/smol-ai/developer"", ""similar_documents"": [""- simply add to the prompt as they discover underspecified parts of the prompt\r\n  - manually runs the code and identifies errors\r\n  - *paste the error into the prompt* just like they would file a github issue\r\n  - for extra help, they can use `debugger.py` which reads the whole codebase to make specific code change suggestions\r\n\r\nLoop until happiness is attained. Notice that AI is only used as long as it is adding value - once it gets in your way, just take over the codebase from your smol junior developer with no fuss and no hurt feelings. (*we could also have smol-dev take over an existing codebase and bootstrap its own prompt... but that's a Future Direction*)\r\n\r\n*Not no code, not low code, but some third thing.* \r\n\r\nPerhaps a higher order evolution of programming where you still need to be technical, but no longer have to implement every detail at least to scaffold things out.\r\n\r\n## video demo\r\n\r\n[![https://i3.ytimg.com/vi/UCo7YeTy-aE/hqdefault.jpg](https://i3.ytimg.com/vi/UCo7YeTy-aE/hqdefault.jpg)](https://youtu.be/UCo7YeTy-aE)\r\n\r\n## arch diagram\r\n\r\nnaturally generated with gpt4, like [we did for babyagi](https://twitter.com/swyx/status/1648724820316786688)\r\n![image](https://github.com/smol-ai/developer/assets/6764957/f8fc68f4-77f6-43ee-852f-a35fb195430a)\r\n\r\n\r\n### innovations and insights\r\n\r\n> Please subscribe to https://latent.space/ for a fuller writeup and insights and reflections"", ""MIT License Copyright (c) 2023 swyx\r\n\r\nPermission is hereby granted, free of\r\ncharge, to any person obtaining a copy of this software and associated\r\ndocumentation files (the \""Software\""), to deal in the Software without\r\nrestriction, including without limitation the rights to use, copy, modify, merge,\r\npublish, distribute, sublicense, and/or sell copies of the Software, and to\r\npermit persons to whom the Software is furnished to do so, subject to the\r\nfollowing conditions:\r\n\r\nThe above copyright notice and this permission notice\r\n(including the next paragraph) shall be included in all copies or substantial\r\nportions of the Software.\r\n\r\nTHE SOFTWARE IS PROVIDED \""AS IS\"", WITHOUT WARRANTY OF\r\nANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\r\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO\r\nEVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR\r\nOTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\r\nFROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\nTHE SOFTWARE."", ""- **ability to install its own dependencies**\r\n  - this leaks into depending on the execution environment, which we all know is the path to dependency madness. how to avoid? dockerize? nix? [web container](https://twitter.com/litbid/status/1658154530385670150)?\r\n  - Modal has an interesting possibility: generate functions that speak modal which also solves the dependency thing https://twitter.com/akshat_b/status/1658146096902811657\r\n- **self-heal** by running the code itself and use errors as information for reprompting \r\n  - however its a bit hard to get errors from the chrome extension environment so we did not try this\r\n- **using anthropic as the coding layer**\r\n  - you can run `modal run anthropic.py --prompt prompt.md --outputdir=anthropic` to try it\r\n  - but it doesnt work because anthropic doesnt follow instructions to generate file code very well.\r\n- **make agents that autonomously run this code in a loop/watch the prompt file** and regenerate code each time, on a new git branch\r\n  - the code could be generated on 5 simultaneous git branches and checking their output would just involve switching git branches"", ""# smol developer\r\n\r\n***Human-centric & Coherent Whole Program Synthesis*** aka your own personal junior developer\r\n\r\n> [Build the thing that builds the thing!](https://twitter.com/swyx/status/1657578738345979905) a `smol dev` for every dev in every situation\r\n\r\nthis is a prototype of a \""junior developer\"" agent (aka `smol dev`) that scaffolds an entire codebase out for you once you give it a product spec, but does not end the world or overpromise AGI. instead of making and maintaining specific, rigid, one-shot starters, like `create-react-app`, or `create-nextjs-app`, this is basically [`create-anything-app`](https://news.ycombinator.com/item?id=35942352) where you develop your scaffolding prompt in a tight loop with your smol dev.\r\n\r\nAI that is helpful, harmless, and honest is complemented by a codebase that is simple, safe, and smol - <200 lines of Python and Prompts, so this is easy to understand and customize.\r\n\r\n<p align=\""center\"">\r\n  <img height=200 src=\""https://pbs.twimg.com/media/FwEzVCcaMAE7t4h?format=jpg&name=large\"" />\r\n</p>\r\n\r\n\r\n*engineering with prompts, rather than prompt engineering* \r\n\r\nThe demo example in `prompt.md` shows the potential of AI-enabled, but still firmly human developer centric, workflow:\r\n\r\n- Human writes a basic prompt for the app they want to build\r\n- `main.py` generates code\r\n- Human runs/reads the code\r\n- Human can:\r\n  - simply add to the prompt as they discover underspecified parts of the prompt"", ""- **Markdown is all you need** - Markdown is the perfect way to prompt for whole program synthesis because it is easy to mix english and code (whether `variable_names` or entire \\`\\`\\` code fenced code samples)\r\n  - turns out you can specify prompts in code in prompts and gpt4 obeys that to the letter\r\n- **Copy and paste programming**\r\n  - teaching the program to understand how to code around a new API (Anthropic's API is after GPT3's knowledge cutoff) by just pasting in the `curl` input and output\r\n  - pasting error messages into the prompt and vaguely telling the program how you'd like it handled. it kind of feels like \""logbook driven programming\"".\r\n- **Debugging by `cat`ing** the whole codebase with your error message and getting specific fix suggestions - particularly delightful!\r\n- **Tricks for whole program coherence** - our chosen example usecase, Chrome extensions, have a lot of indirect dependencies across files. Any hallucination of cross dependencies causes the whole program to error. \r\n  - We solved this by adding an intermediate step asking GPT to think through `shared_dependencies.md`, and then insisting on using that in generating each file. This basically means GPT is able to talk to itself...\r\n  - ... but it's not perfect, yet. `shared_dependencies.md` is sometimes not comperehensive in understanding what are hard dependencies between files. So we just solved it by specifying a specific `name` in the prompt. felt dirty at first but it works, and really it's just clear unambiguous communication at the end of the day. \r\n  - see `prompt.md` for SOTA smol-dev prompting\r\n- **Low activation energy for unfamiliar APIs**""]}","The purpose of the code in this repository is to create a ""junior developer"" agent that can scaffold an entire codebase based on a product spec provided by the user. The agent uses prompts written in Markdown to generate code, which the user can then manually run and modify as needed. The codebase is designed to be simple, safe, and under 200 lines of Python and Prompts. The agent can also suggest specific code changes using a debugger tool. The codebase is licensed under the MIT License.",11.906407833099365,2,What does this do?
CONTEXT_VALIDATOR,"{""query"": ""What is the point of the .env file?"", ""repo"": ""https://github.com/smol-ai/developer"", ""similar_documents"": ["".env\r\n__pycache__\r\n.vscode\r\n# Ignore everything in the generated directory\r\n/generated/*\r\n\r\n# Don't ignore .png files in the generated directory\r\n!/generated/*.png"", ""OPENAI_API_KEY=sk-xxxxxx\r\nANTHROPIC_API_KEY=sk-ant-api03-xxxxxx"", ""- **Markdown is all you need** - Markdown is the perfect way to prompt for whole program synthesis because it is easy to mix english and code (whether `variable_names` or entire \\`\\`\\` code fenced code samples)\r\n  - turns out you can specify prompts in code in prompts and gpt4 obeys that to the letter\r\n- **Copy and paste programming**\r\n  - teaching the program to understand how to code around a new API (Anthropic's API is after GPT3's knowledge cutoff) by just pasting in the `curl` input and output\r\n  - pasting error messages into the prompt and vaguely telling the program how you'd like it handled. it kind of feels like \""logbook driven programming\"".\r\n- **Debugging by `cat`ing** the whole codebase with your error message and getting specific fix suggestions - particularly delightful!\r\n- **Tricks for whole program coherence** - our chosen example usecase, Chrome extensions, have a lot of indirect dependencies across files. Any hallucination of cross dependencies causes the whole program to error. \r\n  - We solved this by adding an intermediate step asking GPT to think through `shared_dependencies.md`, and then insisting on using that in generating each file. This basically means GPT is able to talk to itself...\r\n  - ... but it's not perfect, yet. `shared_dependencies.md` is sometimes not comperehensive in understanding what are hard dependencies between files. So we just solved it by specifying a specific `name` in the prompt. felt dirty at first but it works, and really it's just clear unambiguous communication at the end of the day. \r\n  - see `prompt.md` for SOTA smol-dev prompting\r\n- **Low activation energy for unfamiliar APIs**"", ""body {\r\n  font-family: Arial, sans-serif;\r\n  margin: 0;\r\n  padding: 15px;\r\n}\r\n\r\ntextarea, input {\r\n  display: block;\r\n  width: 100%;\r\n  margin-bottom: 10px;\r\n  padding: 5px;\r\n  font-size: 14px;\r\n}\r\n\r\nbutton {\r\n  background-color: #4CAF50;\r\n  border: none;\r\n  color: white;\r\n  padding: 10px 20px;\r\n  text-align: center;\r\n  text-decoration: none;\r\n  display: inline-block;\r\n  font-size: 14px;\r\n  margin: 10px 0;\r\n  cursor: pointer;\r\n}\r\n\r\nbutton:hover {\r\n  background-color: #45a049;\r\n}\r\n\r\n#content {\r\n  margin-top: 20px;\r\n  font-size: 14px;\r\n  line-height: 1.5;\r\n}\r\n\r\n#loadingIndicator {\r\n  display: none;\r\n  font-size: 14px;\r\n  color: #999;\r\n}"", ""modal-client\r\nopenai\r\ntiktoken""]}",50,0.4778311252593994,0,What is the point of the .env file?
UPGRADE_QUERY,"{""query"": ""What is the point of the .env file?"", ""repo"": ""https://github.com/smol-ai/developer""}","1. What is the purpose of the .env file in the smol-ai/developer repository and how is it used?
2. How does the .env file work in the smol-ai/developer repository and what are its benefits?
3. Can someone explain the significance of the .env file in the smol-ai/developer repository and how it relates to security?
4. What are some best practices for managing the .env file in the smol-ai/developer repository and how can it be optimized for performance?
5. How does the .env file in the smol-ai/developer repository differ from similar files in other code repositories and what are the implications of these differences?",16.057568073272705,0,What is the point of the .env file?
CONTEXT_VALIDATOR,"{""query"": ""What is the purpose of the .env file in the smol-ai/developer repository and how is it used?"", ""repo"": ""https://github.com/smol-ai/developer"", ""similar_documents"": [""# smol developer\r\n\r\n***Human-centric & Coherent Whole Program Synthesis*** aka your own personal junior developer\r\n\r\n> [Build the thing that builds the thing!](https://twitter.com/swyx/status/1657578738345979905) a `smol dev` for every dev in every situation\r\n\r\nthis is a prototype of a \""junior developer\"" agent (aka `smol dev`) that scaffolds an entire codebase out for you once you give it a product spec, but does not end the world or overpromise AGI. instead of making and maintaining specific, rigid, one-shot starters, like `create-react-app`, or `create-nextjs-app`, this is basically [`create-anything-app`](https://news.ycombinator.com/item?id=35942352) where you develop your scaffolding prompt in a tight loop with your smol dev.\r\n\r\nAI that is helpful, harmless, and honest is complemented by a codebase that is simple, safe, and smol - <200 lines of Python and Prompts, so this is easy to understand and customize.\r\n\r\n<p align=\""center\"">\r\n  <img height=200 src=\""https://pbs.twimg.com/media/FwEzVCcaMAE7t4h?format=jpg&name=large\"" />\r\n</p>\r\n\r\n\r\n*engineering with prompts, rather than prompt engineering* \r\n\r\nThe demo example in `prompt.md` shows the potential of AI-enabled, but still firmly human developer centric, workflow:\r\n\r\n- Human writes a basic prompt for the app they want to build\r\n- `main.py` generates code\r\n- Human runs/reads the code\r\n- Human can:\r\n  - simply add to the prompt as they discover underspecified parts of the prompt"", ""## install\r\n\r\nit's basically: \r\n\r\n- `git clone https://github.com/smol-ai/developer`.\r\n- copy over `.example.env` to `.env` filling in your API keys.\r\n\r\nThere are no python dependencies to wrangle thanks to using Modal as a [self-provisioning runtime](https://www.google.com/search?q=self+provisioning+runtime).\r\n\r\nUnfortunately this project also uses 3 waitlisted things:\r\n\r\n- Modal.com - `pip install modal-client` (private beta - hit up the modal team to get an invite, and login)\r\n  - You can run this project w/o Modal following these instructions:\r\n  - `pip install -r requirements.txt`\r\n  - `python main_no_modal.py YOUR_PROMPT_HERE`\r\n- GPT-4 api (private beta) - can use 3.5 but obviously wont be as good\r\n- (for the demo project) anthropic claude 100k context api (private beta)\r\n\r\n> yes, the most important skill in being an ai engineer is social engineering to get off waitlists. Modal will let you in if you say the keyword \""swyx\""\r\n\r\nyou'll have to adapt this code on a fork if you want to use it on other infra. please open issues/PRs and i'll happily highlight your fork here.\r\n\r\n### trying the example chrome extension"", ""- simply add to the prompt as they discover underspecified parts of the prompt\r\n  - manually runs the code and identifies errors\r\n  - *paste the error into the prompt* just like they would file a github issue\r\n  - for extra help, they can use `debugger.py` which reads the whole codebase to make specific code change suggestions\r\n\r\nLoop until happiness is attained. Notice that AI is only used as long as it is adding value - once it gets in your way, just take over the codebase from your smol junior developer with no fuss and no hurt feelings. (*we could also have smol-dev take over an existing codebase and bootstrap its own prompt... but that's a Future Direction*)\r\n\r\n*Not no code, not low code, but some third thing.* \r\n\r\nPerhaps a higher order evolution of programming where you still need to be technical, but no longer have to implement every detail at least to scaffold things out.\r\n\r\n## video demo\r\n\r\n[![https://i3.ytimg.com/vi/UCo7YeTy-aE/hqdefault.jpg](https://i3.ytimg.com/vi/UCo7YeTy-aE/hqdefault.jpg)](https://youtu.be/UCo7YeTy-aE)\r\n\r\n## arch diagram\r\n\r\nnaturally generated with gpt4, like [we did for babyagi](https://twitter.com/swyx/status/1648724820316786688)\r\n![image](https://github.com/smol-ai/developer/assets/6764957/f8fc68f4-77f6-43ee-852f-a35fb195430a)\r\n\r\n\r\n### innovations and insights\r\n\r\n> Please subscribe to https://latent.space/ for a fuller writeup and insights and reflections"", "".env\r\n__pycache__\r\n.vscode\r\n# Ignore everything in the generated directory\r\n/generated/*\r\n\r\n# Don't ignore .png files in the generated directory\r\n!/generated/*.png"", ""OPENAI_API_KEY=sk-xxxxxx\r\nANTHROPIC_API_KEY=sk-ant-api03-xxxxxx""]}",80,31.617576122283936,0,What is the point of the .env file?
RUN_QUERY_RAG,"{""query"": ""What is the purpose of the .env file in the smol-ai/developer repository and how is it used?"", ""repo"": ""https://github.com/smol-ai/developer"", ""similar_documents"": [""# smol developer\r\n\r\n***Human-centric & Coherent Whole Program Synthesis*** aka your own personal junior developer\r\n\r\n> [Build the thing that builds the thing!](https://twitter.com/swyx/status/1657578738345979905) a `smol dev` for every dev in every situation\r\n\r\nthis is a prototype of a \""junior developer\"" agent (aka `smol dev`) that scaffolds an entire codebase out for you once you give it a product spec, but does not end the world or overpromise AGI. instead of making and maintaining specific, rigid, one-shot starters, like `create-react-app`, or `create-nextjs-app`, this is basically [`create-anything-app`](https://news.ycombinator.com/item?id=35942352) where you develop your scaffolding prompt in a tight loop with your smol dev.\r\n\r\nAI that is helpful, harmless, and honest is complemented by a codebase that is simple, safe, and smol - <200 lines of Python and Prompts, so this is easy to understand and customize.\r\n\r\n<p align=\""center\"">\r\n  <img height=200 src=\""https://pbs.twimg.com/media/FwEzVCcaMAE7t4h?format=jpg&name=large\"" />\r\n</p>\r\n\r\n\r\n*engineering with prompts, rather than prompt engineering* \r\n\r\nThe demo example in `prompt.md` shows the potential of AI-enabled, but still firmly human developer centric, workflow:\r\n\r\n- Human writes a basic prompt for the app they want to build\r\n- `main.py` generates code\r\n- Human runs/reads the code\r\n- Human can:\r\n  - simply add to the prompt as they discover underspecified parts of the prompt"", ""## install\r\n\r\nit's basically: \r\n\r\n- `git clone https://github.com/smol-ai/developer`.\r\n- copy over `.example.env` to `.env` filling in your API keys.\r\n\r\nThere are no python dependencies to wrangle thanks to using Modal as a [self-provisioning runtime](https://www.google.com/search?q=self+provisioning+runtime).\r\n\r\nUnfortunately this project also uses 3 waitlisted things:\r\n\r\n- Modal.com - `pip install modal-client` (private beta - hit up the modal team to get an invite, and login)\r\n  - You can run this project w/o Modal following these instructions:\r\n  - `pip install -r requirements.txt`\r\n  - `python main_no_modal.py YOUR_PROMPT_HERE`\r\n- GPT-4 api (private beta) - can use 3.5 but obviously wont be as good\r\n- (for the demo project) anthropic claude 100k context api (private beta)\r\n\r\n> yes, the most important skill in being an ai engineer is social engineering to get off waitlists. Modal will let you in if you say the keyword \""swyx\""\r\n\r\nyou'll have to adapt this code on a fork if you want to use it on other infra. please open issues/PRs and i'll happily highlight your fork here.\r\n\r\n### trying the example chrome extension"", ""- simply add to the prompt as they discover underspecified parts of the prompt\r\n  - manually runs the code and identifies errors\r\n  - *paste the error into the prompt* just like they would file a github issue\r\n  - for extra help, they can use `debugger.py` which reads the whole codebase to make specific code change suggestions\r\n\r\nLoop until happiness is attained. Notice that AI is only used as long as it is adding value - once it gets in your way, just take over the codebase from your smol junior developer with no fuss and no hurt feelings. (*we could also have smol-dev take over an existing codebase and bootstrap its own prompt... but that's a Future Direction*)\r\n\r\n*Not no code, not low code, but some third thing.* \r\n\r\nPerhaps a higher order evolution of programming where you still need to be technical, but no longer have to implement every detail at least to scaffold things out.\r\n\r\n## video demo\r\n\r\n[![https://i3.ytimg.com/vi/UCo7YeTy-aE/hqdefault.jpg](https://i3.ytimg.com/vi/UCo7YeTy-aE/hqdefault.jpg)](https://youtu.be/UCo7YeTy-aE)\r\n\r\n## arch diagram\r\n\r\nnaturally generated with gpt4, like [we did for babyagi](https://twitter.com/swyx/status/1648724820316786688)\r\n![image](https://github.com/smol-ai/developer/assets/6764957/f8fc68f4-77f6-43ee-852f-a35fb195430a)\r\n\r\n\r\n### innovations and insights\r\n\r\n> Please subscribe to https://latent.space/ for a fuller writeup and insights and reflections"", "".env\r\n__pycache__\r\n.vscode\r\n# Ignore everything in the generated directory\r\n/generated/*\r\n\r\n# Don't ignore .png files in the generated directory\r\n!/generated/*.png"", ""OPENAI_API_KEY=sk-xxxxxx\r\nANTHROPIC_API_KEY=sk-ant-api03-xxxxxx""]}","The .env file in the smol-ai/developer repository is used to store API keys for Modal, GPT-4, and Anthropoc Claude 100k Context API. It is necessary to copy over the .example.env file and fill in the API keys to use the project. The project is a prototype of a ""junior developer"" agent that scaffolds an entire codebase out for the user once they give it a product spec. The codebase is simple, safe, and less than 200 lines of Python and Prompts. The project uses prompts for engineering, rather than prompt engineering. The AI is only used as long as it is adding value, and the user can take over the codebase from the ""smol dev"" with no fuss and no hurt feelings.",15.502159833908081,0,What is the point of the .env file?
CONTEXT_VALIDATOR,"{""query"": ""What is the point of the .env file?"", ""repo"": ""https://github.com/smol-ai/developer"", ""similar_documents"": ["".env\r\n__pycache__\r\n.vscode\r\n# Ignore everything in the generated directory\r\n/generated/*\r\n\r\n# Don't ignore .png files in the generated directory\r\n!/generated/*.png"", ""OPENAI_API_KEY=sk-xxxxxx\r\nANTHROPIC_API_KEY=sk-ant-api03-xxxxxx"", ""- **Markdown is all you need** - Markdown is the perfect way to prompt for whole program synthesis because it is easy to mix english and code (whether `variable_names` or entire \\`\\`\\` code fenced code samples)\r\n  - turns out you can specify prompts in code in prompts and gpt4 obeys that to the letter\r\n- **Copy and paste programming**\r\n  - teaching the program to understand how to code around a new API (Anthropic's API is after GPT3's knowledge cutoff) by just pasting in the `curl` input and output\r\n  - pasting error messages into the prompt and vaguely telling the program how you'd like it handled. it kind of feels like \""logbook driven programming\"".\r\n- **Debugging by `cat`ing** the whole codebase with your error message and getting specific fix suggestions - particularly delightful!\r\n- **Tricks for whole program coherence** - our chosen example usecase, Chrome extensions, have a lot of indirect dependencies across files. Any hallucination of cross dependencies causes the whole program to error. \r\n  - We solved this by adding an intermediate step asking GPT to think through `shared_dependencies.md`, and then insisting on using that in generating each file. This basically means GPT is able to talk to itself...\r\n  - ... but it's not perfect, yet. `shared_dependencies.md` is sometimes not comperehensive in understanding what are hard dependencies between files. So we just solved it by specifying a specific `name` in the prompt. felt dirty at first but it works, and really it's just clear unambiguous communication at the end of the day. \r\n  - see `prompt.md` for SOTA smol-dev prompting\r\n- **Low activation energy for unfamiliar APIs**"", ""body {\r\n  font-family: Arial, sans-serif;\r\n  margin: 0;\r\n  padding: 15px;\r\n}\r\n\r\ntextarea, input {\r\n  display: block;\r\n  width: 100%;\r\n  margin-bottom: 10px;\r\n  padding: 5px;\r\n  font-size: 14px;\r\n}\r\n\r\nbutton {\r\n  background-color: #4CAF50;\r\n  border: none;\r\n  color: white;\r\n  padding: 10px 20px;\r\n  text-align: center;\r\n  text-decoration: none;\r\n  display: inline-block;\r\n  font-size: 14px;\r\n  margin: 10px 0;\r\n  cursor: pointer;\r\n}\r\n\r\nbutton:hover {\r\n  background-color: #45a049;\r\n}\r\n\r\n#content {\r\n  margin-top: 20px;\r\n  font-size: 14px;\r\n  line-height: 1.5;\r\n}\r\n\r\n#loadingIndicator {\r\n  display: none;\r\n  font-size: 14px;\r\n  color: #999;\r\n}"", ""modal-client\r\nopenai\r\ntiktoken""]}",50,1.223262071609497,1,What is the point of the .env file?
UPGRADE_QUERY,"{""query"": ""What is the point of the .env file?"", ""repo"": ""https://github.com/smol-ai/developer""}","1. What is the purpose of the .env file in the smol-ai/developer repository and how is it used in the code?
2. Can someone explain the significance of the .env file in the context of the smol-ai/developer repository and how it affects the application?
3. How does the .env file work in the smol-ai/developer repository and what are some best practices for managing it?
4. What are the benefits of using a .env file in the smol-ai/developer repository and how does it enhance the security of the application?
5. How does the .env file in the smol-ai/developer repository differ from other configuration files and what are some common use cases for it?",16.45514225959778,1,What is the point of the .env file?
CONTEXT_VALIDATOR,"{""query"": ""What is the purpose of the .env file in the smol-ai/developer repository and how is it used in the code?"", ""repo"": ""https://github.com/smol-ai/developer"", ""similar_documents"": [""# smol developer\r\n\r\n***Human-centric & Coherent Whole Program Synthesis*** aka your own personal junior developer\r\n\r\n> [Build the thing that builds the thing!](https://twitter.com/swyx/status/1657578738345979905) a `smol dev` for every dev in every situation\r\n\r\nthis is a prototype of a \""junior developer\"" agent (aka `smol dev`) that scaffolds an entire codebase out for you once you give it a product spec, but does not end the world or overpromise AGI. instead of making and maintaining specific, rigid, one-shot starters, like `create-react-app`, or `create-nextjs-app`, this is basically [`create-anything-app`](https://news.ycombinator.com/item?id=35942352) where you develop your scaffolding prompt in a tight loop with your smol dev.\r\n\r\nAI that is helpful, harmless, and honest is complemented by a codebase that is simple, safe, and smol - <200 lines of Python and Prompts, so this is easy to understand and customize.\r\n\r\n<p align=\""center\"">\r\n  <img height=200 src=\""https://pbs.twimg.com/media/FwEzVCcaMAE7t4h?format=jpg&name=large\"" />\r\n</p>\r\n\r\n\r\n*engineering with prompts, rather than prompt engineering* \r\n\r\nThe demo example in `prompt.md` shows the potential of AI-enabled, but still firmly human developer centric, workflow:\r\n\r\n- Human writes a basic prompt for the app they want to build\r\n- `main.py` generates code\r\n- Human runs/reads the code\r\n- Human can:\r\n  - simply add to the prompt as they discover underspecified parts of the prompt"", ""## install\r\n\r\nit's basically: \r\n\r\n- `git clone https://github.com/smol-ai/developer`.\r\n- copy over `.example.env` to `.env` filling in your API keys.\r\n\r\nThere are no python dependencies to wrangle thanks to using Modal as a [self-provisioning runtime](https://www.google.com/search?q=self+provisioning+runtime).\r\n\r\nUnfortunately this project also uses 3 waitlisted things:\r\n\r\n- Modal.com - `pip install modal-client` (private beta - hit up the modal team to get an invite, and login)\r\n  - You can run this project w/o Modal following these instructions:\r\n  - `pip install -r requirements.txt`\r\n  - `python main_no_modal.py YOUR_PROMPT_HERE`\r\n- GPT-4 api (private beta) - can use 3.5 but obviously wont be as good\r\n- (for the demo project) anthropic claude 100k context api (private beta)\r\n\r\n> yes, the most important skill in being an ai engineer is social engineering to get off waitlists. Modal will let you in if you say the keyword \""swyx\""\r\n\r\nyou'll have to adapt this code on a fork if you want to use it on other infra. please open issues/PRs and i'll happily highlight your fork here.\r\n\r\n### trying the example chrome extension"", ""- simply add to the prompt as they discover underspecified parts of the prompt\r\n  - manually runs the code and identifies errors\r\n  - *paste the error into the prompt* just like they would file a github issue\r\n  - for extra help, they can use `debugger.py` which reads the whole codebase to make specific code change suggestions\r\n\r\nLoop until happiness is attained. Notice that AI is only used as long as it is adding value - once it gets in your way, just take over the codebase from your smol junior developer with no fuss and no hurt feelings. (*we could also have smol-dev take over an existing codebase and bootstrap its own prompt... but that's a Future Direction*)\r\n\r\n*Not no code, not low code, but some third thing.* \r\n\r\nPerhaps a higher order evolution of programming where you still need to be technical, but no longer have to implement every detail at least to scaffold things out.\r\n\r\n## video demo\r\n\r\n[![https://i3.ytimg.com/vi/UCo7YeTy-aE/hqdefault.jpg](https://i3.ytimg.com/vi/UCo7YeTy-aE/hqdefault.jpg)](https://youtu.be/UCo7YeTy-aE)\r\n\r\n## arch diagram\r\n\r\nnaturally generated with gpt4, like [we did for babyagi](https://twitter.com/swyx/status/1648724820316786688)\r\n![image](https://github.com/smol-ai/developer/assets/6764957/f8fc68f4-77f6-43ee-852f-a35fb195430a)\r\n\r\n\r\n### innovations and insights\r\n\r\n> Please subscribe to https://latent.space/ for a fuller writeup and insights and reflections"", ""OPENAI_API_KEY=sk-xxxxxx\r\nANTHROPIC_API_KEY=sk-ant-api03-xxxxxx"", "".env\r\n__pycache__\r\n.vscode\r\n# Ignore everything in the generated directory\r\n/generated/*\r\n\r\n# Don't ignore .png files in the generated directory\r\n!/generated/*.png""]}",80,0.4921398162841797,1,What is the point of the .env file?
RUN_QUERY_RAG,"{""query"": ""What is the purpose of the .env file in the smol-ai/developer repository and how is it used in the code?"", ""repo"": ""https://github.com/smol-ai/developer"", ""similar_documents"": [""# smol developer\r\n\r\n***Human-centric & Coherent Whole Program Synthesis*** aka your own personal junior developer\r\n\r\n> [Build the thing that builds the thing!](https://twitter.com/swyx/status/1657578738345979905) a `smol dev` for every dev in every situation\r\n\r\nthis is a prototype of a \""junior developer\"" agent (aka `smol dev`) that scaffolds an entire codebase out for you once you give it a product spec, but does not end the world or overpromise AGI. instead of making and maintaining specific, rigid, one-shot starters, like `create-react-app`, or `create-nextjs-app`, this is basically [`create-anything-app`](https://news.ycombinator.com/item?id=35942352) where you develop your scaffolding prompt in a tight loop with your smol dev.\r\n\r\nAI that is helpful, harmless, and honest is complemented by a codebase that is simple, safe, and smol - <200 lines of Python and Prompts, so this is easy to understand and customize.\r\n\r\n<p align=\""center\"">\r\n  <img height=200 src=\""https://pbs.twimg.com/media/FwEzVCcaMAE7t4h?format=jpg&name=large\"" />\r\n</p>\r\n\r\n\r\n*engineering with prompts, rather than prompt engineering* \r\n\r\nThe demo example in `prompt.md` shows the potential of AI-enabled, but still firmly human developer centric, workflow:\r\n\r\n- Human writes a basic prompt for the app they want to build\r\n- `main.py` generates code\r\n- Human runs/reads the code\r\n- Human can:\r\n  - simply add to the prompt as they discover underspecified parts of the prompt"", ""## install\r\n\r\nit's basically: \r\n\r\n- `git clone https://github.com/smol-ai/developer`.\r\n- copy over `.example.env` to `.env` filling in your API keys.\r\n\r\nThere are no python dependencies to wrangle thanks to using Modal as a [self-provisioning runtime](https://www.google.com/search?q=self+provisioning+runtime).\r\n\r\nUnfortunately this project also uses 3 waitlisted things:\r\n\r\n- Modal.com - `pip install modal-client` (private beta - hit up the modal team to get an invite, and login)\r\n  - You can run this project w/o Modal following these instructions:\r\n  - `pip install -r requirements.txt`\r\n  - `python main_no_modal.py YOUR_PROMPT_HERE`\r\n- GPT-4 api (private beta) - can use 3.5 but obviously wont be as good\r\n- (for the demo project) anthropic claude 100k context api (private beta)\r\n\r\n> yes, the most important skill in being an ai engineer is social engineering to get off waitlists. Modal will let you in if you say the keyword \""swyx\""\r\n\r\nyou'll have to adapt this code on a fork if you want to use it on other infra. please open issues/PRs and i'll happily highlight your fork here.\r\n\r\n### trying the example chrome extension"", ""- simply add to the prompt as they discover underspecified parts of the prompt\r\n  - manually runs the code and identifies errors\r\n  - *paste the error into the prompt* just like they would file a github issue\r\n  - for extra help, they can use `debugger.py` which reads the whole codebase to make specific code change suggestions\r\n\r\nLoop until happiness is attained. Notice that AI is only used as long as it is adding value - once it gets in your way, just take over the codebase from your smol junior developer with no fuss and no hurt feelings. (*we could also have smol-dev take over an existing codebase and bootstrap its own prompt... but that's a Future Direction*)\r\n\r\n*Not no code, not low code, but some third thing.* \r\n\r\nPerhaps a higher order evolution of programming where you still need to be technical, but no longer have to implement every detail at least to scaffold things out.\r\n\r\n## video demo\r\n\r\n[![https://i3.ytimg.com/vi/UCo7YeTy-aE/hqdefault.jpg](https://i3.ytimg.com/vi/UCo7YeTy-aE/hqdefault.jpg)](https://youtu.be/UCo7YeTy-aE)\r\n\r\n## arch diagram\r\n\r\nnaturally generated with gpt4, like [we did for babyagi](https://twitter.com/swyx/status/1648724820316786688)\r\n![image](https://github.com/smol-ai/developer/assets/6764957/f8fc68f4-77f6-43ee-852f-a35fb195430a)\r\n\r\n\r\n### innovations and insights\r\n\r\n> Please subscribe to https://latent.space/ for a fuller writeup and insights and reflections"", ""OPENAI_API_KEY=sk-xxxxxx\r\nANTHROPIC_API_KEY=sk-ant-api03-xxxxxx"", "".env\r\n__pycache__\r\n.vscode\r\n# Ignore everything in the generated directory\r\n/generated/*\r\n\r\n# Don't ignore .png files in the generated directory\r\n!/generated/*.png""]}","The .env file in the smol-ai/developer repository contains API keys for Modal and Anthropics, which are used in the code. The file should be copied from .example.env and filled in with the appropriate keys. The codebase is designed to be simple and customizable, with a focus on human-centric and coherent whole program synthesis. The project uses AI to scaffold code based on prompts provided by the user, and the AI is only used as long as it adds value. The project is still in development and uses private beta APIs, so adaptation may be necessary to use it on other infrastructures.",14.584127426147461,1,What is the point of the .env file?
CONTEXT_VALIDATOR,"{""query"": ""What is the point of the .env file?"", ""repo"": ""https://github.com/smol-ai/developer"", ""similar_documents"": ["".env\r\n__pycache__\r\n.vscode\r\n# Ignore everything in the generated directory\r\n/generated/*\r\n\r\n# Don't ignore .png files in the generated directory\r\n!/generated/*.png"", ""OPENAI_API_KEY=sk-xxxxxx\r\nANTHROPIC_API_KEY=sk-ant-api03-xxxxxx"", ""- **Markdown is all you need** - Markdown is the perfect way to prompt for whole program synthesis because it is easy to mix english and code (whether `variable_names` or entire \\`\\`\\` code fenced code samples)\r\n  - turns out you can specify prompts in code in prompts and gpt4 obeys that to the letter\r\n- **Copy and paste programming**\r\n  - teaching the program to understand how to code around a new API (Anthropic's API is after GPT3's knowledge cutoff) by just pasting in the `curl` input and output\r\n  - pasting error messages into the prompt and vaguely telling the program how you'd like it handled. it kind of feels like \""logbook driven programming\"".\r\n- **Debugging by `cat`ing** the whole codebase with your error message and getting specific fix suggestions - particularly delightful!\r\n- **Tricks for whole program coherence** - our chosen example usecase, Chrome extensions, have a lot of indirect dependencies across files. Any hallucination of cross dependencies causes the whole program to error. \r\n  - We solved this by adding an intermediate step asking GPT to think through `shared_dependencies.md`, and then insisting on using that in generating each file. This basically means GPT is able to talk to itself...\r\n  - ... but it's not perfect, yet. `shared_dependencies.md` is sometimes not comperehensive in understanding what are hard dependencies between files. So we just solved it by specifying a specific `name` in the prompt. felt dirty at first but it works, and really it's just clear unambiguous communication at the end of the day. \r\n  - see `prompt.md` for SOTA smol-dev prompting\r\n- **Low activation energy for unfamiliar APIs**"", ""body {\r\n  font-family: Arial, sans-serif;\r\n  margin: 0;\r\n  padding: 15px;\r\n}\r\n\r\ntextarea, input {\r\n  display: block;\r\n  width: 100%;\r\n  margin-bottom: 10px;\r\n  padding: 5px;\r\n  font-size: 14px;\r\n}\r\n\r\nbutton {\r\n  background-color: #4CAF50;\r\n  border: none;\r\n  color: white;\r\n  padding: 10px 20px;\r\n  text-align: center;\r\n  text-decoration: none;\r\n  display: inline-block;\r\n  font-size: 14px;\r\n  margin: 10px 0;\r\n  cursor: pointer;\r\n}\r\n\r\nbutton:hover {\r\n  background-color: #45a049;\r\n}\r\n\r\n#content {\r\n  margin-top: 20px;\r\n  font-size: 14px;\r\n  line-height: 1.5;\r\n}\r\n\r\n#loadingIndicator {\r\n  display: none;\r\n  font-size: 14px;\r\n  color: #999;\r\n}"", ""modal-client\r\nopenai\r\ntiktoken""]}",50,1.1106836795806885,2,What is the point of the .env file?
UPGRADE_QUERY,"{""query"": ""What is the point of the .env file?"", ""repo"": ""https://github.com/smol-ai/developer""}","1. How does the .env file work in the context of the smol-ai/developer repository?
2. What are the benefits of using a .env file in the smol-ai/developer repository?
3. Can someone explain the purpose and usage of the .env file in the smol-ai/developer repository?
4. How does the .env file contribute to the security of the smol-ai/developer repository?
5. What are some best practices for managing the .env file in the smol-ai/developer repository?",13.62229585647583,2,What is the point of the .env file?
CONTEXT_VALIDATOR,"{""query"": ""How does the .env file work in the context of the smol-ai/developer repository?"", ""repo"": ""https://github.com/smol-ai/developer"", ""similar_documents"": [""# smol developer\r\n\r\n***Human-centric & Coherent Whole Program Synthesis*** aka your own personal junior developer\r\n\r\n> [Build the thing that builds the thing!](https://twitter.com/swyx/status/1657578738345979905) a `smol dev` for every dev in every situation\r\n\r\nthis is a prototype of a \""junior developer\"" agent (aka `smol dev`) that scaffolds an entire codebase out for you once you give it a product spec, but does not end the world or overpromise AGI. instead of making and maintaining specific, rigid, one-shot starters, like `create-react-app`, or `create-nextjs-app`, this is basically [`create-anything-app`](https://news.ycombinator.com/item?id=35942352) where you develop your scaffolding prompt in a tight loop with your smol dev.\r\n\r\nAI that is helpful, harmless, and honest is complemented by a codebase that is simple, safe, and smol - <200 lines of Python and Prompts, so this is easy to understand and customize.\r\n\r\n<p align=\""center\"">\r\n  <img height=200 src=\""https://pbs.twimg.com/media/FwEzVCcaMAE7t4h?format=jpg&name=large\"" />\r\n</p>\r\n\r\n\r\n*engineering with prompts, rather than prompt engineering* \r\n\r\nThe demo example in `prompt.md` shows the potential of AI-enabled, but still firmly human developer centric, workflow:\r\n\r\n- Human writes a basic prompt for the app they want to build\r\n- `main.py` generates code\r\n- Human runs/reads the code\r\n- Human can:\r\n  - simply add to the prompt as they discover underspecified parts of the prompt"", ""## install\r\n\r\nit's basically: \r\n\r\n- `git clone https://github.com/smol-ai/developer`.\r\n- copy over `.example.env` to `.env` filling in your API keys.\r\n\r\nThere are no python dependencies to wrangle thanks to using Modal as a [self-provisioning runtime](https://www.google.com/search?q=self+provisioning+runtime).\r\n\r\nUnfortunately this project also uses 3 waitlisted things:\r\n\r\n- Modal.com - `pip install modal-client` (private beta - hit up the modal team to get an invite, and login)\r\n  - You can run this project w/o Modal following these instructions:\r\n  - `pip install -r requirements.txt`\r\n  - `python main_no_modal.py YOUR_PROMPT_HERE`\r\n- GPT-4 api (private beta) - can use 3.5 but obviously wont be as good\r\n- (for the demo project) anthropic claude 100k context api (private beta)\r\n\r\n> yes, the most important skill in being an ai engineer is social engineering to get off waitlists. Modal will let you in if you say the keyword \""swyx\""\r\n\r\nyou'll have to adapt this code on a fork if you want to use it on other infra. please open issues/PRs and i'll happily highlight your fork here.\r\n\r\n### trying the example chrome extension"", ""- simply add to the prompt as they discover underspecified parts of the prompt\r\n  - manually runs the code and identifies errors\r\n  - *paste the error into the prompt* just like they would file a github issue\r\n  - for extra help, they can use `debugger.py` which reads the whole codebase to make specific code change suggestions\r\n\r\nLoop until happiness is attained. Notice that AI is only used as long as it is adding value - once it gets in your way, just take over the codebase from your smol junior developer with no fuss and no hurt feelings. (*we could also have smol-dev take over an existing codebase and bootstrap its own prompt... but that's a Future Direction*)\r\n\r\n*Not no code, not low code, but some third thing.* \r\n\r\nPerhaps a higher order evolution of programming where you still need to be technical, but no longer have to implement every detail at least to scaffold things out.\r\n\r\n## video demo\r\n\r\n[![https://i3.ytimg.com/vi/UCo7YeTy-aE/hqdefault.jpg](https://i3.ytimg.com/vi/UCo7YeTy-aE/hqdefault.jpg)](https://youtu.be/UCo7YeTy-aE)\r\n\r\n## arch diagram\r\n\r\nnaturally generated with gpt4, like [we did for babyagi](https://twitter.com/swyx/status/1648724820316786688)\r\n![image](https://github.com/smol-ai/developer/assets/6764957/f8fc68f4-77f6-43ee-852f-a35fb195430a)\r\n\r\n\r\n### innovations and insights\r\n\r\n> Please subscribe to https://latent.space/ for a fuller writeup and insights and reflections"", "".env\r\n__pycache__\r\n.vscode\r\n# Ignore everything in the generated directory\r\n/generated/*\r\n\r\n# Don't ignore .png files in the generated directory\r\n!/generated/*.png"", ""if you make a tweak to the prompt and only want it to affect one file, and keep the rest of the files, specify the file param:\r\n\r\n```bash\r\nmodal run main.py --prompt prompt.md  --file popup.js\r\n```\r\n\r\n## smol debugger\r\n\r\ntake the entire contents of the generated directory in context, feed in an error, get a response. this basically takes advantage of longer (32k-100k) context so we basically dont have to do any embedding of the source.\r\n\r\n```bash\r\nmodal run debugger.py --prompt \""Uncaught (in promise) TypeError: Cannot destructure property 'pageTitle' of '(intermediate value)' as it is undefined.    at init (popup.js:59:11)\""\r\n\r\n# gpt4\r\nmodal run debugger.py --prompt \""your_error msg_here\"" --model=gpt-4\r\n```\r\n\r\n## smol pm\r\n\r\ntake the entire contents of the generated directory in context, and get a prompt back that could synthesize the whole program. basically `smol dev`, in reverse.\r\n\r\n```bash\r\nmodal run code2prompt.py # ~0.5 second\r\n\r\n# use gpt4\r\nmodal run code2prompt.py --model=gpt-4 # 2 mins, MUCH better results\r\n```\r\n\r\nWe have done indicative runs of both, stored in `code2prompt-gpt3.md` vs `code2prompt-gpt4.md`. Note how incredibly better gpt4 is at prompt engineering its future self.\r\n\r\nNaturally, we had to try `code2prompt2code`...\r\n\r\n```bash\r\n# add prompt... this needed a few iterations to get right""]}",50,0.873560905456543,2,What is the point of the .env file?
CONTEXT_VALIDATOR,"{""query"": ""What are the benefits of using a .env file in the smol-ai/developer repository?"", ""repo"": ""https://github.com/smol-ai/developer"", ""similar_documents"": [""# smol developer\r\n\r\n***Human-centric & Coherent Whole Program Synthesis*** aka your own personal junior developer\r\n\r\n> [Build the thing that builds the thing!](https://twitter.com/swyx/status/1657578738345979905) a `smol dev` for every dev in every situation\r\n\r\nthis is a prototype of a \""junior developer\"" agent (aka `smol dev`) that scaffolds an entire codebase out for you once you give it a product spec, but does not end the world or overpromise AGI. instead of making and maintaining specific, rigid, one-shot starters, like `create-react-app`, or `create-nextjs-app`, this is basically [`create-anything-app`](https://news.ycombinator.com/item?id=35942352) where you develop your scaffolding prompt in a tight loop with your smol dev.\r\n\r\nAI that is helpful, harmless, and honest is complemented by a codebase that is simple, safe, and smol - <200 lines of Python and Prompts, so this is easy to understand and customize.\r\n\r\n<p align=\""center\"">\r\n  <img height=200 src=\""https://pbs.twimg.com/media/FwEzVCcaMAE7t4h?format=jpg&name=large\"" />\r\n</p>\r\n\r\n\r\n*engineering with prompts, rather than prompt engineering* \r\n\r\nThe demo example in `prompt.md` shows the potential of AI-enabled, but still firmly human developer centric, workflow:\r\n\r\n- Human writes a basic prompt for the app they want to build\r\n- `main.py` generates code\r\n- Human runs/reads the code\r\n- Human can:\r\n  - simply add to the prompt as they discover underspecified parts of the prompt"", ""## install\r\n\r\nit's basically: \r\n\r\n- `git clone https://github.com/smol-ai/developer`.\r\n- copy over `.example.env` to `.env` filling in your API keys.\r\n\r\nThere are no python dependencies to wrangle thanks to using Modal as a [self-provisioning runtime](https://www.google.com/search?q=self+provisioning+runtime).\r\n\r\nUnfortunately this project also uses 3 waitlisted things:\r\n\r\n- Modal.com - `pip install modal-client` (private beta - hit up the modal team to get an invite, and login)\r\n  - You can run this project w/o Modal following these instructions:\r\n  - `pip install -r requirements.txt`\r\n  - `python main_no_modal.py YOUR_PROMPT_HERE`\r\n- GPT-4 api (private beta) - can use 3.5 but obviously wont be as good\r\n- (for the demo project) anthropic claude 100k context api (private beta)\r\n\r\n> yes, the most important skill in being an ai engineer is social engineering to get off waitlists. Modal will let you in if you say the keyword \""swyx\""\r\n\r\nyou'll have to adapt this code on a fork if you want to use it on other infra. please open issues/PRs and i'll happily highlight your fork here.\r\n\r\n### trying the example chrome extension"", ""- simply add to the prompt as they discover underspecified parts of the prompt\r\n  - manually runs the code and identifies errors\r\n  - *paste the error into the prompt* just like they would file a github issue\r\n  - for extra help, they can use `debugger.py` which reads the whole codebase to make specific code change suggestions\r\n\r\nLoop until happiness is attained. Notice that AI is only used as long as it is adding value - once it gets in your way, just take over the codebase from your smol junior developer with no fuss and no hurt feelings. (*we could also have smol-dev take over an existing codebase and bootstrap its own prompt... but that's a Future Direction*)\r\n\r\n*Not no code, not low code, but some third thing.* \r\n\r\nPerhaps a higher order evolution of programming where you still need to be technical, but no longer have to implement every detail at least to scaffold things out.\r\n\r\n## video demo\r\n\r\n[![https://i3.ytimg.com/vi/UCo7YeTy-aE/hqdefault.jpg](https://i3.ytimg.com/vi/UCo7YeTy-aE/hqdefault.jpg)](https://youtu.be/UCo7YeTy-aE)\r\n\r\n## arch diagram\r\n\r\nnaturally generated with gpt4, like [we did for babyagi](https://twitter.com/swyx/status/1648724820316786688)\r\n![image](https://github.com/smol-ai/developer/assets/6764957/f8fc68f4-77f6-43ee-852f-a35fb195430a)\r\n\r\n\r\n### innovations and insights\r\n\r\n> Please subscribe to https://latent.space/ for a fuller writeup and insights and reflections"", "".env\r\n__pycache__\r\n.vscode\r\n# Ignore everything in the generated directory\r\n/generated/*\r\n\r\n# Don't ignore .png files in the generated directory\r\n!/generated/*.png"", ""OPENAI_API_KEY=sk-xxxxxx\r\nANTHROPIC_API_KEY=sk-ant-api03-xxxxxx""]}",70,0.7084226608276367,2,What is the point of the .env file?
RUN_QUERY_RAG,"{""query"": ""What are the benefits of using a .env file in the smol-ai/developer repository?"", ""repo"": ""https://github.com/smol-ai/developer"", ""similar_documents"": [""# smol developer\r\n\r\n***Human-centric & Coherent Whole Program Synthesis*** aka your own personal junior developer\r\n\r\n> [Build the thing that builds the thing!](https://twitter.com/swyx/status/1657578738345979905) a `smol dev` for every dev in every situation\r\n\r\nthis is a prototype of a \""junior developer\"" agent (aka `smol dev`) that scaffolds an entire codebase out for you once you give it a product spec, but does not end the world or overpromise AGI. instead of making and maintaining specific, rigid, one-shot starters, like `create-react-app`, or `create-nextjs-app`, this is basically [`create-anything-app`](https://news.ycombinator.com/item?id=35942352) where you develop your scaffolding prompt in a tight loop with your smol dev.\r\n\r\nAI that is helpful, harmless, and honest is complemented by a codebase that is simple, safe, and smol - <200 lines of Python and Prompts, so this is easy to understand and customize.\r\n\r\n<p align=\""center\"">\r\n  <img height=200 src=\""https://pbs.twimg.com/media/FwEzVCcaMAE7t4h?format=jpg&name=large\"" />\r\n</p>\r\n\r\n\r\n*engineering with prompts, rather than prompt engineering* \r\n\r\nThe demo example in `prompt.md` shows the potential of AI-enabled, but still firmly human developer centric, workflow:\r\n\r\n- Human writes a basic prompt for the app they want to build\r\n- `main.py` generates code\r\n- Human runs/reads the code\r\n- Human can:\r\n  - simply add to the prompt as they discover underspecified parts of the prompt"", ""## install\r\n\r\nit's basically: \r\n\r\n- `git clone https://github.com/smol-ai/developer`.\r\n- copy over `.example.env` to `.env` filling in your API keys.\r\n\r\nThere are no python dependencies to wrangle thanks to using Modal as a [self-provisioning runtime](https://www.google.com/search?q=self+provisioning+runtime).\r\n\r\nUnfortunately this project also uses 3 waitlisted things:\r\n\r\n- Modal.com - `pip install modal-client` (private beta - hit up the modal team to get an invite, and login)\r\n  - You can run this project w/o Modal following these instructions:\r\n  - `pip install -r requirements.txt`\r\n  - `python main_no_modal.py YOUR_PROMPT_HERE`\r\n- GPT-4 api (private beta) - can use 3.5 but obviously wont be as good\r\n- (for the demo project) anthropic claude 100k context api (private beta)\r\n\r\n> yes, the most important skill in being an ai engineer is social engineering to get off waitlists. Modal will let you in if you say the keyword \""swyx\""\r\n\r\nyou'll have to adapt this code on a fork if you want to use it on other infra. please open issues/PRs and i'll happily highlight your fork here.\r\n\r\n### trying the example chrome extension"", ""- simply add to the prompt as they discover underspecified parts of the prompt\r\n  - manually runs the code and identifies errors\r\n  - *paste the error into the prompt* just like they would file a github issue\r\n  - for extra help, they can use `debugger.py` which reads the whole codebase to make specific code change suggestions\r\n\r\nLoop until happiness is attained. Notice that AI is only used as long as it is adding value - once it gets in your way, just take over the codebase from your smol junior developer with no fuss and no hurt feelings. (*we could also have smol-dev take over an existing codebase and bootstrap its own prompt... but that's a Future Direction*)\r\n\r\n*Not no code, not low code, but some third thing.* \r\n\r\nPerhaps a higher order evolution of programming where you still need to be technical, but no longer have to implement every detail at least to scaffold things out.\r\n\r\n## video demo\r\n\r\n[![https://i3.ytimg.com/vi/UCo7YeTy-aE/hqdefault.jpg](https://i3.ytimg.com/vi/UCo7YeTy-aE/hqdefault.jpg)](https://youtu.be/UCo7YeTy-aE)\r\n\r\n## arch diagram\r\n\r\nnaturally generated with gpt4, like [we did for babyagi](https://twitter.com/swyx/status/1648724820316786688)\r\n![image](https://github.com/smol-ai/developer/assets/6764957/f8fc68f4-77f6-43ee-852f-a35fb195430a)\r\n\r\n\r\n### innovations and insights\r\n\r\n> Please subscribe to https://latent.space/ for a fuller writeup and insights and reflections"", "".env\r\n__pycache__\r\n.vscode\r\n# Ignore everything in the generated directory\r\n/generated/*\r\n\r\n# Don't ignore .png files in the generated directory\r\n!/generated/*.png"", ""OPENAI_API_KEY=sk-xxxxxx\r\nANTHROPIC_API_KEY=sk-ant-api03-xxxxxx""]}","Using a .env file in the smol-ai/developer repository provides benefits such as allowing users to store API keys and other sensitive information securely. It also simplifies the installation process by not requiring any Python dependencies to be installed. However, the project currently relies on some private beta APIs and services, which may require users to be on a waitlist or have special access. Overall, using a .env file can improve security and ease of use for the smol-ai/developer repository.",11.838506698608398,2,What is the point of the .env file?
CONTEXT_VALIDATOR,"{""query"": ""Can my junior dev create a website?"", ""repo"": ""https://github.com/smol-ai/developer"", ""similar_documents"": [""# smol developer\r\n\r\n***Human-centric & Coherent Whole Program Synthesis*** aka your own personal junior developer\r\n\r\n> [Build the thing that builds the thing!](https://twitter.com/swyx/status/1657578738345979905) a `smol dev` for every dev in every situation\r\n\r\nthis is a prototype of a \""junior developer\"" agent (aka `smol dev`) that scaffolds an entire codebase out for you once you give it a product spec, but does not end the world or overpromise AGI. instead of making and maintaining specific, rigid, one-shot starters, like `create-react-app`, or `create-nextjs-app`, this is basically [`create-anything-app`](https://news.ycombinator.com/item?id=35942352) where you develop your scaffolding prompt in a tight loop with your smol dev.\r\n\r\nAI that is helpful, harmless, and honest is complemented by a codebase that is simple, safe, and smol - <200 lines of Python and Prompts, so this is easy to understand and customize.\r\n\r\n<p align=\""center\"">\r\n  <img height=200 src=\""https://pbs.twimg.com/media/FwEzVCcaMAE7t4h?format=jpg&name=large\"" />\r\n</p>\r\n\r\n\r\n*engineering with prompts, rather than prompt engineering* \r\n\r\nThe demo example in `prompt.md` shows the potential of AI-enabled, but still firmly human developer centric, workflow:\r\n\r\n- Human writes a basic prompt for the app they want to build\r\n- `main.py` generates code\r\n- Human runs/reads the code\r\n- Human can:\r\n  - simply add to the prompt as they discover underspecified parts of the prompt"", ""body {\r\n  font-family: Arial, sans-serif;\r\n  margin: 0;\r\n  padding: 15px;\r\n}\r\n\r\ntextarea, input {\r\n  display: block;\r\n  width: 100%;\r\n  margin-bottom: 10px;\r\n  padding: 5px;\r\n  font-size: 14px;\r\n}\r\n\r\nbutton {\r\n  background-color: #4CAF50;\r\n  border: none;\r\n  color: white;\r\n  padding: 10px 20px;\r\n  text-align: center;\r\n  text-decoration: none;\r\n  display: inline-block;\r\n  font-size: 14px;\r\n  margin: 10px 0;\r\n  cursor: pointer;\r\n}\r\n\r\nbutton:hover {\r\n  background-color: #45a049;\r\n}\r\n\r\n#content {\r\n  margin-top: 20px;\r\n  font-size: 14px;\r\n  line-height: 1.5;\r\n}\r\n\r\n#loadingIndicator {\r\n  display: none;\r\n  font-size: 14px;\r\n  color: #999;\r\n}"", ""<!DOCTYPE html>\r\n<html lang=\""en\"">\r\n<head>\r\n  <meta charset=\""UTF-8\"">\r\n  <meta name=\""viewport\"" content=\""width=device-width, initial-scale=1.0\"">\r\n  <title>Anthropic Summary</title>\r\n  <link rel=\""stylesheet\"" href=\""styles.css\"">\r\n</head>\r\n<body>\r\n  <div id=\""content\""></div>\r\n  <div id=\""loadingIndicator\""></div>\r\n  <textarea id=\""userPrompt\""></textarea>\r\n  <button id=\""sendButton\"">Submit</button>\r\n  <script src=\""popup.js\""></script>\r\n</body>\r\n</html>"", ""- simply add to the prompt as they discover underspecified parts of the prompt\r\n  - manually runs the code and identifies errors\r\n  - *paste the error into the prompt* just like they would file a github issue\r\n  - for extra help, they can use `debugger.py` which reads the whole codebase to make specific code change suggestions\r\n\r\nLoop until happiness is attained. Notice that AI is only used as long as it is adding value - once it gets in your way, just take over the codebase from your smol junior developer with no fuss and no hurt feelings. (*we could also have smol-dev take over an existing codebase and bootstrap its own prompt... but that's a Future Direction*)\r\n\r\n*Not no code, not low code, but some third thing.* \r\n\r\nPerhaps a higher order evolution of programming where you still need to be technical, but no longer have to implement every detail at least to scaffold things out.\r\n\r\n## video demo\r\n\r\n[![https://i3.ytimg.com/vi/UCo7YeTy-aE/hqdefault.jpg](https://i3.ytimg.com/vi/UCo7YeTy-aE/hqdefault.jpg)](https://youtu.be/UCo7YeTy-aE)\r\n\r\n## arch diagram\r\n\r\nnaturally generated with gpt4, like [we did for babyagi](https://twitter.com/swyx/status/1648724820316786688)\r\n![image](https://github.com/smol-ai/developer/assets/6764957/f8fc68f4-77f6-43ee-852f-a35fb195430a)\r\n\r\n\r\n### innovations and insights\r\n\r\n> Please subscribe to https://latent.space/ for a fuller writeup and insights and reflections"", ""body {\r\n  margin: 16px;\r\n  font-family: -apple-system, BlinkMacSystemFont, \""Segoe UI\"", Roboto, Helvetica, Arial, sans-serif, \""Apple Color Emoji\"", \""Segoe UI Emoji\"", \""Segoe UI Symbol\"";\r\n  min-width: 400px;\r\n  min-height: 600px;\r\n}\r\n\r\n#content {\r\n  margin-bottom: 16px;\r\n}\r\n\r\n#userPrompt {\r\n  width: 100%;\r\n  height: 80px;\r\n  resize: none;\r\n  margin-bottom: 8px;\r\n}\r\n\r\n#sendButton {\r\n  display: inline-block;\r\n  background-color: #007bff;\r\n  color: white;\r\n  padding: 8px 16px;\r\n  border-radius: 4px;\r\n  text-decoration: none;\r\n  cursor: pointer;\r\n  transition: background-color 0.2s;\r\n}\r\n\r\n#sendButton:hover {\r\n  background-color: #0056b3;\r\n}\r\n\r\n#sendButton:disabled {\r\n  background-color: #6c757d;\r\n  cursor: not-allowed;\r\n}\r\n\r\n#loadingIndicator {\r\n  display: none;\r\n  width: 100%;\r\n  height: 8rem;\r\n  border-radius: 1rem;\r\n  margin-bottom: 2rem;\r\n  background-image: linear-gradient(-45deg, #007bff 25%, transparent 25%, transparent 50%, #007bff 50%, #007bff 75%, transparent 75%, transparent);\r\n  background-size: 40px 40px;""]}",50,0.6199839115142822,0,Can my junior dev create a website?
UPGRADE_QUERY,"{""query"": ""Can my junior dev create a website?"", ""repo"": ""https://github.com/smol-ai/developer""}","1. What resources are available in the smol-ai/developer repository for a junior developer to create a website?
2. Can a junior developer with limited experience in web development use the smol-ai/developer repository to create a website?
3. How can a junior developer utilize the smol-ai/developer repository to create a website from scratch?
4. Are there any step-by-step guides or tutorials in the smol-ai/developer repository that can help a junior developer create a website?
5. What are the best practices for a junior developer to follow when using the smol-ai/developer repository to create a website?",15.277982711791992,0,Can my junior dev create a website?
CONTEXT_VALIDATOR,"{""query"": ""What resources are available in the smol-ai/developer repository for a junior developer to create a website?"", ""repo"": ""https://github.com/smol-ai/developer"", ""similar_documents"": [""# smol developer\r\n\r\n***Human-centric & Coherent Whole Program Synthesis*** aka your own personal junior developer\r\n\r\n> [Build the thing that builds the thing!](https://twitter.com/swyx/status/1657578738345979905) a `smol dev` for every dev in every situation\r\n\r\nthis is a prototype of a \""junior developer\"" agent (aka `smol dev`) that scaffolds an entire codebase out for you once you give it a product spec, but does not end the world or overpromise AGI. instead of making and maintaining specific, rigid, one-shot starters, like `create-react-app`, or `create-nextjs-app`, this is basically [`create-anything-app`](https://news.ycombinator.com/item?id=35942352) where you develop your scaffolding prompt in a tight loop with your smol dev.\r\n\r\nAI that is helpful, harmless, and honest is complemented by a codebase that is simple, safe, and smol - <200 lines of Python and Prompts, so this is easy to understand and customize.\r\n\r\n<p align=\""center\"">\r\n  <img height=200 src=\""https://pbs.twimg.com/media/FwEzVCcaMAE7t4h?format=jpg&name=large\"" />\r\n</p>\r\n\r\n\r\n*engineering with prompts, rather than prompt engineering* \r\n\r\nThe demo example in `prompt.md` shows the potential of AI-enabled, but still firmly human developer centric, workflow:\r\n\r\n- Human writes a basic prompt for the app they want to build\r\n- `main.py` generates code\r\n- Human runs/reads the code\r\n- Human can:\r\n  - simply add to the prompt as they discover underspecified parts of the prompt"", ""- simply add to the prompt as they discover underspecified parts of the prompt\r\n  - manually runs the code and identifies errors\r\n  - *paste the error into the prompt* just like they would file a github issue\r\n  - for extra help, they can use `debugger.py` which reads the whole codebase to make specific code change suggestions\r\n\r\nLoop until happiness is attained. Notice that AI is only used as long as it is adding value - once it gets in your way, just take over the codebase from your smol junior developer with no fuss and no hurt feelings. (*we could also have smol-dev take over an existing codebase and bootstrap its own prompt... but that's a Future Direction*)\r\n\r\n*Not no code, not low code, but some third thing.* \r\n\r\nPerhaps a higher order evolution of programming where you still need to be technical, but no longer have to implement every detail at least to scaffold things out.\r\n\r\n## video demo\r\n\r\n[![https://i3.ytimg.com/vi/UCo7YeTy-aE/hqdefault.jpg](https://i3.ytimg.com/vi/UCo7YeTy-aE/hqdefault.jpg)](https://youtu.be/UCo7YeTy-aE)\r\n\r\n## arch diagram\r\n\r\nnaturally generated with gpt4, like [we did for babyagi](https://twitter.com/swyx/status/1648724820316786688)\r\n![image](https://github.com/smol-ai/developer/assets/6764957/f8fc68f4-77f6-43ee-852f-a35fb195430a)\r\n\r\n\r\n### innovations and insights\r\n\r\n> Please subscribe to https://latent.space/ for a fuller writeup and insights and reflections"", ""modal-client\r\nopenai\r\ntiktoken"", ""## install\r\n\r\nit's basically: \r\n\r\n- `git clone https://github.com/smol-ai/developer`.\r\n- copy over `.example.env` to `.env` filling in your API keys.\r\n\r\nThere are no python dependencies to wrangle thanks to using Modal as a [self-provisioning runtime](https://www.google.com/search?q=self+provisioning+runtime).\r\n\r\nUnfortunately this project also uses 3 waitlisted things:\r\n\r\n- Modal.com - `pip install modal-client` (private beta - hit up the modal team to get an invite, and login)\r\n  - You can run this project w/o Modal following these instructions:\r\n  - `pip install -r requirements.txt`\r\n  - `python main_no_modal.py YOUR_PROMPT_HERE`\r\n- GPT-4 api (private beta) - can use 3.5 but obviously wont be as good\r\n- (for the demo project) anthropic claude 100k context api (private beta)\r\n\r\n> yes, the most important skill in being an ai engineer is social engineering to get off waitlists. Modal will let you in if you say the keyword \""swyx\""\r\n\r\nyou'll have to adapt this code on a fork if you want to use it on other infra. please open issues/PRs and i'll happily highlight your fork here.\r\n\r\n### trying the example chrome extension"", ""### trying the example chrome extension\r\n\r\nthe `/generated` and `/exampleChromeExtension` folder contains `a Chrome Manifest V3 extension that reads the current page, and offers a popup UI that has the page title+content and a textarea for a prompt (with a default value we specify). When the user hits submit, it sends the page title+content to the Anthropic Claude API along with the up to date prompt to summarize it. The user can modify that prompt and re-send the prompt+content to get another summary view of the content.`\r\n\r\n- go to Manage Extensions in Chrome\r\n- load unpacked\r\n- find the relevant folder in your file system and load it\r\n- go to any content heavy site\r\n- click the cute bird\r\n- see it work\r\n\r\nthis entire extension was generated by the prompt in `prompt.md` (except for the images), and was built up over time by adding more words to the prompt in an iterative process.\r\n\r\n## smol dev\r\n\r\nbasic usage\r\n\r\n```bash\r\nmodal run main.py --prompt \""a Chrome extension that, when clicked, opens a small window with a page where you can enter a prompt for reading the currently open page and generating some response from openai\""   \r\n```\r\n\r\nafter a while of adding to your prompt, you can extract your prompt to a file, as long as your \""prompt\"" ends in a .md extension we'll go look for that file\r\n\r\n```bash\r\nmodal run main.py --prompt prompt.md   \r\n```\r\n\r\neach time you run this, the generated directory is deleted (except for images) and all files are rewritten from scratch. \r\n\r\nIn the `shared_dependencies.md` file is a helper file that ensures coherence between files.""]}",50,0.5999746322631836,0,Can my junior dev create a website?
CONTEXT_VALIDATOR,"{""query"": ""Can a junior developer with limited experience in web development use the smol-ai/developer repository to create a website?"", ""repo"": ""https://github.com/smol-ai/developer"", ""similar_documents"": [""# smol developer\r\n\r\n***Human-centric & Coherent Whole Program Synthesis*** aka your own personal junior developer\r\n\r\n> [Build the thing that builds the thing!](https://twitter.com/swyx/status/1657578738345979905) a `smol dev` for every dev in every situation\r\n\r\nthis is a prototype of a \""junior developer\"" agent (aka `smol dev`) that scaffolds an entire codebase out for you once you give it a product spec, but does not end the world or overpromise AGI. instead of making and maintaining specific, rigid, one-shot starters, like `create-react-app`, or `create-nextjs-app`, this is basically [`create-anything-app`](https://news.ycombinator.com/item?id=35942352) where you develop your scaffolding prompt in a tight loop with your smol dev.\r\n\r\nAI that is helpful, harmless, and honest is complemented by a codebase that is simple, safe, and smol - <200 lines of Python and Prompts, so this is easy to understand and customize.\r\n\r\n<p align=\""center\"">\r\n  <img height=200 src=\""https://pbs.twimg.com/media/FwEzVCcaMAE7t4h?format=jpg&name=large\"" />\r\n</p>\r\n\r\n\r\n*engineering with prompts, rather than prompt engineering* \r\n\r\nThe demo example in `prompt.md` shows the potential of AI-enabled, but still firmly human developer centric, workflow:\r\n\r\n- Human writes a basic prompt for the app they want to build\r\n- `main.py` generates code\r\n- Human runs/reads the code\r\n- Human can:\r\n  - simply add to the prompt as they discover underspecified parts of the prompt"", ""- simply add to the prompt as they discover underspecified parts of the prompt\r\n  - manually runs the code and identifies errors\r\n  - *paste the error into the prompt* just like they would file a github issue\r\n  - for extra help, they can use `debugger.py` which reads the whole codebase to make specific code change suggestions\r\n\r\nLoop until happiness is attained. Notice that AI is only used as long as it is adding value - once it gets in your way, just take over the codebase from your smol junior developer with no fuss and no hurt feelings. (*we could also have smol-dev take over an existing codebase and bootstrap its own prompt... but that's a Future Direction*)\r\n\r\n*Not no code, not low code, but some third thing.* \r\n\r\nPerhaps a higher order evolution of programming where you still need to be technical, but no longer have to implement every detail at least to scaffold things out.\r\n\r\n## video demo\r\n\r\n[![https://i3.ytimg.com/vi/UCo7YeTy-aE/hqdefault.jpg](https://i3.ytimg.com/vi/UCo7YeTy-aE/hqdefault.jpg)](https://youtu.be/UCo7YeTy-aE)\r\n\r\n## arch diagram\r\n\r\nnaturally generated with gpt4, like [we did for babyagi](https://twitter.com/swyx/status/1648724820316786688)\r\n![image](https://github.com/smol-ai/developer/assets/6764957/f8fc68f4-77f6-43ee-852f-a35fb195430a)\r\n\r\n\r\n### innovations and insights\r\n\r\n> Please subscribe to https://latent.space/ for a fuller writeup and insights and reflections"", ""## install\r\n\r\nit's basically: \r\n\r\n- `git clone https://github.com/smol-ai/developer`.\r\n- copy over `.example.env` to `.env` filling in your API keys.\r\n\r\nThere are no python dependencies to wrangle thanks to using Modal as a [self-provisioning runtime](https://www.google.com/search?q=self+provisioning+runtime).\r\n\r\nUnfortunately this project also uses 3 waitlisted things:\r\n\r\n- Modal.com - `pip install modal-client` (private beta - hit up the modal team to get an invite, and login)\r\n  - You can run this project w/o Modal following these instructions:\r\n  - `pip install -r requirements.txt`\r\n  - `python main_no_modal.py YOUR_PROMPT_HERE`\r\n- GPT-4 api (private beta) - can use 3.5 but obviously wont be as good\r\n- (for the demo project) anthropic claude 100k context api (private beta)\r\n\r\n> yes, the most important skill in being an ai engineer is social engineering to get off waitlists. Modal will let you in if you say the keyword \""swyx\""\r\n\r\nyou'll have to adapt this code on a fork if you want to use it on other infra. please open issues/PRs and i'll happily highlight your fork here.\r\n\r\n### trying the example chrome extension"", ""modal-client\r\nopenai\r\ntiktoken"", ""- **ability to install its own dependencies**\r\n  - this leaks into depending on the execution environment, which we all know is the path to dependency madness. how to avoid? dockerize? nix? [web container](https://twitter.com/litbid/status/1658154530385670150)?\r\n  - Modal has an interesting possibility: generate functions that speak modal which also solves the dependency thing https://twitter.com/akshat_b/status/1658146096902811657\r\n- **self-heal** by running the code itself and use errors as information for reprompting \r\n  - however its a bit hard to get errors from the chrome extension environment so we did not try this\r\n- **using anthropic as the coding layer**\r\n  - you can run `modal run anthropic.py --prompt prompt.md --outputdir=anthropic` to try it\r\n  - but it doesnt work because anthropic doesnt follow instructions to generate file code very well.\r\n- **make agents that autonomously run this code in a loop/watch the prompt file** and regenerate code each time, on a new git branch\r\n  - the code could be generated on 5 simultaneous git branches and checking their output would just involve switching git branches""]}",50,0.578740119934082,0,Can my junior dev create a website?
CONTEXT_VALIDATOR,"{""query"": ""How can a junior developer utilize the smol-ai/developer repository to create a website from scratch?"", ""repo"": ""https://github.com/smol-ai/developer"", ""similar_documents"": [""# smol developer\r\n\r\n***Human-centric & Coherent Whole Program Synthesis*** aka your own personal junior developer\r\n\r\n> [Build the thing that builds the thing!](https://twitter.com/swyx/status/1657578738345979905) a `smol dev` for every dev in every situation\r\n\r\nthis is a prototype of a \""junior developer\"" agent (aka `smol dev`) that scaffolds an entire codebase out for you once you give it a product spec, but does not end the world or overpromise AGI. instead of making and maintaining specific, rigid, one-shot starters, like `create-react-app`, or `create-nextjs-app`, this is basically [`create-anything-app`](https://news.ycombinator.com/item?id=35942352) where you develop your scaffolding prompt in a tight loop with your smol dev.\r\n\r\nAI that is helpful, harmless, and honest is complemented by a codebase that is simple, safe, and smol - <200 lines of Python and Prompts, so this is easy to understand and customize.\r\n\r\n<p align=\""center\"">\r\n  <img height=200 src=\""https://pbs.twimg.com/media/FwEzVCcaMAE7t4h?format=jpg&name=large\"" />\r\n</p>\r\n\r\n\r\n*engineering with prompts, rather than prompt engineering* \r\n\r\nThe demo example in `prompt.md` shows the potential of AI-enabled, but still firmly human developer centric, workflow:\r\n\r\n- Human writes a basic prompt for the app they want to build\r\n- `main.py` generates code\r\n- Human runs/reads the code\r\n- Human can:\r\n  - simply add to the prompt as they discover underspecified parts of the prompt"", ""- simply add to the prompt as they discover underspecified parts of the prompt\r\n  - manually runs the code and identifies errors\r\n  - *paste the error into the prompt* just like they would file a github issue\r\n  - for extra help, they can use `debugger.py` which reads the whole codebase to make specific code change suggestions\r\n\r\nLoop until happiness is attained. Notice that AI is only used as long as it is adding value - once it gets in your way, just take over the codebase from your smol junior developer with no fuss and no hurt feelings. (*we could also have smol-dev take over an existing codebase and bootstrap its own prompt... but that's a Future Direction*)\r\n\r\n*Not no code, not low code, but some third thing.* \r\n\r\nPerhaps a higher order evolution of programming where you still need to be technical, but no longer have to implement every detail at least to scaffold things out.\r\n\r\n## video demo\r\n\r\n[![https://i3.ytimg.com/vi/UCo7YeTy-aE/hqdefault.jpg](https://i3.ytimg.com/vi/UCo7YeTy-aE/hqdefault.jpg)](https://youtu.be/UCo7YeTy-aE)\r\n\r\n## arch diagram\r\n\r\nnaturally generated with gpt4, like [we did for babyagi](https://twitter.com/swyx/status/1648724820316786688)\r\n![image](https://github.com/smol-ai/developer/assets/6764957/f8fc68f4-77f6-43ee-852f-a35fb195430a)\r\n\r\n\r\n### innovations and insights\r\n\r\n> Please subscribe to https://latent.space/ for a fuller writeup and insights and reflections"", ""## install\r\n\r\nit's basically: \r\n\r\n- `git clone https://github.com/smol-ai/developer`.\r\n- copy over `.example.env` to `.env` filling in your API keys.\r\n\r\nThere are no python dependencies to wrangle thanks to using Modal as a [self-provisioning runtime](https://www.google.com/search?q=self+provisioning+runtime).\r\n\r\nUnfortunately this project also uses 3 waitlisted things:\r\n\r\n- Modal.com - `pip install modal-client` (private beta - hit up the modal team to get an invite, and login)\r\n  - You can run this project w/o Modal following these instructions:\r\n  - `pip install -r requirements.txt`\r\n  - `python main_no_modal.py YOUR_PROMPT_HERE`\r\n- GPT-4 api (private beta) - can use 3.5 but obviously wont be as good\r\n- (for the demo project) anthropic claude 100k context api (private beta)\r\n\r\n> yes, the most important skill in being an ai engineer is social engineering to get off waitlists. Modal will let you in if you say the keyword \""swyx\""\r\n\r\nyou'll have to adapt this code on a fork if you want to use it on other infra. please open issues/PRs and i'll happily highlight your fork here.\r\n\r\n### trying the example chrome extension"", ""### trying the example chrome extension\r\n\r\nthe `/generated` and `/exampleChromeExtension` folder contains `a Chrome Manifest V3 extension that reads the current page, and offers a popup UI that has the page title+content and a textarea for a prompt (with a default value we specify). When the user hits submit, it sends the page title+content to the Anthropic Claude API along with the up to date prompt to summarize it. The user can modify that prompt and re-send the prompt+content to get another summary view of the content.`\r\n\r\n- go to Manage Extensions in Chrome\r\n- load unpacked\r\n- find the relevant folder in your file system and load it\r\n- go to any content heavy site\r\n- click the cute bird\r\n- see it work\r\n\r\nthis entire extension was generated by the prompt in `prompt.md` (except for the images), and was built up over time by adding more words to the prompt in an iterative process.\r\n\r\n## smol dev\r\n\r\nbasic usage\r\n\r\n```bash\r\nmodal run main.py --prompt \""a Chrome extension that, when clicked, opens a small window with a page where you can enter a prompt for reading the currently open page and generating some response from openai\""   \r\n```\r\n\r\nafter a while of adding to your prompt, you can extract your prompt to a file, as long as your \""prompt\"" ends in a .md extension we'll go look for that file\r\n\r\n```bash\r\nmodal run main.py --prompt prompt.md   \r\n```\r\n\r\neach time you run this, the generated directory is deleted (except for images) and all files are rewritten from scratch. \r\n\r\nIn the `shared_dependencies.md` file is a helper file that ensures coherence between files."", ""- **ability to install its own dependencies**\r\n  - this leaks into depending on the execution environment, which we all know is the path to dependency madness. how to avoid? dockerize? nix? [web container](https://twitter.com/litbid/status/1658154530385670150)?\r\n  - Modal has an interesting possibility: generate functions that speak modal which also solves the dependency thing https://twitter.com/akshat_b/status/1658146096902811657\r\n- **self-heal** by running the code itself and use errors as information for reprompting \r\n  - however its a bit hard to get errors from the chrome extension environment so we did not try this\r\n- **using anthropic as the coding layer**\r\n  - you can run `modal run anthropic.py --prompt prompt.md --outputdir=anthropic` to try it\r\n  - but it doesnt work because anthropic doesnt follow instructions to generate file code very well.\r\n- **make agents that autonomously run this code in a loop/watch the prompt file** and regenerate code each time, on a new git branch\r\n  - the code could be generated on 5 simultaneous git branches and checking their output would just involve switching git branches""]}",50,0.6642634868621826,0,Can my junior dev create a website?
CONTEXT_VALIDATOR,"{""query"": ""Are there any step-by-step guides or tutorials in the smol-ai/developer repository that can help a junior developer create a website?"", ""repo"": ""https://github.com/smol-ai/developer"", ""similar_documents"": [""# smol developer\r\n\r\n***Human-centric & Coherent Whole Program Synthesis*** aka your own personal junior developer\r\n\r\n> [Build the thing that builds the thing!](https://twitter.com/swyx/status/1657578738345979905) a `smol dev` for every dev in every situation\r\n\r\nthis is a prototype of a \""junior developer\"" agent (aka `smol dev`) that scaffolds an entire codebase out for you once you give it a product spec, but does not end the world or overpromise AGI. instead of making and maintaining specific, rigid, one-shot starters, like `create-react-app`, or `create-nextjs-app`, this is basically [`create-anything-app`](https://news.ycombinator.com/item?id=35942352) where you develop your scaffolding prompt in a tight loop with your smol dev.\r\n\r\nAI that is helpful, harmless, and honest is complemented by a codebase that is simple, safe, and smol - <200 lines of Python and Prompts, so this is easy to understand and customize.\r\n\r\n<p align=\""center\"">\r\n  <img height=200 src=\""https://pbs.twimg.com/media/FwEzVCcaMAE7t4h?format=jpg&name=large\"" />\r\n</p>\r\n\r\n\r\n*engineering with prompts, rather than prompt engineering* \r\n\r\nThe demo example in `prompt.md` shows the potential of AI-enabled, but still firmly human developer centric, workflow:\r\n\r\n- Human writes a basic prompt for the app they want to build\r\n- `main.py` generates code\r\n- Human runs/reads the code\r\n- Human can:\r\n  - simply add to the prompt as they discover underspecified parts of the prompt"", ""- simply add to the prompt as they discover underspecified parts of the prompt\r\n  - manually runs the code and identifies errors\r\n  - *paste the error into the prompt* just like they would file a github issue\r\n  - for extra help, they can use `debugger.py` which reads the whole codebase to make specific code change suggestions\r\n\r\nLoop until happiness is attained. Notice that AI is only used as long as it is adding value - once it gets in your way, just take over the codebase from your smol junior developer with no fuss and no hurt feelings. (*we could also have smol-dev take over an existing codebase and bootstrap its own prompt... but that's a Future Direction*)\r\n\r\n*Not no code, not low code, but some third thing.* \r\n\r\nPerhaps a higher order evolution of programming where you still need to be technical, but no longer have to implement every detail at least to scaffold things out.\r\n\r\n## video demo\r\n\r\n[![https://i3.ytimg.com/vi/UCo7YeTy-aE/hqdefault.jpg](https://i3.ytimg.com/vi/UCo7YeTy-aE/hqdefault.jpg)](https://youtu.be/UCo7YeTy-aE)\r\n\r\n## arch diagram\r\n\r\nnaturally generated with gpt4, like [we did for babyagi](https://twitter.com/swyx/status/1648724820316786688)\r\n![image](https://github.com/smol-ai/developer/assets/6764957/f8fc68f4-77f6-43ee-852f-a35fb195430a)\r\n\r\n\r\n### innovations and insights\r\n\r\n> Please subscribe to https://latent.space/ for a fuller writeup and insights and reflections"", ""## install\r\n\r\nit's basically: \r\n\r\n- `git clone https://github.com/smol-ai/developer`.\r\n- copy over `.example.env` to `.env` filling in your API keys.\r\n\r\nThere are no python dependencies to wrangle thanks to using Modal as a [self-provisioning runtime](https://www.google.com/search?q=self+provisioning+runtime).\r\n\r\nUnfortunately this project also uses 3 waitlisted things:\r\n\r\n- Modal.com - `pip install modal-client` (private beta - hit up the modal team to get an invite, and login)\r\n  - You can run this project w/o Modal following these instructions:\r\n  - `pip install -r requirements.txt`\r\n  - `python main_no_modal.py YOUR_PROMPT_HERE`\r\n- GPT-4 api (private beta) - can use 3.5 but obviously wont be as good\r\n- (for the demo project) anthropic claude 100k context api (private beta)\r\n\r\n> yes, the most important skill in being an ai engineer is social engineering to get off waitlists. Modal will let you in if you say the keyword \""swyx\""\r\n\r\nyou'll have to adapt this code on a fork if you want to use it on other infra. please open issues/PRs and i'll happily highlight your fork here.\r\n\r\n### trying the example chrome extension"", ""modal-client\r\nopenai\r\ntiktoken"", ""### trying the example chrome extension\r\n\r\nthe `/generated` and `/exampleChromeExtension` folder contains `a Chrome Manifest V3 extension that reads the current page, and offers a popup UI that has the page title+content and a textarea for a prompt (with a default value we specify). When the user hits submit, it sends the page title+content to the Anthropic Claude API along with the up to date prompt to summarize it. The user can modify that prompt and re-send the prompt+content to get another summary view of the content.`\r\n\r\n- go to Manage Extensions in Chrome\r\n- load unpacked\r\n- find the relevant folder in your file system and load it\r\n- go to any content heavy site\r\n- click the cute bird\r\n- see it work\r\n\r\nthis entire extension was generated by the prompt in `prompt.md` (except for the images), and was built up over time by adding more words to the prompt in an iterative process.\r\n\r\n## smol dev\r\n\r\nbasic usage\r\n\r\n```bash\r\nmodal run main.py --prompt \""a Chrome extension that, when clicked, opens a small window with a page where you can enter a prompt for reading the currently open page and generating some response from openai\""   \r\n```\r\n\r\nafter a while of adding to your prompt, you can extract your prompt to a file, as long as your \""prompt\"" ends in a .md extension we'll go look for that file\r\n\r\n```bash\r\nmodal run main.py --prompt prompt.md   \r\n```\r\n\r\neach time you run this, the generated directory is deleted (except for images) and all files are rewritten from scratch. \r\n\r\nIn the `shared_dependencies.md` file is a helper file that ensures coherence between files.""]}",50,0.6940968036651611,0,Can my junior dev create a website?
CONTEXT_VALIDATOR,"{""query"": ""What are the best practices for a junior developer to follow when using the smol-ai/developer repository to create a website?"", ""repo"": ""https://github.com/smol-ai/developer"", ""similar_documents"": [""# smol developer\r\n\r\n***Human-centric & Coherent Whole Program Synthesis*** aka your own personal junior developer\r\n\r\n> [Build the thing that builds the thing!](https://twitter.com/swyx/status/1657578738345979905) a `smol dev` for every dev in every situation\r\n\r\nthis is a prototype of a \""junior developer\"" agent (aka `smol dev`) that scaffolds an entire codebase out for you once you give it a product spec, but does not end the world or overpromise AGI. instead of making and maintaining specific, rigid, one-shot starters, like `create-react-app`, or `create-nextjs-app`, this is basically [`create-anything-app`](https://news.ycombinator.com/item?id=35942352) where you develop your scaffolding prompt in a tight loop with your smol dev.\r\n\r\nAI that is helpful, harmless, and honest is complemented by a codebase that is simple, safe, and smol - <200 lines of Python and Prompts, so this is easy to understand and customize.\r\n\r\n<p align=\""center\"">\r\n  <img height=200 src=\""https://pbs.twimg.com/media/FwEzVCcaMAE7t4h?format=jpg&name=large\"" />\r\n</p>\r\n\r\n\r\n*engineering with prompts, rather than prompt engineering* \r\n\r\nThe demo example in `prompt.md` shows the potential of AI-enabled, but still firmly human developer centric, workflow:\r\n\r\n- Human writes a basic prompt for the app they want to build\r\n- `main.py` generates code\r\n- Human runs/reads the code\r\n- Human can:\r\n  - simply add to the prompt as they discover underspecified parts of the prompt"", ""- simply add to the prompt as they discover underspecified parts of the prompt\r\n  - manually runs the code and identifies errors\r\n  - *paste the error into the prompt* just like they would file a github issue\r\n  - for extra help, they can use `debugger.py` which reads the whole codebase to make specific code change suggestions\r\n\r\nLoop until happiness is attained. Notice that AI is only used as long as it is adding value - once it gets in your way, just take over the codebase from your smol junior developer with no fuss and no hurt feelings. (*we could also have smol-dev take over an existing codebase and bootstrap its own prompt... but that's a Future Direction*)\r\n\r\n*Not no code, not low code, but some third thing.* \r\n\r\nPerhaps a higher order evolution of programming where you still need to be technical, but no longer have to implement every detail at least to scaffold things out.\r\n\r\n## video demo\r\n\r\n[![https://i3.ytimg.com/vi/UCo7YeTy-aE/hqdefault.jpg](https://i3.ytimg.com/vi/UCo7YeTy-aE/hqdefault.jpg)](https://youtu.be/UCo7YeTy-aE)\r\n\r\n## arch diagram\r\n\r\nnaturally generated with gpt4, like [we did for babyagi](https://twitter.com/swyx/status/1648724820316786688)\r\n![image](https://github.com/smol-ai/developer/assets/6764957/f8fc68f4-77f6-43ee-852f-a35fb195430a)\r\n\r\n\r\n### innovations and insights\r\n\r\n> Please subscribe to https://latent.space/ for a fuller writeup and insights and reflections"", ""## install\r\n\r\nit's basically: \r\n\r\n- `git clone https://github.com/smol-ai/developer`.\r\n- copy over `.example.env` to `.env` filling in your API keys.\r\n\r\nThere are no python dependencies to wrangle thanks to using Modal as a [self-provisioning runtime](https://www.google.com/search?q=self+provisioning+runtime).\r\n\r\nUnfortunately this project also uses 3 waitlisted things:\r\n\r\n- Modal.com - `pip install modal-client` (private beta - hit up the modal team to get an invite, and login)\r\n  - You can run this project w/o Modal following these instructions:\r\n  - `pip install -r requirements.txt`\r\n  - `python main_no_modal.py YOUR_PROMPT_HERE`\r\n- GPT-4 api (private beta) - can use 3.5 but obviously wont be as good\r\n- (for the demo project) anthropic claude 100k context api (private beta)\r\n\r\n> yes, the most important skill in being an ai engineer is social engineering to get off waitlists. Modal will let you in if you say the keyword \""swyx\""\r\n\r\nyou'll have to adapt this code on a fork if you want to use it on other infra. please open issues/PRs and i'll happily highlight your fork here.\r\n\r\n### trying the example chrome extension"", ""modal-client\r\nopenai\r\ntiktoken"", ""- **ability to install its own dependencies**\r\n  - this leaks into depending on the execution environment, which we all know is the path to dependency madness. how to avoid? dockerize? nix? [web container](https://twitter.com/litbid/status/1658154530385670150)?\r\n  - Modal has an interesting possibility: generate functions that speak modal which also solves the dependency thing https://twitter.com/akshat_b/status/1658146096902811657\r\n- **self-heal** by running the code itself and use errors as information for reprompting \r\n  - however its a bit hard to get errors from the chrome extension environment so we did not try this\r\n- **using anthropic as the coding layer**\r\n  - you can run `modal run anthropic.py --prompt prompt.md --outputdir=anthropic` to try it\r\n  - but it doesnt work because anthropic doesnt follow instructions to generate file code very well.\r\n- **make agents that autonomously run this code in a loop/watch the prompt file** and regenerate code each time, on a new git branch\r\n  - the code could be generated on 5 simultaneous git branches and checking their output would just involve switching git branches""]}",50,0.7100098133087158,0,Can my junior dev create a website?
UPGRADE_QUERY,"{""query"": ""Can my junior dev create a website?"", ""repo"": ""https://github.com/smol-ai/developer""}","1. What resources are available in the smol-ai/developer repository to help a junior developer create a website?
2. Are there any tutorials or guides in the smol-ai/developer repository that can assist a junior developer in building a website?
3. Can a junior developer with limited experience use the smol-ai/developer repository to create a website?
4. How can a junior developer leverage the smol-ai/developer repository to build a website efficiently?
5. What are the best practices for a junior developer to follow when using the smol-ai/developer repository to create a website?",11.576887369155884,0,Can my junior dev create a website?
CONTEXT_VALIDATOR,"{""query"": ""What resources are available in the smol-ai/developer repository to help a junior developer create a website?"", ""repo"": ""https://github.com/smol-ai/developer"", ""similar_documents"": [""# smol developer\r\n\r\n***Human-centric & Coherent Whole Program Synthesis*** aka your own personal junior developer\r\n\r\n> [Build the thing that builds the thing!](https://twitter.com/swyx/status/1657578738345979905) a `smol dev` for every dev in every situation\r\n\r\nthis is a prototype of a \""junior developer\"" agent (aka `smol dev`) that scaffolds an entire codebase out for you once you give it a product spec, but does not end the world or overpromise AGI. instead of making and maintaining specific, rigid, one-shot starters, like `create-react-app`, or `create-nextjs-app`, this is basically [`create-anything-app`](https://news.ycombinator.com/item?id=35942352) where you develop your scaffolding prompt in a tight loop with your smol dev.\r\n\r\nAI that is helpful, harmless, and honest is complemented by a codebase that is simple, safe, and smol - <200 lines of Python and Prompts, so this is easy to understand and customize.\r\n\r\n<p align=\""center\"">\r\n  <img height=200 src=\""https://pbs.twimg.com/media/FwEzVCcaMAE7t4h?format=jpg&name=large\"" />\r\n</p>\r\n\r\n\r\n*engineering with prompts, rather than prompt engineering* \r\n\r\nThe demo example in `prompt.md` shows the potential of AI-enabled, but still firmly human developer centric, workflow:\r\n\r\n- Human writes a basic prompt for the app they want to build\r\n- `main.py` generates code\r\n- Human runs/reads the code\r\n- Human can:\r\n  - simply add to the prompt as they discover underspecified parts of the prompt"", ""- simply add to the prompt as they discover underspecified parts of the prompt\r\n  - manually runs the code and identifies errors\r\n  - *paste the error into the prompt* just like they would file a github issue\r\n  - for extra help, they can use `debugger.py` which reads the whole codebase to make specific code change suggestions\r\n\r\nLoop until happiness is attained. Notice that AI is only used as long as it is adding value - once it gets in your way, just take over the codebase from your smol junior developer with no fuss and no hurt feelings. (*we could also have smol-dev take over an existing codebase and bootstrap its own prompt... but that's a Future Direction*)\r\n\r\n*Not no code, not low code, but some third thing.* \r\n\r\nPerhaps a higher order evolution of programming where you still need to be technical, but no longer have to implement every detail at least to scaffold things out.\r\n\r\n## video demo\r\n\r\n[![https://i3.ytimg.com/vi/UCo7YeTy-aE/hqdefault.jpg](https://i3.ytimg.com/vi/UCo7YeTy-aE/hqdefault.jpg)](https://youtu.be/UCo7YeTy-aE)\r\n\r\n## arch diagram\r\n\r\nnaturally generated with gpt4, like [we did for babyagi](https://twitter.com/swyx/status/1648724820316786688)\r\n![image](https://github.com/smol-ai/developer/assets/6764957/f8fc68f4-77f6-43ee-852f-a35fb195430a)\r\n\r\n\r\n### innovations and insights\r\n\r\n> Please subscribe to https://latent.space/ for a fuller writeup and insights and reflections"", ""modal-client\r\nopenai\r\ntiktoken"", ""## install\r\n\r\nit's basically: \r\n\r\n- `git clone https://github.com/smol-ai/developer`.\r\n- copy over `.example.env` to `.env` filling in your API keys.\r\n\r\nThere are no python dependencies to wrangle thanks to using Modal as a [self-provisioning runtime](https://www.google.com/search?q=self+provisioning+runtime).\r\n\r\nUnfortunately this project also uses 3 waitlisted things:\r\n\r\n- Modal.com - `pip install modal-client` (private beta - hit up the modal team to get an invite, and login)\r\n  - You can run this project w/o Modal following these instructions:\r\n  - `pip install -r requirements.txt`\r\n  - `python main_no_modal.py YOUR_PROMPT_HERE`\r\n- GPT-4 api (private beta) - can use 3.5 but obviously wont be as good\r\n- (for the demo project) anthropic claude 100k context api (private beta)\r\n\r\n> yes, the most important skill in being an ai engineer is social engineering to get off waitlists. Modal will let you in if you say the keyword \""swyx\""\r\n\r\nyou'll have to adapt this code on a fork if you want to use it on other infra. please open issues/PRs and i'll happily highlight your fork here.\r\n\r\n### trying the example chrome extension"", ""### trying the example chrome extension\r\n\r\nthe `/generated` and `/exampleChromeExtension` folder contains `a Chrome Manifest V3 extension that reads the current page, and offers a popup UI that has the page title+content and a textarea for a prompt (with a default value we specify). When the user hits submit, it sends the page title+content to the Anthropic Claude API along with the up to date prompt to summarize it. The user can modify that prompt and re-send the prompt+content to get another summary view of the content.`\r\n\r\n- go to Manage Extensions in Chrome\r\n- load unpacked\r\n- find the relevant folder in your file system and load it\r\n- go to any content heavy site\r\n- click the cute bird\r\n- see it work\r\n\r\nthis entire extension was generated by the prompt in `prompt.md` (except for the images), and was built up over time by adding more words to the prompt in an iterative process.\r\n\r\n## smol dev\r\n\r\nbasic usage\r\n\r\n```bash\r\nmodal run main.py --prompt \""a Chrome extension that, when clicked, opens a small window with a page where you can enter a prompt for reading the currently open page and generating some response from openai\""   \r\n```\r\n\r\nafter a while of adding to your prompt, you can extract your prompt to a file, as long as your \""prompt\"" ends in a .md extension we'll go look for that file\r\n\r\n```bash\r\nmodal run main.py --prompt prompt.md   \r\n```\r\n\r\neach time you run this, the generated directory is deleted (except for images) and all files are rewritten from scratch. \r\n\r\nIn the `shared_dependencies.md` file is a helper file that ensures coherence between files.""]}",50,0.5472679138183594,0,Can my junior dev create a website?
CONTEXT_VALIDATOR,"{""query"": ""Are there any tutorials or guides in the smol-ai/developer repository that can assist a junior developer in building a website?"", ""repo"": ""https://github.com/smol-ai/developer"", ""similar_documents"": [""# smol developer\r\n\r\n***Human-centric & Coherent Whole Program Synthesis*** aka your own personal junior developer\r\n\r\n> [Build the thing that builds the thing!](https://twitter.com/swyx/status/1657578738345979905) a `smol dev` for every dev in every situation\r\n\r\nthis is a prototype of a \""junior developer\"" agent (aka `smol dev`) that scaffolds an entire codebase out for you once you give it a product spec, but does not end the world or overpromise AGI. instead of making and maintaining specific, rigid, one-shot starters, like `create-react-app`, or `create-nextjs-app`, this is basically [`create-anything-app`](https://news.ycombinator.com/item?id=35942352) where you develop your scaffolding prompt in a tight loop with your smol dev.\r\n\r\nAI that is helpful, harmless, and honest is complemented by a codebase that is simple, safe, and smol - <200 lines of Python and Prompts, so this is easy to understand and customize.\r\n\r\n<p align=\""center\"">\r\n  <img height=200 src=\""https://pbs.twimg.com/media/FwEzVCcaMAE7t4h?format=jpg&name=large\"" />\r\n</p>\r\n\r\n\r\n*engineering with prompts, rather than prompt engineering* \r\n\r\nThe demo example in `prompt.md` shows the potential of AI-enabled, but still firmly human developer centric, workflow:\r\n\r\n- Human writes a basic prompt for the app they want to build\r\n- `main.py` generates code\r\n- Human runs/reads the code\r\n- Human can:\r\n  - simply add to the prompt as they discover underspecified parts of the prompt"", ""- simply add to the prompt as they discover underspecified parts of the prompt\r\n  - manually runs the code and identifies errors\r\n  - *paste the error into the prompt* just like they would file a github issue\r\n  - for extra help, they can use `debugger.py` which reads the whole codebase to make specific code change suggestions\r\n\r\nLoop until happiness is attained. Notice that AI is only used as long as it is adding value - once it gets in your way, just take over the codebase from your smol junior developer with no fuss and no hurt feelings. (*we could also have smol-dev take over an existing codebase and bootstrap its own prompt... but that's a Future Direction*)\r\n\r\n*Not no code, not low code, but some third thing.* \r\n\r\nPerhaps a higher order evolution of programming where you still need to be technical, but no longer have to implement every detail at least to scaffold things out.\r\n\r\n## video demo\r\n\r\n[![https://i3.ytimg.com/vi/UCo7YeTy-aE/hqdefault.jpg](https://i3.ytimg.com/vi/UCo7YeTy-aE/hqdefault.jpg)](https://youtu.be/UCo7YeTy-aE)\r\n\r\n## arch diagram\r\n\r\nnaturally generated with gpt4, like [we did for babyagi](https://twitter.com/swyx/status/1648724820316786688)\r\n![image](https://github.com/smol-ai/developer/assets/6764957/f8fc68f4-77f6-43ee-852f-a35fb195430a)\r\n\r\n\r\n### innovations and insights\r\n\r\n> Please subscribe to https://latent.space/ for a fuller writeup and insights and reflections"", ""## install\r\n\r\nit's basically: \r\n\r\n- `git clone https://github.com/smol-ai/developer`.\r\n- copy over `.example.env` to `.env` filling in your API keys.\r\n\r\nThere are no python dependencies to wrangle thanks to using Modal as a [self-provisioning runtime](https://www.google.com/search?q=self+provisioning+runtime).\r\n\r\nUnfortunately this project also uses 3 waitlisted things:\r\n\r\n- Modal.com - `pip install modal-client` (private beta - hit up the modal team to get an invite, and login)\r\n  - You can run this project w/o Modal following these instructions:\r\n  - `pip install -r requirements.txt`\r\n  - `python main_no_modal.py YOUR_PROMPT_HERE`\r\n- GPT-4 api (private beta) - can use 3.5 but obviously wont be as good\r\n- (for the demo project) anthropic claude 100k context api (private beta)\r\n\r\n> yes, the most important skill in being an ai engineer is social engineering to get off waitlists. Modal will let you in if you say the keyword \""swyx\""\r\n\r\nyou'll have to adapt this code on a fork if you want to use it on other infra. please open issues/PRs and i'll happily highlight your fork here.\r\n\r\n### trying the example chrome extension"", ""modal-client\r\nopenai\r\ntiktoken"", ""### trying the example chrome extension\r\n\r\nthe `/generated` and `/exampleChromeExtension` folder contains `a Chrome Manifest V3 extension that reads the current page, and offers a popup UI that has the page title+content and a textarea for a prompt (with a default value we specify). When the user hits submit, it sends the page title+content to the Anthropic Claude API along with the up to date prompt to summarize it. The user can modify that prompt and re-send the prompt+content to get another summary view of the content.`\r\n\r\n- go to Manage Extensions in Chrome\r\n- load unpacked\r\n- find the relevant folder in your file system and load it\r\n- go to any content heavy site\r\n- click the cute bird\r\n- see it work\r\n\r\nthis entire extension was generated by the prompt in `prompt.md` (except for the images), and was built up over time by adding more words to the prompt in an iterative process.\r\n\r\n## smol dev\r\n\r\nbasic usage\r\n\r\n```bash\r\nmodal run main.py --prompt \""a Chrome extension that, when clicked, opens a small window with a page where you can enter a prompt for reading the currently open page and generating some response from openai\""   \r\n```\r\n\r\nafter a while of adding to your prompt, you can extract your prompt to a file, as long as your \""prompt\"" ends in a .md extension we'll go look for that file\r\n\r\n```bash\r\nmodal run main.py --prompt prompt.md   \r\n```\r\n\r\neach time you run this, the generated directory is deleted (except for images) and all files are rewritten from scratch. \r\n\r\nIn the `shared_dependencies.md` file is a helper file that ensures coherence between files.""]}",50,0.6919214725494385,0,Can my junior dev create a website?
CONTEXT_VALIDATOR,"{""query"": ""Can a junior developer with limited experience use the smol-ai/developer repository to create a website?"", ""repo"": ""https://github.com/smol-ai/developer"", ""similar_documents"": [""# smol developer\r\n\r\n***Human-centric & Coherent Whole Program Synthesis*** aka your own personal junior developer\r\n\r\n> [Build the thing that builds the thing!](https://twitter.com/swyx/status/1657578738345979905) a `smol dev` for every dev in every situation\r\n\r\nthis is a prototype of a \""junior developer\"" agent (aka `smol dev`) that scaffolds an entire codebase out for you once you give it a product spec, but does not end the world or overpromise AGI. instead of making and maintaining specific, rigid, one-shot starters, like `create-react-app`, or `create-nextjs-app`, this is basically [`create-anything-app`](https://news.ycombinator.com/item?id=35942352) where you develop your scaffolding prompt in a tight loop with your smol dev.\r\n\r\nAI that is helpful, harmless, and honest is complemented by a codebase that is simple, safe, and smol - <200 lines of Python and Prompts, so this is easy to understand and customize.\r\n\r\n<p align=\""center\"">\r\n  <img height=200 src=\""https://pbs.twimg.com/media/FwEzVCcaMAE7t4h?format=jpg&name=large\"" />\r\n</p>\r\n\r\n\r\n*engineering with prompts, rather than prompt engineering* \r\n\r\nThe demo example in `prompt.md` shows the potential of AI-enabled, but still firmly human developer centric, workflow:\r\n\r\n- Human writes a basic prompt for the app they want to build\r\n- `main.py` generates code\r\n- Human runs/reads the code\r\n- Human can:\r\n  - simply add to the prompt as they discover underspecified parts of the prompt"", ""- simply add to the prompt as they discover underspecified parts of the prompt\r\n  - manually runs the code and identifies errors\r\n  - *paste the error into the prompt* just like they would file a github issue\r\n  - for extra help, they can use `debugger.py` which reads the whole codebase to make specific code change suggestions\r\n\r\nLoop until happiness is attained. Notice that AI is only used as long as it is adding value - once it gets in your way, just take over the codebase from your smol junior developer with no fuss and no hurt feelings. (*we could also have smol-dev take over an existing codebase and bootstrap its own prompt... but that's a Future Direction*)\r\n\r\n*Not no code, not low code, but some third thing.* \r\n\r\nPerhaps a higher order evolution of programming where you still need to be technical, but no longer have to implement every detail at least to scaffold things out.\r\n\r\n## video demo\r\n\r\n[![https://i3.ytimg.com/vi/UCo7YeTy-aE/hqdefault.jpg](https://i3.ytimg.com/vi/UCo7YeTy-aE/hqdefault.jpg)](https://youtu.be/UCo7YeTy-aE)\r\n\r\n## arch diagram\r\n\r\nnaturally generated with gpt4, like [we did for babyagi](https://twitter.com/swyx/status/1648724820316786688)\r\n![image](https://github.com/smol-ai/developer/assets/6764957/f8fc68f4-77f6-43ee-852f-a35fb195430a)\r\n\r\n\r\n### innovations and insights\r\n\r\n> Please subscribe to https://latent.space/ for a fuller writeup and insights and reflections"", ""## install\r\n\r\nit's basically: \r\n\r\n- `git clone https://github.com/smol-ai/developer`.\r\n- copy over `.example.env` to `.env` filling in your API keys.\r\n\r\nThere are no python dependencies to wrangle thanks to using Modal as a [self-provisioning runtime](https://www.google.com/search?q=self+provisioning+runtime).\r\n\r\nUnfortunately this project also uses 3 waitlisted things:\r\n\r\n- Modal.com - `pip install modal-client` (private beta - hit up the modal team to get an invite, and login)\r\n  - You can run this project w/o Modal following these instructions:\r\n  - `pip install -r requirements.txt`\r\n  - `python main_no_modal.py YOUR_PROMPT_HERE`\r\n- GPT-4 api (private beta) - can use 3.5 but obviously wont be as good\r\n- (for the demo project) anthropic claude 100k context api (private beta)\r\n\r\n> yes, the most important skill in being an ai engineer is social engineering to get off waitlists. Modal will let you in if you say the keyword \""swyx\""\r\n\r\nyou'll have to adapt this code on a fork if you want to use it on other infra. please open issues/PRs and i'll happily highlight your fork here.\r\n\r\n### trying the example chrome extension"", ""### trying the example chrome extension\r\n\r\nthe `/generated` and `/exampleChromeExtension` folder contains `a Chrome Manifest V3 extension that reads the current page, and offers a popup UI that has the page title+content and a textarea for a prompt (with a default value we specify). When the user hits submit, it sends the page title+content to the Anthropic Claude API along with the up to date prompt to summarize it. The user can modify that prompt and re-send the prompt+content to get another summary view of the content.`\r\n\r\n- go to Manage Extensions in Chrome\r\n- load unpacked\r\n- find the relevant folder in your file system and load it\r\n- go to any content heavy site\r\n- click the cute bird\r\n- see it work\r\n\r\nthis entire extension was generated by the prompt in `prompt.md` (except for the images), and was built up over time by adding more words to the prompt in an iterative process.\r\n\r\n## smol dev\r\n\r\nbasic usage\r\n\r\n```bash\r\nmodal run main.py --prompt \""a Chrome extension that, when clicked, opens a small window with a page where you can enter a prompt for reading the currently open page and generating some response from openai\""   \r\n```\r\n\r\nafter a while of adding to your prompt, you can extract your prompt to a file, as long as your \""prompt\"" ends in a .md extension we'll go look for that file\r\n\r\n```bash\r\nmodal run main.py --prompt prompt.md   \r\n```\r\n\r\neach time you run this, the generated directory is deleted (except for images) and all files are rewritten from scratch. \r\n\r\nIn the `shared_dependencies.md` file is a helper file that ensures coherence between files."", ""modal-client\r\nopenai\r\ntiktoken""]}",50,0.5901679992675781,0,Can my junior dev create a website?
CONTEXT_VALIDATOR,"{""query"": ""How can a junior developer leverage the smol-ai/developer repository to build a website efficiently?"", ""repo"": ""https://github.com/smol-ai/developer"", ""similar_documents"": [""# smol developer\r\n\r\n***Human-centric & Coherent Whole Program Synthesis*** aka your own personal junior developer\r\n\r\n> [Build the thing that builds the thing!](https://twitter.com/swyx/status/1657578738345979905) a `smol dev` for every dev in every situation\r\n\r\nthis is a prototype of a \""junior developer\"" agent (aka `smol dev`) that scaffolds an entire codebase out for you once you give it a product spec, but does not end the world or overpromise AGI. instead of making and maintaining specific, rigid, one-shot starters, like `create-react-app`, or `create-nextjs-app`, this is basically [`create-anything-app`](https://news.ycombinator.com/item?id=35942352) where you develop your scaffolding prompt in a tight loop with your smol dev.\r\n\r\nAI that is helpful, harmless, and honest is complemented by a codebase that is simple, safe, and smol - <200 lines of Python and Prompts, so this is easy to understand and customize.\r\n\r\n<p align=\""center\"">\r\n  <img height=200 src=\""https://pbs.twimg.com/media/FwEzVCcaMAE7t4h?format=jpg&name=large\"" />\r\n</p>\r\n\r\n\r\n*engineering with prompts, rather than prompt engineering* \r\n\r\nThe demo example in `prompt.md` shows the potential of AI-enabled, but still firmly human developer centric, workflow:\r\n\r\n- Human writes a basic prompt for the app they want to build\r\n- `main.py` generates code\r\n- Human runs/reads the code\r\n- Human can:\r\n  - simply add to the prompt as they discover underspecified parts of the prompt"", ""- simply add to the prompt as they discover underspecified parts of the prompt\r\n  - manually runs the code and identifies errors\r\n  - *paste the error into the prompt* just like they would file a github issue\r\n  - for extra help, they can use `debugger.py` which reads the whole codebase to make specific code change suggestions\r\n\r\nLoop until happiness is attained. Notice that AI is only used as long as it is adding value - once it gets in your way, just take over the codebase from your smol junior developer with no fuss and no hurt feelings. (*we could also have smol-dev take over an existing codebase and bootstrap its own prompt... but that's a Future Direction*)\r\n\r\n*Not no code, not low code, but some third thing.* \r\n\r\nPerhaps a higher order evolution of programming where you still need to be technical, but no longer have to implement every detail at least to scaffold things out.\r\n\r\n## video demo\r\n\r\n[![https://i3.ytimg.com/vi/UCo7YeTy-aE/hqdefault.jpg](https://i3.ytimg.com/vi/UCo7YeTy-aE/hqdefault.jpg)](https://youtu.be/UCo7YeTy-aE)\r\n\r\n## arch diagram\r\n\r\nnaturally generated with gpt4, like [we did for babyagi](https://twitter.com/swyx/status/1648724820316786688)\r\n![image](https://github.com/smol-ai/developer/assets/6764957/f8fc68f4-77f6-43ee-852f-a35fb195430a)\r\n\r\n\r\n### innovations and insights\r\n\r\n> Please subscribe to https://latent.space/ for a fuller writeup and insights and reflections"", ""## install\r\n\r\nit's basically: \r\n\r\n- `git clone https://github.com/smol-ai/developer`.\r\n- copy over `.example.env` to `.env` filling in your API keys.\r\n\r\nThere are no python dependencies to wrangle thanks to using Modal as a [self-provisioning runtime](https://www.google.com/search?q=self+provisioning+runtime).\r\n\r\nUnfortunately this project also uses 3 waitlisted things:\r\n\r\n- Modal.com - `pip install modal-client` (private beta - hit up the modal team to get an invite, and login)\r\n  - You can run this project w/o Modal following these instructions:\r\n  - `pip install -r requirements.txt`\r\n  - `python main_no_modal.py YOUR_PROMPT_HERE`\r\n- GPT-4 api (private beta) - can use 3.5 but obviously wont be as good\r\n- (for the demo project) anthropic claude 100k context api (private beta)\r\n\r\n> yes, the most important skill in being an ai engineer is social engineering to get off waitlists. Modal will let you in if you say the keyword \""swyx\""\r\n\r\nyou'll have to adapt this code on a fork if you want to use it on other infra. please open issues/PRs and i'll happily highlight your fork here.\r\n\r\n### trying the example chrome extension"", ""- **ability to install its own dependencies**\r\n  - this leaks into depending on the execution environment, which we all know is the path to dependency madness. how to avoid? dockerize? nix? [web container](https://twitter.com/litbid/status/1658154530385670150)?\r\n  - Modal has an interesting possibility: generate functions that speak modal which also solves the dependency thing https://twitter.com/akshat_b/status/1658146096902811657\r\n- **self-heal** by running the code itself and use errors as information for reprompting \r\n  - however its a bit hard to get errors from the chrome extension environment so we did not try this\r\n- **using anthropic as the coding layer**\r\n  - you can run `modal run anthropic.py --prompt prompt.md --outputdir=anthropic` to try it\r\n  - but it doesnt work because anthropic doesnt follow instructions to generate file code very well.\r\n- **make agents that autonomously run this code in a loop/watch the prompt file** and regenerate code each time, on a new git branch\r\n  - the code could be generated on 5 simultaneous git branches and checking their output would just involve switching git branches"", ""### trying the example chrome extension\r\n\r\nthe `/generated` and `/exampleChromeExtension` folder contains `a Chrome Manifest V3 extension that reads the current page, and offers a popup UI that has the page title+content and a textarea for a prompt (with a default value we specify). When the user hits submit, it sends the page title+content to the Anthropic Claude API along with the up to date prompt to summarize it. The user can modify that prompt and re-send the prompt+content to get another summary view of the content.`\r\n\r\n- go to Manage Extensions in Chrome\r\n- load unpacked\r\n- find the relevant folder in your file system and load it\r\n- go to any content heavy site\r\n- click the cute bird\r\n- see it work\r\n\r\nthis entire extension was generated by the prompt in `prompt.md` (except for the images), and was built up over time by adding more words to the prompt in an iterative process.\r\n\r\n## smol dev\r\n\r\nbasic usage\r\n\r\n```bash\r\nmodal run main.py --prompt \""a Chrome extension that, when clicked, opens a small window with a page where you can enter a prompt for reading the currently open page and generating some response from openai\""   \r\n```\r\n\r\nafter a while of adding to your prompt, you can extract your prompt to a file, as long as your \""prompt\"" ends in a .md extension we'll go look for that file\r\n\r\n```bash\r\nmodal run main.py --prompt prompt.md   \r\n```\r\n\r\neach time you run this, the generated directory is deleted (except for images) and all files are rewritten from scratch. \r\n\r\nIn the `shared_dependencies.md` file is a helper file that ensures coherence between files.""]}",50,0.6572310924530029,0,Can my junior dev create a website?
CONTEXT_VALIDATOR,"{""query"": ""What are the best practices for a junior developer to follow when using the smol-ai/developer repository to create a website?"", ""repo"": ""https://github.com/smol-ai/developer"", ""similar_documents"": [""# smol developer\r\n\r\n***Human-centric & Coherent Whole Program Synthesis*** aka your own personal junior developer\r\n\r\n> [Build the thing that builds the thing!](https://twitter.com/swyx/status/1657578738345979905) a `smol dev` for every dev in every situation\r\n\r\nthis is a prototype of a \""junior developer\"" agent (aka `smol dev`) that scaffolds an entire codebase out for you once you give it a product spec, but does not end the world or overpromise AGI. instead of making and maintaining specific, rigid, one-shot starters, like `create-react-app`, or `create-nextjs-app`, this is basically [`create-anything-app`](https://news.ycombinator.com/item?id=35942352) where you develop your scaffolding prompt in a tight loop with your smol dev.\r\n\r\nAI that is helpful, harmless, and honest is complemented by a codebase that is simple, safe, and smol - <200 lines of Python and Prompts, so this is easy to understand and customize.\r\n\r\n<p align=\""center\"">\r\n  <img height=200 src=\""https://pbs.twimg.com/media/FwEzVCcaMAE7t4h?format=jpg&name=large\"" />\r\n</p>\r\n\r\n\r\n*engineering with prompts, rather than prompt engineering* \r\n\r\nThe demo example in `prompt.md` shows the potential of AI-enabled, but still firmly human developer centric, workflow:\r\n\r\n- Human writes a basic prompt for the app they want to build\r\n- `main.py` generates code\r\n- Human runs/reads the code\r\n- Human can:\r\n  - simply add to the prompt as they discover underspecified parts of the prompt"", ""- simply add to the prompt as they discover underspecified parts of the prompt\r\n  - manually runs the code and identifies errors\r\n  - *paste the error into the prompt* just like they would file a github issue\r\n  - for extra help, they can use `debugger.py` which reads the whole codebase to make specific code change suggestions\r\n\r\nLoop until happiness is attained. Notice that AI is only used as long as it is adding value - once it gets in your way, just take over the codebase from your smol junior developer with no fuss and no hurt feelings. (*we could also have smol-dev take over an existing codebase and bootstrap its own prompt... but that's a Future Direction*)\r\n\r\n*Not no code, not low code, but some third thing.* \r\n\r\nPerhaps a higher order evolution of programming where you still need to be technical, but no longer have to implement every detail at least to scaffold things out.\r\n\r\n## video demo\r\n\r\n[![https://i3.ytimg.com/vi/UCo7YeTy-aE/hqdefault.jpg](https://i3.ytimg.com/vi/UCo7YeTy-aE/hqdefault.jpg)](https://youtu.be/UCo7YeTy-aE)\r\n\r\n## arch diagram\r\n\r\nnaturally generated with gpt4, like [we did for babyagi](https://twitter.com/swyx/status/1648724820316786688)\r\n![image](https://github.com/smol-ai/developer/assets/6764957/f8fc68f4-77f6-43ee-852f-a35fb195430a)\r\n\r\n\r\n### innovations and insights\r\n\r\n> Please subscribe to https://latent.space/ for a fuller writeup and insights and reflections"", ""## install\r\n\r\nit's basically: \r\n\r\n- `git clone https://github.com/smol-ai/developer`.\r\n- copy over `.example.env` to `.env` filling in your API keys.\r\n\r\nThere are no python dependencies to wrangle thanks to using Modal as a [self-provisioning runtime](https://www.google.com/search?q=self+provisioning+runtime).\r\n\r\nUnfortunately this project also uses 3 waitlisted things:\r\n\r\n- Modal.com - `pip install modal-client` (private beta - hit up the modal team to get an invite, and login)\r\n  - You can run this project w/o Modal following these instructions:\r\n  - `pip install -r requirements.txt`\r\n  - `python main_no_modal.py YOUR_PROMPT_HERE`\r\n- GPT-4 api (private beta) - can use 3.5 but obviously wont be as good\r\n- (for the demo project) anthropic claude 100k context api (private beta)\r\n\r\n> yes, the most important skill in being an ai engineer is social engineering to get off waitlists. Modal will let you in if you say the keyword \""swyx\""\r\n\r\nyou'll have to adapt this code on a fork if you want to use it on other infra. please open issues/PRs and i'll happily highlight your fork here.\r\n\r\n### trying the example chrome extension"", ""modal-client\r\nopenai\r\ntiktoken"", ""- **ability to install its own dependencies**\r\n  - this leaks into depending on the execution environment, which we all know is the path to dependency madness. how to avoid? dockerize? nix? [web container](https://twitter.com/litbid/status/1658154530385670150)?\r\n  - Modal has an interesting possibility: generate functions that speak modal which also solves the dependency thing https://twitter.com/akshat_b/status/1658146096902811657\r\n- **self-heal** by running the code itself and use errors as information for reprompting \r\n  - however its a bit hard to get errors from the chrome extension environment so we did not try this\r\n- **using anthropic as the coding layer**\r\n  - you can run `modal run anthropic.py --prompt prompt.md --outputdir=anthropic` to try it\r\n  - but it doesnt work because anthropic doesnt follow instructions to generate file code very well.\r\n- **make agents that autonomously run this code in a loop/watch the prompt file** and regenerate code each time, on a new git branch\r\n  - the code could be generated on 5 simultaneous git branches and checking their output would just involve switching git branches""]}",50,0.7274553775787354,0,Can my junior dev create a website?
UPGRADE_QUERY,"{""query"": ""Can my junior dev create a website?"", ""repo"": ""https://github.com/smol-ai/developer""}","1. What resources are available in the smol-ai/developer repository to help a junior developer create a website?
2. Are there any tutorials or guides in the smol-ai/developer repository that can assist a junior developer in building a website?
3. Can a junior developer with limited experience use the smol-ai/developer repository to create a website?
4. What tools or frameworks are available in the smol-ai/developer repository that can be used by a junior developer to create a website?
5. How can a junior developer effectively utilize the smol-ai/developer repository to build a website?",42.58405900001526,0,Can my junior dev create a website?
CONTEXT_VALIDATOR,"{""query"": ""What resources are available in the smol-ai/developer repository to help a junior developer create a website?"", ""repo"": ""https://github.com/smol-ai/developer"", ""similar_documents"": [""# smol developer\r\n\r\n***Human-centric & Coherent Whole Program Synthesis*** aka your own personal junior developer\r\n\r\n> [Build the thing that builds the thing!](https://twitter.com/swyx/status/1657578738345979905) a `smol dev` for every dev in every situation\r\n\r\nthis is a prototype of a \""junior developer\"" agent (aka `smol dev`) that scaffolds an entire codebase out for you once you give it a product spec, but does not end the world or overpromise AGI. instead of making and maintaining specific, rigid, one-shot starters, like `create-react-app`, or `create-nextjs-app`, this is basically [`create-anything-app`](https://news.ycombinator.com/item?id=35942352) where you develop your scaffolding prompt in a tight loop with your smol dev.\r\n\r\nAI that is helpful, harmless, and honest is complemented by a codebase that is simple, safe, and smol - <200 lines of Python and Prompts, so this is easy to understand and customize.\r\n\r\n<p align=\""center\"">\r\n  <img height=200 src=\""https://pbs.twimg.com/media/FwEzVCcaMAE7t4h?format=jpg&name=large\"" />\r\n</p>\r\n\r\n\r\n*engineering with prompts, rather than prompt engineering* \r\n\r\nThe demo example in `prompt.md` shows the potential of AI-enabled, but still firmly human developer centric, workflow:\r\n\r\n- Human writes a basic prompt for the app they want to build\r\n- `main.py` generates code\r\n- Human runs/reads the code\r\n- Human can:\r\n  - simply add to the prompt as they discover underspecified parts of the prompt"", ""- simply add to the prompt as they discover underspecified parts of the prompt\r\n  - manually runs the code and identifies errors\r\n  - *paste the error into the prompt* just like they would file a github issue\r\n  - for extra help, they can use `debugger.py` which reads the whole codebase to make specific code change suggestions\r\n\r\nLoop until happiness is attained. Notice that AI is only used as long as it is adding value - once it gets in your way, just take over the codebase from your smol junior developer with no fuss and no hurt feelings. (*we could also have smol-dev take over an existing codebase and bootstrap its own prompt... but that's a Future Direction*)\r\n\r\n*Not no code, not low code, but some third thing.* \r\n\r\nPerhaps a higher order evolution of programming where you still need to be technical, but no longer have to implement every detail at least to scaffold things out.\r\n\r\n## video demo\r\n\r\n[![https://i3.ytimg.com/vi/UCo7YeTy-aE/hqdefault.jpg](https://i3.ytimg.com/vi/UCo7YeTy-aE/hqdefault.jpg)](https://youtu.be/UCo7YeTy-aE)\r\n\r\n## arch diagram\r\n\r\nnaturally generated with gpt4, like [we did for babyagi](https://twitter.com/swyx/status/1648724820316786688)\r\n![image](https://github.com/smol-ai/developer/assets/6764957/f8fc68f4-77f6-43ee-852f-a35fb195430a)\r\n\r\n\r\n### innovations and insights\r\n\r\n> Please subscribe to https://latent.space/ for a fuller writeup and insights and reflections"", ""modal-client\r\nopenai\r\ntiktoken"", ""## install\r\n\r\nit's basically: \r\n\r\n- `git clone https://github.com/smol-ai/developer`.\r\n- copy over `.example.env` to `.env` filling in your API keys.\r\n\r\nThere are no python dependencies to wrangle thanks to using Modal as a [self-provisioning runtime](https://www.google.com/search?q=self+provisioning+runtime).\r\n\r\nUnfortunately this project also uses 3 waitlisted things:\r\n\r\n- Modal.com - `pip install modal-client` (private beta - hit up the modal team to get an invite, and login)\r\n  - You can run this project w/o Modal following these instructions:\r\n  - `pip install -r requirements.txt`\r\n  - `python main_no_modal.py YOUR_PROMPT_HERE`\r\n- GPT-4 api (private beta) - can use 3.5 but obviously wont be as good\r\n- (for the demo project) anthropic claude 100k context api (private beta)\r\n\r\n> yes, the most important skill in being an ai engineer is social engineering to get off waitlists. Modal will let you in if you say the keyword \""swyx\""\r\n\r\nyou'll have to adapt this code on a fork if you want to use it on other infra. please open issues/PRs and i'll happily highlight your fork here.\r\n\r\n### trying the example chrome extension"", ""### trying the example chrome extension\r\n\r\nthe `/generated` and `/exampleChromeExtension` folder contains `a Chrome Manifest V3 extension that reads the current page, and offers a popup UI that has the page title+content and a textarea for a prompt (with a default value we specify). When the user hits submit, it sends the page title+content to the Anthropic Claude API along with the up to date prompt to summarize it. The user can modify that prompt and re-send the prompt+content to get another summary view of the content.`\r\n\r\n- go to Manage Extensions in Chrome\r\n- load unpacked\r\n- find the relevant folder in your file system and load it\r\n- go to any content heavy site\r\n- click the cute bird\r\n- see it work\r\n\r\nthis entire extension was generated by the prompt in `prompt.md` (except for the images), and was built up over time by adding more words to the prompt in an iterative process.\r\n\r\n## smol dev\r\n\r\nbasic usage\r\n\r\n```bash\r\nmodal run main.py --prompt \""a Chrome extension that, when clicked, opens a small window with a page where you can enter a prompt for reading the currently open page and generating some response from openai\""   \r\n```\r\n\r\nafter a while of adding to your prompt, you can extract your prompt to a file, as long as your \""prompt\"" ends in a .md extension we'll go look for that file\r\n\r\n```bash\r\nmodal run main.py --prompt prompt.md   \r\n```\r\n\r\neach time you run this, the generated directory is deleted (except for images) and all files are rewritten from scratch. \r\n\r\nIn the `shared_dependencies.md` file is a helper file that ensures coherence between files.""]}",50,0.6638236045837402,0,Can my junior dev create a website?
RUN_QUERY_RAG,"{""query"": ""What resources are available in the smol-ai/developer repository to help a junior developer create a website?"", ""repo"": ""https://github.com/smol-ai/developer"", ""similar_documents"": [""# smol developer\r\n\r\n***Human-centric & Coherent Whole Program Synthesis*** aka your own personal junior developer\r\n\r\n> [Build the thing that builds the thing!](https://twitter.com/swyx/status/1657578738345979905) a `smol dev` for every dev in every situation\r\n\r\nthis is a prototype of a \""junior developer\"" agent (aka `smol dev`) that scaffolds an entire codebase out for you once you give it a product spec, but does not end the world or overpromise AGI. instead of making and maintaining specific, rigid, one-shot starters, like `create-react-app`, or `create-nextjs-app`, this is basically [`create-anything-app`](https://news.ycombinator.com/item?id=35942352) where you develop your scaffolding prompt in a tight loop with your smol dev.\r\n\r\nAI that is helpful, harmless, and honest is complemented by a codebase that is simple, safe, and smol - <200 lines of Python and Prompts, so this is easy to understand and customize.\r\n\r\n<p align=\""center\"">\r\n  <img height=200 src=\""https://pbs.twimg.com/media/FwEzVCcaMAE7t4h?format=jpg&name=large\"" />\r\n</p>\r\n\r\n\r\n*engineering with prompts, rather than prompt engineering* \r\n\r\nThe demo example in `prompt.md` shows the potential of AI-enabled, but still firmly human developer centric, workflow:\r\n\r\n- Human writes a basic prompt for the app they want to build\r\n- `main.py` generates code\r\n- Human runs/reads the code\r\n- Human can:\r\n  - simply add to the prompt as they discover underspecified parts of the prompt"", ""- simply add to the prompt as they discover underspecified parts of the prompt\r\n  - manually runs the code and identifies errors\r\n  - *paste the error into the prompt* just like they would file a github issue\r\n  - for extra help, they can use `debugger.py` which reads the whole codebase to make specific code change suggestions\r\n\r\nLoop until happiness is attained. Notice that AI is only used as long as it is adding value - once it gets in your way, just take over the codebase from your smol junior developer with no fuss and no hurt feelings. (*we could also have smol-dev take over an existing codebase and bootstrap its own prompt... but that's a Future Direction*)\r\n\r\n*Not no code, not low code, but some third thing.* \r\n\r\nPerhaps a higher order evolution of programming where you still need to be technical, but no longer have to implement every detail at least to scaffold things out.\r\n\r\n## video demo\r\n\r\n[![https://i3.ytimg.com/vi/UCo7YeTy-aE/hqdefault.jpg](https://i3.ytimg.com/vi/UCo7YeTy-aE/hqdefault.jpg)](https://youtu.be/UCo7YeTy-aE)\r\n\r\n## arch diagram\r\n\r\nnaturally generated with gpt4, like [we did for babyagi](https://twitter.com/swyx/status/1648724820316786688)\r\n![image](https://github.com/smol-ai/developer/assets/6764957/f8fc68f4-77f6-43ee-852f-a35fb195430a)\r\n\r\n\r\n### innovations and insights\r\n\r\n> Please subscribe to https://latent.space/ for a fuller writeup and insights and reflections"", ""modal-client\r\nopenai\r\ntiktoken"", ""## install\r\n\r\nit's basically: \r\n\r\n- `git clone https://github.com/smol-ai/developer`.\r\n- copy over `.example.env` to `.env` filling in your API keys.\r\n\r\nThere are no python dependencies to wrangle thanks to using Modal as a [self-provisioning runtime](https://www.google.com/search?q=self+provisioning+runtime).\r\n\r\nUnfortunately this project also uses 3 waitlisted things:\r\n\r\n- Modal.com - `pip install modal-client` (private beta - hit up the modal team to get an invite, and login)\r\n  - You can run this project w/o Modal following these instructions:\r\n  - `pip install -r requirements.txt`\r\n  - `python main_no_modal.py YOUR_PROMPT_HERE`\r\n- GPT-4 api (private beta) - can use 3.5 but obviously wont be as good\r\n- (for the demo project) anthropic claude 100k context api (private beta)\r\n\r\n> yes, the most important skill in being an ai engineer is social engineering to get off waitlists. Modal will let you in if you say the keyword \""swyx\""\r\n\r\nyou'll have to adapt this code on a fork if you want to use it on other infra. please open issues/PRs and i'll happily highlight your fork here.\r\n\r\n### trying the example chrome extension"", ""### trying the example chrome extension\r\n\r\nthe `/generated` and `/exampleChromeExtension` folder contains `a Chrome Manifest V3 extension that reads the current page, and offers a popup UI that has the page title+content and a textarea for a prompt (with a default value we specify). When the user hits submit, it sends the page title+content to the Anthropic Claude API along with the up to date prompt to summarize it. The user can modify that prompt and re-send the prompt+content to get another summary view of the content.`\r\n\r\n- go to Manage Extensions in Chrome\r\n- load unpacked\r\n- find the relevant folder in your file system and load it\r\n- go to any content heavy site\r\n- click the cute bird\r\n- see it work\r\n\r\nthis entire extension was generated by the prompt in `prompt.md` (except for the images), and was built up over time by adding more words to the prompt in an iterative process.\r\n\r\n## smol dev\r\n\r\nbasic usage\r\n\r\n```bash\r\nmodal run main.py --prompt \""a Chrome extension that, when clicked, opens a small window with a page where you can enter a prompt for reading the currently open page and generating some response from openai\""   \r\n```\r\n\r\nafter a while of adding to your prompt, you can extract your prompt to a file, as long as your \""prompt\"" ends in a .md extension we'll go look for that file\r\n\r\n```bash\r\nmodal run main.py --prompt prompt.md   \r\n```\r\n\r\neach time you run this, the generated directory is deleted (except for images) and all files are rewritten from scratch. \r\n\r\nIn the `shared_dependencies.md` file is a helper file that ensures coherence between files.""]}","The smol-ai/developer repository contains a prototype of a ""junior developer"" agent that can scaffold an entire codebase for a website based on a product spec. This agent is called a ""smol dev"" and is designed to be helpful, harmless, and honest. The codebase is simple, safe, and less than 200 lines of Python and Prompts, making it easy to understand and customize. The workflow involves writing a basic prompt for the app, generating code with `main.py`, manually running and identifying errors, and pasting the error into the prompt. The AI is only used as long as it adds value, and the developer can take over the codebase from the smol junior developer at any time. The repository also includes a Chrome extension that was generated by the prompt in `prompt.md`. To use the smol dev, clone the repository and copy over `.example.env` to `.env`, filling in your API keys. There are no Python dependencies to wrangle thanks to using Modal as a self-provisioning runtime. However, the project uses three waitlisted things: Modal.com, GPT-4 API, and anthropic claude 100k context API. The most important skill in being an AI engineer is social engineering to get off waitlists.",23.058045148849487,0,Can my junior dev create a website?
CONTEXT_VALIDATOR,"{""query"": ""Can my junior dev create a website?"", ""repo"": ""https://github.com/smol-ai/developer"", ""similar_documents"": [""# smol developer\r\n\r\n***Human-centric & Coherent Whole Program Synthesis*** aka your own personal junior developer\r\n\r\n> [Build the thing that builds the thing!](https://twitter.com/swyx/status/1657578738345979905) a `smol dev` for every dev in every situation\r\n\r\nthis is a prototype of a \""junior developer\"" agent (aka `smol dev`) that scaffolds an entire codebase out for you once you give it a product spec, but does not end the world or overpromise AGI. instead of making and maintaining specific, rigid, one-shot starters, like `create-react-app`, or `create-nextjs-app`, this is basically [`create-anything-app`](https://news.ycombinator.com/item?id=35942352) where you develop your scaffolding prompt in a tight loop with your smol dev.\r\n\r\nAI that is helpful, harmless, and honest is complemented by a codebase that is simple, safe, and smol - <200 lines of Python and Prompts, so this is easy to understand and customize.\r\n\r\n<p align=\""center\"">\r\n  <img height=200 src=\""https://pbs.twimg.com/media/FwEzVCcaMAE7t4h?format=jpg&name=large\"" />\r\n</p>\r\n\r\n\r\n*engineering with prompts, rather than prompt engineering* \r\n\r\nThe demo example in `prompt.md` shows the potential of AI-enabled, but still firmly human developer centric, workflow:\r\n\r\n- Human writes a basic prompt for the app they want to build\r\n- `main.py` generates code\r\n- Human runs/reads the code\r\n- Human can:\r\n  - simply add to the prompt as they discover underspecified parts of the prompt"", ""body {\r\n  font-family: Arial, sans-serif;\r\n  margin: 0;\r\n  padding: 15px;\r\n}\r\n\r\ntextarea, input {\r\n  display: block;\r\n  width: 100%;\r\n  margin-bottom: 10px;\r\n  padding: 5px;\r\n  font-size: 14px;\r\n}\r\n\r\nbutton {\r\n  background-color: #4CAF50;\r\n  border: none;\r\n  color: white;\r\n  padding: 10px 20px;\r\n  text-align: center;\r\n  text-decoration: none;\r\n  display: inline-block;\r\n  font-size: 14px;\r\n  margin: 10px 0;\r\n  cursor: pointer;\r\n}\r\n\r\nbutton:hover {\r\n  background-color: #45a049;\r\n}\r\n\r\n#content {\r\n  margin-top: 20px;\r\n  font-size: 14px;\r\n  line-height: 1.5;\r\n}\r\n\r\n#loadingIndicator {\r\n  display: none;\r\n  font-size: 14px;\r\n  color: #999;\r\n}"", ""<!DOCTYPE html>\r\n<html lang=\""en\"">\r\n<head>\r\n  <meta charset=\""UTF-8\"">\r\n  <meta name=\""viewport\"" content=\""width=device-width, initial-scale=1.0\"">\r\n  <title>Anthropic Summary</title>\r\n  <link rel=\""stylesheet\"" href=\""styles.css\"">\r\n</head>\r\n<body>\r\n  <div id=\""content\""></div>\r\n  <div id=\""loadingIndicator\""></div>\r\n  <textarea id=\""userPrompt\""></textarea>\r\n  <button id=\""sendButton\"">Submit</button>\r\n  <script src=\""popup.js\""></script>\r\n</body>\r\n</html>"", ""- simply add to the prompt as they discover underspecified parts of the prompt\r\n  - manually runs the code and identifies errors\r\n  - *paste the error into the prompt* just like they would file a github issue\r\n  - for extra help, they can use `debugger.py` which reads the whole codebase to make specific code change suggestions\r\n\r\nLoop until happiness is attained. Notice that AI is only used as long as it is adding value - once it gets in your way, just take over the codebase from your smol junior developer with no fuss and no hurt feelings. (*we could also have smol-dev take over an existing codebase and bootstrap its own prompt... but that's a Future Direction*)\r\n\r\n*Not no code, not low code, but some third thing.* \r\n\r\nPerhaps a higher order evolution of programming where you still need to be technical, but no longer have to implement every detail at least to scaffold things out.\r\n\r\n## video demo\r\n\r\n[![https://i3.ytimg.com/vi/UCo7YeTy-aE/hqdefault.jpg](https://i3.ytimg.com/vi/UCo7YeTy-aE/hqdefault.jpg)](https://youtu.be/UCo7YeTy-aE)\r\n\r\n## arch diagram\r\n\r\nnaturally generated with gpt4, like [we did for babyagi](https://twitter.com/swyx/status/1648724820316786688)\r\n![image](https://github.com/smol-ai/developer/assets/6764957/f8fc68f4-77f6-43ee-852f-a35fb195430a)\r\n\r\n\r\n### innovations and insights\r\n\r\n> Please subscribe to https://latent.space/ for a fuller writeup and insights and reflections"", ""body {\r\n  margin: 16px;\r\n  font-family: -apple-system, BlinkMacSystemFont, \""Segoe UI\"", Roboto, Helvetica, Arial, sans-serif, \""Apple Color Emoji\"", \""Segoe UI Emoji\"", \""Segoe UI Symbol\"";\r\n  min-width: 400px;\r\n  min-height: 600px;\r\n}\r\n\r\n#content {\r\n  margin-bottom: 16px;\r\n}\r\n\r\n#userPrompt {\r\n  width: 100%;\r\n  height: 80px;\r\n  resize: none;\r\n  margin-bottom: 8px;\r\n}\r\n\r\n#sendButton {\r\n  display: inline-block;\r\n  background-color: #007bff;\r\n  color: white;\r\n  padding: 8px 16px;\r\n  border-radius: 4px;\r\n  text-decoration: none;\r\n  cursor: pointer;\r\n  transition: background-color 0.2s;\r\n}\r\n\r\n#sendButton:hover {\r\n  background-color: #0056b3;\r\n}\r\n\r\n#sendButton:disabled {\r\n  background-color: #6c757d;\r\n  cursor: not-allowed;\r\n}\r\n\r\n#loadingIndicator {\r\n  display: none;\r\n  width: 100%;\r\n  height: 8rem;\r\n  border-radius: 1rem;\r\n  margin-bottom: 2rem;\r\n  background-image: linear-gradient(-45deg, #007bff 25%, transparent 25%, transparent 50%, #007bff 50%, #007bff 75%, transparent 75%, transparent);\r\n  background-size: 40px 40px;""]}",50,65.6258795261383,1,Can my junior dev create a website?
UPGRADE_QUERY,"{""query"": ""Can my junior dev create a website?"", ""repo"": ""https://github.com/smol-ai/developer""}","1. What resources are available in the smol-ai/developer repository to help a junior developer create a website?
2. Are there any tutorials or guides in the smol-ai/developer repository that can assist a junior developer in building a website?
3. Can a junior developer with limited experience use the smol-ai/developer repository to create a website?
4. How can a junior developer leverage the smol-ai/developer repository to build a website efficiently?
5. What are the best practices for a junior developer to follow when using the smol-ai/developer repository to create a website?",12.570688247680664,1,Can my junior dev create a website?
CONTEXT_VALIDATOR,"{""query"": ""What resources are available in the smol-ai/developer repository to help a junior developer create a website?"", ""repo"": ""https://github.com/smol-ai/developer"", ""similar_documents"": [""# smol developer\r\n\r\n***Human-centric & Coherent Whole Program Synthesis*** aka your own personal junior developer\r\n\r\n> [Build the thing that builds the thing!](https://twitter.com/swyx/status/1657578738345979905) a `smol dev` for every dev in every situation\r\n\r\nthis is a prototype of a \""junior developer\"" agent (aka `smol dev`) that scaffolds an entire codebase out for you once you give it a product spec, but does not end the world or overpromise AGI. instead of making and maintaining specific, rigid, one-shot starters, like `create-react-app`, or `create-nextjs-app`, this is basically [`create-anything-app`](https://news.ycombinator.com/item?id=35942352) where you develop your scaffolding prompt in a tight loop with your smol dev.\r\n\r\nAI that is helpful, harmless, and honest is complemented by a codebase that is simple, safe, and smol - <200 lines of Python and Prompts, so this is easy to understand and customize.\r\n\r\n<p align=\""center\"">\r\n  <img height=200 src=\""https://pbs.twimg.com/media/FwEzVCcaMAE7t4h?format=jpg&name=large\"" />\r\n</p>\r\n\r\n\r\n*engineering with prompts, rather than prompt engineering* \r\n\r\nThe demo example in `prompt.md` shows the potential of AI-enabled, but still firmly human developer centric, workflow:\r\n\r\n- Human writes a basic prompt for the app they want to build\r\n- `main.py` generates code\r\n- Human runs/reads the code\r\n- Human can:\r\n  - simply add to the prompt as they discover underspecified parts of the prompt"", ""- simply add to the prompt as they discover underspecified parts of the prompt\r\n  - manually runs the code and identifies errors\r\n  - *paste the error into the prompt* just like they would file a github issue\r\n  - for extra help, they can use `debugger.py` which reads the whole codebase to make specific code change suggestions\r\n\r\nLoop until happiness is attained. Notice that AI is only used as long as it is adding value - once it gets in your way, just take over the codebase from your smol junior developer with no fuss and no hurt feelings. (*we could also have smol-dev take over an existing codebase and bootstrap its own prompt... but that's a Future Direction*)\r\n\r\n*Not no code, not low code, but some third thing.* \r\n\r\nPerhaps a higher order evolution of programming where you still need to be technical, but no longer have to implement every detail at least to scaffold things out.\r\n\r\n## video demo\r\n\r\n[![https://i3.ytimg.com/vi/UCo7YeTy-aE/hqdefault.jpg](https://i3.ytimg.com/vi/UCo7YeTy-aE/hqdefault.jpg)](https://youtu.be/UCo7YeTy-aE)\r\n\r\n## arch diagram\r\n\r\nnaturally generated with gpt4, like [we did for babyagi](https://twitter.com/swyx/status/1648724820316786688)\r\n![image](https://github.com/smol-ai/developer/assets/6764957/f8fc68f4-77f6-43ee-852f-a35fb195430a)\r\n\r\n\r\n### innovations and insights\r\n\r\n> Please subscribe to https://latent.space/ for a fuller writeup and insights and reflections"", ""modal-client\r\nopenai\r\ntiktoken"", ""## install\r\n\r\nit's basically: \r\n\r\n- `git clone https://github.com/smol-ai/developer`.\r\n- copy over `.example.env` to `.env` filling in your API keys.\r\n\r\nThere are no python dependencies to wrangle thanks to using Modal as a [self-provisioning runtime](https://www.google.com/search?q=self+provisioning+runtime).\r\n\r\nUnfortunately this project also uses 3 waitlisted things:\r\n\r\n- Modal.com - `pip install modal-client` (private beta - hit up the modal team to get an invite, and login)\r\n  - You can run this project w/o Modal following these instructions:\r\n  - `pip install -r requirements.txt`\r\n  - `python main_no_modal.py YOUR_PROMPT_HERE`\r\n- GPT-4 api (private beta) - can use 3.5 but obviously wont be as good\r\n- (for the demo project) anthropic claude 100k context api (private beta)\r\n\r\n> yes, the most important skill in being an ai engineer is social engineering to get off waitlists. Modal will let you in if you say the keyword \""swyx\""\r\n\r\nyou'll have to adapt this code on a fork if you want to use it on other infra. please open issues/PRs and i'll happily highlight your fork here.\r\n\r\n### trying the example chrome extension"", ""### trying the example chrome extension\r\n\r\nthe `/generated` and `/exampleChromeExtension` folder contains `a Chrome Manifest V3 extension that reads the current page, and offers a popup UI that has the page title+content and a textarea for a prompt (with a default value we specify). When the user hits submit, it sends the page title+content to the Anthropic Claude API along with the up to date prompt to summarize it. The user can modify that prompt and re-send the prompt+content to get another summary view of the content.`\r\n\r\n- go to Manage Extensions in Chrome\r\n- load unpacked\r\n- find the relevant folder in your file system and load it\r\n- go to any content heavy site\r\n- click the cute bird\r\n- see it work\r\n\r\nthis entire extension was generated by the prompt in `prompt.md` (except for the images), and was built up over time by adding more words to the prompt in an iterative process.\r\n\r\n## smol dev\r\n\r\nbasic usage\r\n\r\n```bash\r\nmodal run main.py --prompt \""a Chrome extension that, when clicked, opens a small window with a page where you can enter a prompt for reading the currently open page and generating some response from openai\""   \r\n```\r\n\r\nafter a while of adding to your prompt, you can extract your prompt to a file, as long as your \""prompt\"" ends in a .md extension we'll go look for that file\r\n\r\n```bash\r\nmodal run main.py --prompt prompt.md   \r\n```\r\n\r\neach time you run this, the generated directory is deleted (except for images) and all files are rewritten from scratch. \r\n\r\nIn the `shared_dependencies.md` file is a helper file that ensures coherence between files.""]}",50,0.6296231746673584,1,Can my junior dev create a website?
CONTEXT_VALIDATOR,"{""query"": ""Are there any tutorials or guides in the smol-ai/developer repository that can assist a junior developer in building a website?"", ""repo"": ""https://github.com/smol-ai/developer"", ""similar_documents"": [""# smol developer\r\n\r\n***Human-centric & Coherent Whole Program Synthesis*** aka your own personal junior developer\r\n\r\n> [Build the thing that builds the thing!](https://twitter.com/swyx/status/1657578738345979905) a `smol dev` for every dev in every situation\r\n\r\nthis is a prototype of a \""junior developer\"" agent (aka `smol dev`) that scaffolds an entire codebase out for you once you give it a product spec, but does not end the world or overpromise AGI. instead of making and maintaining specific, rigid, one-shot starters, like `create-react-app`, or `create-nextjs-app`, this is basically [`create-anything-app`](https://news.ycombinator.com/item?id=35942352) where you develop your scaffolding prompt in a tight loop with your smol dev.\r\n\r\nAI that is helpful, harmless, and honest is complemented by a codebase that is simple, safe, and smol - <200 lines of Python and Prompts, so this is easy to understand and customize.\r\n\r\n<p align=\""center\"">\r\n  <img height=200 src=\""https://pbs.twimg.com/media/FwEzVCcaMAE7t4h?format=jpg&name=large\"" />\r\n</p>\r\n\r\n\r\n*engineering with prompts, rather than prompt engineering* \r\n\r\nThe demo example in `prompt.md` shows the potential of AI-enabled, but still firmly human developer centric, workflow:\r\n\r\n- Human writes a basic prompt for the app they want to build\r\n- `main.py` generates code\r\n- Human runs/reads the code\r\n- Human can:\r\n  - simply add to the prompt as they discover underspecified parts of the prompt"", ""- simply add to the prompt as they discover underspecified parts of the prompt\r\n  - manually runs the code and identifies errors\r\n  - *paste the error into the prompt* just like they would file a github issue\r\n  - for extra help, they can use `debugger.py` which reads the whole codebase to make specific code change suggestions\r\n\r\nLoop until happiness is attained. Notice that AI is only used as long as it is adding value - once it gets in your way, just take over the codebase from your smol junior developer with no fuss and no hurt feelings. (*we could also have smol-dev take over an existing codebase and bootstrap its own prompt... but that's a Future Direction*)\r\n\r\n*Not no code, not low code, but some third thing.* \r\n\r\nPerhaps a higher order evolution of programming where you still need to be technical, but no longer have to implement every detail at least to scaffold things out.\r\n\r\n## video demo\r\n\r\n[![https://i3.ytimg.com/vi/UCo7YeTy-aE/hqdefault.jpg](https://i3.ytimg.com/vi/UCo7YeTy-aE/hqdefault.jpg)](https://youtu.be/UCo7YeTy-aE)\r\n\r\n## arch diagram\r\n\r\nnaturally generated with gpt4, like [we did for babyagi](https://twitter.com/swyx/status/1648724820316786688)\r\n![image](https://github.com/smol-ai/developer/assets/6764957/f8fc68f4-77f6-43ee-852f-a35fb195430a)\r\n\r\n\r\n### innovations and insights\r\n\r\n> Please subscribe to https://latent.space/ for a fuller writeup and insights and reflections"", ""## install\r\n\r\nit's basically: \r\n\r\n- `git clone https://github.com/smol-ai/developer`.\r\n- copy over `.example.env` to `.env` filling in your API keys.\r\n\r\nThere are no python dependencies to wrangle thanks to using Modal as a [self-provisioning runtime](https://www.google.com/search?q=self+provisioning+runtime).\r\n\r\nUnfortunately this project also uses 3 waitlisted things:\r\n\r\n- Modal.com - `pip install modal-client` (private beta - hit up the modal team to get an invite, and login)\r\n  - You can run this project w/o Modal following these instructions:\r\n  - `pip install -r requirements.txt`\r\n  - `python main_no_modal.py YOUR_PROMPT_HERE`\r\n- GPT-4 api (private beta) - can use 3.5 but obviously wont be as good\r\n- (for the demo project) anthropic claude 100k context api (private beta)\r\n\r\n> yes, the most important skill in being an ai engineer is social engineering to get off waitlists. Modal will let you in if you say the keyword \""swyx\""\r\n\r\nyou'll have to adapt this code on a fork if you want to use it on other infra. please open issues/PRs and i'll happily highlight your fork here.\r\n\r\n### trying the example chrome extension"", ""modal-client\r\nopenai\r\ntiktoken"", ""### trying the example chrome extension\r\n\r\nthe `/generated` and `/exampleChromeExtension` folder contains `a Chrome Manifest V3 extension that reads the current page, and offers a popup UI that has the page title+content and a textarea for a prompt (with a default value we specify). When the user hits submit, it sends the page title+content to the Anthropic Claude API along with the up to date prompt to summarize it. The user can modify that prompt and re-send the prompt+content to get another summary view of the content.`\r\n\r\n- go to Manage Extensions in Chrome\r\n- load unpacked\r\n- find the relevant folder in your file system and load it\r\n- go to any content heavy site\r\n- click the cute bird\r\n- see it work\r\n\r\nthis entire extension was generated by the prompt in `prompt.md` (except for the images), and was built up over time by adding more words to the prompt in an iterative process.\r\n\r\n## smol dev\r\n\r\nbasic usage\r\n\r\n```bash\r\nmodal run main.py --prompt \""a Chrome extension that, when clicked, opens a small window with a page where you can enter a prompt for reading the currently open page and generating some response from openai\""   \r\n```\r\n\r\nafter a while of adding to your prompt, you can extract your prompt to a file, as long as your \""prompt\"" ends in a .md extension we'll go look for that file\r\n\r\n```bash\r\nmodal run main.py --prompt prompt.md   \r\n```\r\n\r\neach time you run this, the generated directory is deleted (except for images) and all files are rewritten from scratch. \r\n\r\nIn the `shared_dependencies.md` file is a helper file that ensures coherence between files.""]}",50,0.7070281505584717,1,Can my junior dev create a website?
CONTEXT_VALIDATOR,"{""query"": ""Can a junior developer with limited experience use the smol-ai/developer repository to create a website?"", ""repo"": ""https://github.com/smol-ai/developer"", ""similar_documents"": [""# smol developer\r\n\r\n***Human-centric & Coherent Whole Program Synthesis*** aka your own personal junior developer\r\n\r\n> [Build the thing that builds the thing!](https://twitter.com/swyx/status/1657578738345979905) a `smol dev` for every dev in every situation\r\n\r\nthis is a prototype of a \""junior developer\"" agent (aka `smol dev`) that scaffolds an entire codebase out for you once you give it a product spec, but does not end the world or overpromise AGI. instead of making and maintaining specific, rigid, one-shot starters, like `create-react-app`, or `create-nextjs-app`, this is basically [`create-anything-app`](https://news.ycombinator.com/item?id=35942352) where you develop your scaffolding prompt in a tight loop with your smol dev.\r\n\r\nAI that is helpful, harmless, and honest is complemented by a codebase that is simple, safe, and smol - <200 lines of Python and Prompts, so this is easy to understand and customize.\r\n\r\n<p align=\""center\"">\r\n  <img height=200 src=\""https://pbs.twimg.com/media/FwEzVCcaMAE7t4h?format=jpg&name=large\"" />\r\n</p>\r\n\r\n\r\n*engineering with prompts, rather than prompt engineering* \r\n\r\nThe demo example in `prompt.md` shows the potential of AI-enabled, but still firmly human developer centric, workflow:\r\n\r\n- Human writes a basic prompt for the app they want to build\r\n- `main.py` generates code\r\n- Human runs/reads the code\r\n- Human can:\r\n  - simply add to the prompt as they discover underspecified parts of the prompt"", ""- simply add to the prompt as they discover underspecified parts of the prompt\r\n  - manually runs the code and identifies errors\r\n  - *paste the error into the prompt* just like they would file a github issue\r\n  - for extra help, they can use `debugger.py` which reads the whole codebase to make specific code change suggestions\r\n\r\nLoop until happiness is attained. Notice that AI is only used as long as it is adding value - once it gets in your way, just take over the codebase from your smol junior developer with no fuss and no hurt feelings. (*we could also have smol-dev take over an existing codebase and bootstrap its own prompt... but that's a Future Direction*)\r\n\r\n*Not no code, not low code, but some third thing.* \r\n\r\nPerhaps a higher order evolution of programming where you still need to be technical, but no longer have to implement every detail at least to scaffold things out.\r\n\r\n## video demo\r\n\r\n[![https://i3.ytimg.com/vi/UCo7YeTy-aE/hqdefault.jpg](https://i3.ytimg.com/vi/UCo7YeTy-aE/hqdefault.jpg)](https://youtu.be/UCo7YeTy-aE)\r\n\r\n## arch diagram\r\n\r\nnaturally generated with gpt4, like [we did for babyagi](https://twitter.com/swyx/status/1648724820316786688)\r\n![image](https://github.com/smol-ai/developer/assets/6764957/f8fc68f4-77f6-43ee-852f-a35fb195430a)\r\n\r\n\r\n### innovations and insights\r\n\r\n> Please subscribe to https://latent.space/ for a fuller writeup and insights and reflections"", ""## install\r\n\r\nit's basically: \r\n\r\n- `git clone https://github.com/smol-ai/developer`.\r\n- copy over `.example.env` to `.env` filling in your API keys.\r\n\r\nThere are no python dependencies to wrangle thanks to using Modal as a [self-provisioning runtime](https://www.google.com/search?q=self+provisioning+runtime).\r\n\r\nUnfortunately this project also uses 3 waitlisted things:\r\n\r\n- Modal.com - `pip install modal-client` (private beta - hit up the modal team to get an invite, and login)\r\n  - You can run this project w/o Modal following these instructions:\r\n  - `pip install -r requirements.txt`\r\n  - `python main_no_modal.py YOUR_PROMPT_HERE`\r\n- GPT-4 api (private beta) - can use 3.5 but obviously wont be as good\r\n- (for the demo project) anthropic claude 100k context api (private beta)\r\n\r\n> yes, the most important skill in being an ai engineer is social engineering to get off waitlists. Modal will let you in if you say the keyword \""swyx\""\r\n\r\nyou'll have to adapt this code on a fork if you want to use it on other infra. please open issues/PRs and i'll happily highlight your fork here.\r\n\r\n### trying the example chrome extension"", ""### trying the example chrome extension\r\n\r\nthe `/generated` and `/exampleChromeExtension` folder contains `a Chrome Manifest V3 extension that reads the current page, and offers a popup UI that has the page title+content and a textarea for a prompt (with a default value we specify). When the user hits submit, it sends the page title+content to the Anthropic Claude API along with the up to date prompt to summarize it. The user can modify that prompt and re-send the prompt+content to get another summary view of the content.`\r\n\r\n- go to Manage Extensions in Chrome\r\n- load unpacked\r\n- find the relevant folder in your file system and load it\r\n- go to any content heavy site\r\n- click the cute bird\r\n- see it work\r\n\r\nthis entire extension was generated by the prompt in `prompt.md` (except for the images), and was built up over time by adding more words to the prompt in an iterative process.\r\n\r\n## smol dev\r\n\r\nbasic usage\r\n\r\n```bash\r\nmodal run main.py --prompt \""a Chrome extension that, when clicked, opens a small window with a page where you can enter a prompt for reading the currently open page and generating some response from openai\""   \r\n```\r\n\r\nafter a while of adding to your prompt, you can extract your prompt to a file, as long as your \""prompt\"" ends in a .md extension we'll go look for that file\r\n\r\n```bash\r\nmodal run main.py --prompt prompt.md   \r\n```\r\n\r\neach time you run this, the generated directory is deleted (except for images) and all files are rewritten from scratch. \r\n\r\nIn the `shared_dependencies.md` file is a helper file that ensures coherence between files."", ""modal-client\r\nopenai\r\ntiktoken""]}",50,0.8635091781616211,1,Can my junior dev create a website?
CONTEXT_VALIDATOR,"{""query"": ""How can a junior developer leverage the smol-ai/developer repository to build a website efficiently?"", ""repo"": ""https://github.com/smol-ai/developer"", ""similar_documents"": [""# smol developer\r\n\r\n***Human-centric & Coherent Whole Program Synthesis*** aka your own personal junior developer\r\n\r\n> [Build the thing that builds the thing!](https://twitter.com/swyx/status/1657578738345979905) a `smol dev` for every dev in every situation\r\n\r\nthis is a prototype of a \""junior developer\"" agent (aka `smol dev`) that scaffolds an entire codebase out for you once you give it a product spec, but does not end the world or overpromise AGI. instead of making and maintaining specific, rigid, one-shot starters, like `create-react-app`, or `create-nextjs-app`, this is basically [`create-anything-app`](https://news.ycombinator.com/item?id=35942352) where you develop your scaffolding prompt in a tight loop with your smol dev.\r\n\r\nAI that is helpful, harmless, and honest is complemented by a codebase that is simple, safe, and smol - <200 lines of Python and Prompts, so this is easy to understand and customize.\r\n\r\n<p align=\""center\"">\r\n  <img height=200 src=\""https://pbs.twimg.com/media/FwEzVCcaMAE7t4h?format=jpg&name=large\"" />\r\n</p>\r\n\r\n\r\n*engineering with prompts, rather than prompt engineering* \r\n\r\nThe demo example in `prompt.md` shows the potential of AI-enabled, but still firmly human developer centric, workflow:\r\n\r\n- Human writes a basic prompt for the app they want to build\r\n- `main.py` generates code\r\n- Human runs/reads the code\r\n- Human can:\r\n  - simply add to the prompt as they discover underspecified parts of the prompt"", ""- simply add to the prompt as they discover underspecified parts of the prompt\r\n  - manually runs the code and identifies errors\r\n  - *paste the error into the prompt* just like they would file a github issue\r\n  - for extra help, they can use `debugger.py` which reads the whole codebase to make specific code change suggestions\r\n\r\nLoop until happiness is attained. Notice that AI is only used as long as it is adding value - once it gets in your way, just take over the codebase from your smol junior developer with no fuss and no hurt feelings. (*we could also have smol-dev take over an existing codebase and bootstrap its own prompt... but that's a Future Direction*)\r\n\r\n*Not no code, not low code, but some third thing.* \r\n\r\nPerhaps a higher order evolution of programming where you still need to be technical, but no longer have to implement every detail at least to scaffold things out.\r\n\r\n## video demo\r\n\r\n[![https://i3.ytimg.com/vi/UCo7YeTy-aE/hqdefault.jpg](https://i3.ytimg.com/vi/UCo7YeTy-aE/hqdefault.jpg)](https://youtu.be/UCo7YeTy-aE)\r\n\r\n## arch diagram\r\n\r\nnaturally generated with gpt4, like [we did for babyagi](https://twitter.com/swyx/status/1648724820316786688)\r\n![image](https://github.com/smol-ai/developer/assets/6764957/f8fc68f4-77f6-43ee-852f-a35fb195430a)\r\n\r\n\r\n### innovations and insights\r\n\r\n> Please subscribe to https://latent.space/ for a fuller writeup and insights and reflections"", ""## install\r\n\r\nit's basically: \r\n\r\n- `git clone https://github.com/smol-ai/developer`.\r\n- copy over `.example.env` to `.env` filling in your API keys.\r\n\r\nThere are no python dependencies to wrangle thanks to using Modal as a [self-provisioning runtime](https://www.google.com/search?q=self+provisioning+runtime).\r\n\r\nUnfortunately this project also uses 3 waitlisted things:\r\n\r\n- Modal.com - `pip install modal-client` (private beta - hit up the modal team to get an invite, and login)\r\n  - You can run this project w/o Modal following these instructions:\r\n  - `pip install -r requirements.txt`\r\n  - `python main_no_modal.py YOUR_PROMPT_HERE`\r\n- GPT-4 api (private beta) - can use 3.5 but obviously wont be as good\r\n- (for the demo project) anthropic claude 100k context api (private beta)\r\n\r\n> yes, the most important skill in being an ai engineer is social engineering to get off waitlists. Modal will let you in if you say the keyword \""swyx\""\r\n\r\nyou'll have to adapt this code on a fork if you want to use it on other infra. please open issues/PRs and i'll happily highlight your fork here.\r\n\r\n### trying the example chrome extension"", ""- **ability to install its own dependencies**\r\n  - this leaks into depending on the execution environment, which we all know is the path to dependency madness. how to avoid? dockerize? nix? [web container](https://twitter.com/litbid/status/1658154530385670150)?\r\n  - Modal has an interesting possibility: generate functions that speak modal which also solves the dependency thing https://twitter.com/akshat_b/status/1658146096902811657\r\n- **self-heal** by running the code itself and use errors as information for reprompting \r\n  - however its a bit hard to get errors from the chrome extension environment so we did not try this\r\n- **using anthropic as the coding layer**\r\n  - you can run `modal run anthropic.py --prompt prompt.md --outputdir=anthropic` to try it\r\n  - but it doesnt work because anthropic doesnt follow instructions to generate file code very well.\r\n- **make agents that autonomously run this code in a loop/watch the prompt file** and regenerate code each time, on a new git branch\r\n  - the code could be generated on 5 simultaneous git branches and checking their output would just involve switching git branches"", ""### trying the example chrome extension\r\n\r\nthe `/generated` and `/exampleChromeExtension` folder contains `a Chrome Manifest V3 extension that reads the current page, and offers a popup UI that has the page title+content and a textarea for a prompt (with a default value we specify). When the user hits submit, it sends the page title+content to the Anthropic Claude API along with the up to date prompt to summarize it. The user can modify that prompt and re-send the prompt+content to get another summary view of the content.`\r\n\r\n- go to Manage Extensions in Chrome\r\n- load unpacked\r\n- find the relevant folder in your file system and load it\r\n- go to any content heavy site\r\n- click the cute bird\r\n- see it work\r\n\r\nthis entire extension was generated by the prompt in `prompt.md` (except for the images), and was built up over time by adding more words to the prompt in an iterative process.\r\n\r\n## smol dev\r\n\r\nbasic usage\r\n\r\n```bash\r\nmodal run main.py --prompt \""a Chrome extension that, when clicked, opens a small window with a page where you can enter a prompt for reading the currently open page and generating some response from openai\""   \r\n```\r\n\r\nafter a while of adding to your prompt, you can extract your prompt to a file, as long as your \""prompt\"" ends in a .md extension we'll go look for that file\r\n\r\n```bash\r\nmodal run main.py --prompt prompt.md   \r\n```\r\n\r\neach time you run this, the generated directory is deleted (except for images) and all files are rewritten from scratch. \r\n\r\nIn the `shared_dependencies.md` file is a helper file that ensures coherence between files.""]}",50,0.6774933338165283,1,Can my junior dev create a website?
CONTEXT_VALIDATOR,"{""query"": ""What are the best practices for a junior developer to follow when using the smol-ai/developer repository to create a website?"", ""repo"": ""https://github.com/smol-ai/developer"", ""similar_documents"": [""# smol developer\r\n\r\n***Human-centric & Coherent Whole Program Synthesis*** aka your own personal junior developer\r\n\r\n> [Build the thing that builds the thing!](https://twitter.com/swyx/status/1657578738345979905) a `smol dev` for every dev in every situation\r\n\r\nthis is a prototype of a \""junior developer\"" agent (aka `smol dev`) that scaffolds an entire codebase out for you once you give it a product spec, but does not end the world or overpromise AGI. instead of making and maintaining specific, rigid, one-shot starters, like `create-react-app`, or `create-nextjs-app`, this is basically [`create-anything-app`](https://news.ycombinator.com/item?id=35942352) where you develop your scaffolding prompt in a tight loop with your smol dev.\r\n\r\nAI that is helpful, harmless, and honest is complemented by a codebase that is simple, safe, and smol - <200 lines of Python and Prompts, so this is easy to understand and customize.\r\n\r\n<p align=\""center\"">\r\n  <img height=200 src=\""https://pbs.twimg.com/media/FwEzVCcaMAE7t4h?format=jpg&name=large\"" />\r\n</p>\r\n\r\n\r\n*engineering with prompts, rather than prompt engineering* \r\n\r\nThe demo example in `prompt.md` shows the potential of AI-enabled, but still firmly human developer centric, workflow:\r\n\r\n- Human writes a basic prompt for the app they want to build\r\n- `main.py` generates code\r\n- Human runs/reads the code\r\n- Human can:\r\n  - simply add to the prompt as they discover underspecified parts of the prompt"", ""- simply add to the prompt as they discover underspecified parts of the prompt\r\n  - manually runs the code and identifies errors\r\n  - *paste the error into the prompt* just like they would file a github issue\r\n  - for extra help, they can use `debugger.py` which reads the whole codebase to make specific code change suggestions\r\n\r\nLoop until happiness is attained. Notice that AI is only used as long as it is adding value - once it gets in your way, just take over the codebase from your smol junior developer with no fuss and no hurt feelings. (*we could also have smol-dev take over an existing codebase and bootstrap its own prompt... but that's a Future Direction*)\r\n\r\n*Not no code, not low code, but some third thing.* \r\n\r\nPerhaps a higher order evolution of programming where you still need to be technical, but no longer have to implement every detail at least to scaffold things out.\r\n\r\n## video demo\r\n\r\n[![https://i3.ytimg.com/vi/UCo7YeTy-aE/hqdefault.jpg](https://i3.ytimg.com/vi/UCo7YeTy-aE/hqdefault.jpg)](https://youtu.be/UCo7YeTy-aE)\r\n\r\n## arch diagram\r\n\r\nnaturally generated with gpt4, like [we did for babyagi](https://twitter.com/swyx/status/1648724820316786688)\r\n![image](https://github.com/smol-ai/developer/assets/6764957/f8fc68f4-77f6-43ee-852f-a35fb195430a)\r\n\r\n\r\n### innovations and insights\r\n\r\n> Please subscribe to https://latent.space/ for a fuller writeup and insights and reflections"", ""## install\r\n\r\nit's basically: \r\n\r\n- `git clone https://github.com/smol-ai/developer`.\r\n- copy over `.example.env` to `.env` filling in your API keys.\r\n\r\nThere are no python dependencies to wrangle thanks to using Modal as a [self-provisioning runtime](https://www.google.com/search?q=self+provisioning+runtime).\r\n\r\nUnfortunately this project also uses 3 waitlisted things:\r\n\r\n- Modal.com - `pip install modal-client` (private beta - hit up the modal team to get an invite, and login)\r\n  - You can run this project w/o Modal following these instructions:\r\n  - `pip install -r requirements.txt`\r\n  - `python main_no_modal.py YOUR_PROMPT_HERE`\r\n- GPT-4 api (private beta) - can use 3.5 but obviously wont be as good\r\n- (for the demo project) anthropic claude 100k context api (private beta)\r\n\r\n> yes, the most important skill in being an ai engineer is social engineering to get off waitlists. Modal will let you in if you say the keyword \""swyx\""\r\n\r\nyou'll have to adapt this code on a fork if you want to use it on other infra. please open issues/PRs and i'll happily highlight your fork here.\r\n\r\n### trying the example chrome extension"", ""modal-client\r\nopenai\r\ntiktoken"", ""- **ability to install its own dependencies**\r\n  - this leaks into depending on the execution environment, which we all know is the path to dependency madness. how to avoid? dockerize? nix? [web container](https://twitter.com/litbid/status/1658154530385670150)?\r\n  - Modal has an interesting possibility: generate functions that speak modal which also solves the dependency thing https://twitter.com/akshat_b/status/1658146096902811657\r\n- **self-heal** by running the code itself and use errors as information for reprompting \r\n  - however its a bit hard to get errors from the chrome extension environment so we did not try this\r\n- **using anthropic as the coding layer**\r\n  - you can run `modal run anthropic.py --prompt prompt.md --outputdir=anthropic` to try it\r\n  - but it doesnt work because anthropic doesnt follow instructions to generate file code very well.\r\n- **make agents that autonomously run this code in a loop/watch the prompt file** and regenerate code each time, on a new git branch\r\n  - the code could be generated on 5 simultaneous git branches and checking their output would just involve switching git branches""]}",50,0.5371999740600586,1,Can my junior dev create a website?
UPGRADE_QUERY,"{""query"": ""Can my junior dev create a website?"", ""repo"": ""https://github.com/smol-ai/developer""}","1. What resources are available in the smol-ai/developer repository to help a junior developer create a website?
2. Are there any tutorials or guides in the smol-ai/developer repository that can assist a junior developer in building a website?
3. How can a junior developer utilize the smol-ai/developer repository to gain knowledge and skills necessary for creating a website?
4. What are the best practices for a junior developer to follow when using the smol-ai/developer repository to build a website?
5. Can the smol-ai/developer repository provide any templates or frameworks that a junior developer can use to create a website?",12.793346881866455,1,Can my junior dev create a website?
CONTEXT_VALIDATOR,"{""query"": ""What resources are available in the smol-ai/developer repository to help a junior developer create a website?"", ""repo"": ""https://github.com/smol-ai/developer"", ""similar_documents"": [""# smol developer\r\n\r\n***Human-centric & Coherent Whole Program Synthesis*** aka your own personal junior developer\r\n\r\n> [Build the thing that builds the thing!](https://twitter.com/swyx/status/1657578738345979905) a `smol dev` for every dev in every situation\r\n\r\nthis is a prototype of a \""junior developer\"" agent (aka `smol dev`) that scaffolds an entire codebase out for you once you give it a product spec, but does not end the world or overpromise AGI. instead of making and maintaining specific, rigid, one-shot starters, like `create-react-app`, or `create-nextjs-app`, this is basically [`create-anything-app`](https://news.ycombinator.com/item?id=35942352) where you develop your scaffolding prompt in a tight loop with your smol dev.\r\n\r\nAI that is helpful, harmless, and honest is complemented by a codebase that is simple, safe, and smol - <200 lines of Python and Prompts, so this is easy to understand and customize.\r\n\r\n<p align=\""center\"">\r\n  <img height=200 src=\""https://pbs.twimg.com/media/FwEzVCcaMAE7t4h?format=jpg&name=large\"" />\r\n</p>\r\n\r\n\r\n*engineering with prompts, rather than prompt engineering* \r\n\r\nThe demo example in `prompt.md` shows the potential of AI-enabled, but still firmly human developer centric, workflow:\r\n\r\n- Human writes a basic prompt for the app they want to build\r\n- `main.py` generates code\r\n- Human runs/reads the code\r\n- Human can:\r\n  - simply add to the prompt as they discover underspecified parts of the prompt"", ""- simply add to the prompt as they discover underspecified parts of the prompt\r\n  - manually runs the code and identifies errors\r\n  - *paste the error into the prompt* just like they would file a github issue\r\n  - for extra help, they can use `debugger.py` which reads the whole codebase to make specific code change suggestions\r\n\r\nLoop until happiness is attained. Notice that AI is only used as long as it is adding value - once it gets in your way, just take over the codebase from your smol junior developer with no fuss and no hurt feelings. (*we could also have smol-dev take over an existing codebase and bootstrap its own prompt... but that's a Future Direction*)\r\n\r\n*Not no code, not low code, but some third thing.* \r\n\r\nPerhaps a higher order evolution of programming where you still need to be technical, but no longer have to implement every detail at least to scaffold things out.\r\n\r\n## video demo\r\n\r\n[![https://i3.ytimg.com/vi/UCo7YeTy-aE/hqdefault.jpg](https://i3.ytimg.com/vi/UCo7YeTy-aE/hqdefault.jpg)](https://youtu.be/UCo7YeTy-aE)\r\n\r\n## arch diagram\r\n\r\nnaturally generated with gpt4, like [we did for babyagi](https://twitter.com/swyx/status/1648724820316786688)\r\n![image](https://github.com/smol-ai/developer/assets/6764957/f8fc68f4-77f6-43ee-852f-a35fb195430a)\r\n\r\n\r\n### innovations and insights\r\n\r\n> Please subscribe to https://latent.space/ for a fuller writeup and insights and reflections"", ""modal-client\r\nopenai\r\ntiktoken"", ""## install\r\n\r\nit's basically: \r\n\r\n- `git clone https://github.com/smol-ai/developer`.\r\n- copy over `.example.env` to `.env` filling in your API keys.\r\n\r\nThere are no python dependencies to wrangle thanks to using Modal as a [self-provisioning runtime](https://www.google.com/search?q=self+provisioning+runtime).\r\n\r\nUnfortunately this project also uses 3 waitlisted things:\r\n\r\n- Modal.com - `pip install modal-client` (private beta - hit up the modal team to get an invite, and login)\r\n  - You can run this project w/o Modal following these instructions:\r\n  - `pip install -r requirements.txt`\r\n  - `python main_no_modal.py YOUR_PROMPT_HERE`\r\n- GPT-4 api (private beta) - can use 3.5 but obviously wont be as good\r\n- (for the demo project) anthropic claude 100k context api (private beta)\r\n\r\n> yes, the most important skill in being an ai engineer is social engineering to get off waitlists. Modal will let you in if you say the keyword \""swyx\""\r\n\r\nyou'll have to adapt this code on a fork if you want to use it on other infra. please open issues/PRs and i'll happily highlight your fork here.\r\n\r\n### trying the example chrome extension"", ""### trying the example chrome extension\r\n\r\nthe `/generated` and `/exampleChromeExtension` folder contains `a Chrome Manifest V3 extension that reads the current page, and offers a popup UI that has the page title+content and a textarea for a prompt (with a default value we specify). When the user hits submit, it sends the page title+content to the Anthropic Claude API along with the up to date prompt to summarize it. The user can modify that prompt and re-send the prompt+content to get another summary view of the content.`\r\n\r\n- go to Manage Extensions in Chrome\r\n- load unpacked\r\n- find the relevant folder in your file system and load it\r\n- go to any content heavy site\r\n- click the cute bird\r\n- see it work\r\n\r\nthis entire extension was generated by the prompt in `prompt.md` (except for the images), and was built up over time by adding more words to the prompt in an iterative process.\r\n\r\n## smol dev\r\n\r\nbasic usage\r\n\r\n```bash\r\nmodal run main.py --prompt \""a Chrome extension that, when clicked, opens a small window with a page where you can enter a prompt for reading the currently open page and generating some response from openai\""   \r\n```\r\n\r\nafter a while of adding to your prompt, you can extract your prompt to a file, as long as your \""prompt\"" ends in a .md extension we'll go look for that file\r\n\r\n```bash\r\nmodal run main.py --prompt prompt.md   \r\n```\r\n\r\neach time you run this, the generated directory is deleted (except for images) and all files are rewritten from scratch. \r\n\r\nIn the `shared_dependencies.md` file is a helper file that ensures coherence between files.""]}",50,0.6823246479034424,1,Can my junior dev create a website?
CONTEXT_VALIDATOR,"{""query"": ""Are there any tutorials or guides in the smol-ai/developer repository that can assist a junior developer in building a website?"", ""repo"": ""https://github.com/smol-ai/developer"", ""similar_documents"": [""# smol developer\r\n\r\n***Human-centric & Coherent Whole Program Synthesis*** aka your own personal junior developer\r\n\r\n> [Build the thing that builds the thing!](https://twitter.com/swyx/status/1657578738345979905) a `smol dev` for every dev in every situation\r\n\r\nthis is a prototype of a \""junior developer\"" agent (aka `smol dev`) that scaffolds an entire codebase out for you once you give it a product spec, but does not end the world or overpromise AGI. instead of making and maintaining specific, rigid, one-shot starters, like `create-react-app`, or `create-nextjs-app`, this is basically [`create-anything-app`](https://news.ycombinator.com/item?id=35942352) where you develop your scaffolding prompt in a tight loop with your smol dev.\r\n\r\nAI that is helpful, harmless, and honest is complemented by a codebase that is simple, safe, and smol - <200 lines of Python and Prompts, so this is easy to understand and customize.\r\n\r\n<p align=\""center\"">\r\n  <img height=200 src=\""https://pbs.twimg.com/media/FwEzVCcaMAE7t4h?format=jpg&name=large\"" />\r\n</p>\r\n\r\n\r\n*engineering with prompts, rather than prompt engineering* \r\n\r\nThe demo example in `prompt.md` shows the potential of AI-enabled, but still firmly human developer centric, workflow:\r\n\r\n- Human writes a basic prompt for the app they want to build\r\n- `main.py` generates code\r\n- Human runs/reads the code\r\n- Human can:\r\n  - simply add to the prompt as they discover underspecified parts of the prompt"", ""- simply add to the prompt as they discover underspecified parts of the prompt\r\n  - manually runs the code and identifies errors\r\n  - *paste the error into the prompt* just like they would file a github issue\r\n  - for extra help, they can use `debugger.py` which reads the whole codebase to make specific code change suggestions\r\n\r\nLoop until happiness is attained. Notice that AI is only used as long as it is adding value - once it gets in your way, just take over the codebase from your smol junior developer with no fuss and no hurt feelings. (*we could also have smol-dev take over an existing codebase and bootstrap its own prompt... but that's a Future Direction*)\r\n\r\n*Not no code, not low code, but some third thing.* \r\n\r\nPerhaps a higher order evolution of programming where you still need to be technical, but no longer have to implement every detail at least to scaffold things out.\r\n\r\n## video demo\r\n\r\n[![https://i3.ytimg.com/vi/UCo7YeTy-aE/hqdefault.jpg](https://i3.ytimg.com/vi/UCo7YeTy-aE/hqdefault.jpg)](https://youtu.be/UCo7YeTy-aE)\r\n\r\n## arch diagram\r\n\r\nnaturally generated with gpt4, like [we did for babyagi](https://twitter.com/swyx/status/1648724820316786688)\r\n![image](https://github.com/smol-ai/developer/assets/6764957/f8fc68f4-77f6-43ee-852f-a35fb195430a)\r\n\r\n\r\n### innovations and insights\r\n\r\n> Please subscribe to https://latent.space/ for a fuller writeup and insights and reflections"", ""## install\r\n\r\nit's basically: \r\n\r\n- `git clone https://github.com/smol-ai/developer`.\r\n- copy over `.example.env` to `.env` filling in your API keys.\r\n\r\nThere are no python dependencies to wrangle thanks to using Modal as a [self-provisioning runtime](https://www.google.com/search?q=self+provisioning+runtime).\r\n\r\nUnfortunately this project also uses 3 waitlisted things:\r\n\r\n- Modal.com - `pip install modal-client` (private beta - hit up the modal team to get an invite, and login)\r\n  - You can run this project w/o Modal following these instructions:\r\n  - `pip install -r requirements.txt`\r\n  - `python main_no_modal.py YOUR_PROMPT_HERE`\r\n- GPT-4 api (private beta) - can use 3.5 but obviously wont be as good\r\n- (for the demo project) anthropic claude 100k context api (private beta)\r\n\r\n> yes, the most important skill in being an ai engineer is social engineering to get off waitlists. Modal will let you in if you say the keyword \""swyx\""\r\n\r\nyou'll have to adapt this code on a fork if you want to use it on other infra. please open issues/PRs and i'll happily highlight your fork here.\r\n\r\n### trying the example chrome extension"", ""modal-client\r\nopenai\r\ntiktoken"", ""### trying the example chrome extension\r\n\r\nthe `/generated` and `/exampleChromeExtension` folder contains `a Chrome Manifest V3 extension that reads the current page, and offers a popup UI that has the page title+content and a textarea for a prompt (with a default value we specify). When the user hits submit, it sends the page title+content to the Anthropic Claude API along with the up to date prompt to summarize it. The user can modify that prompt and re-send the prompt+content to get another summary view of the content.`\r\n\r\n- go to Manage Extensions in Chrome\r\n- load unpacked\r\n- find the relevant folder in your file system and load it\r\n- go to any content heavy site\r\n- click the cute bird\r\n- see it work\r\n\r\nthis entire extension was generated by the prompt in `prompt.md` (except for the images), and was built up over time by adding more words to the prompt in an iterative process.\r\n\r\n## smol dev\r\n\r\nbasic usage\r\n\r\n```bash\r\nmodal run main.py --prompt \""a Chrome extension that, when clicked, opens a small window with a page where you can enter a prompt for reading the currently open page and generating some response from openai\""   \r\n```\r\n\r\nafter a while of adding to your prompt, you can extract your prompt to a file, as long as your \""prompt\"" ends in a .md extension we'll go look for that file\r\n\r\n```bash\r\nmodal run main.py --prompt prompt.md   \r\n```\r\n\r\neach time you run this, the generated directory is deleted (except for images) and all files are rewritten from scratch. \r\n\r\nIn the `shared_dependencies.md` file is a helper file that ensures coherence between files.""]}",50,0.6266360282897949,1,Can my junior dev create a website?
CONTEXT_VALIDATOR,"{""query"": ""How can a junior developer utilize the smol-ai/developer repository to gain knowledge and skills necessary for creating a website?"", ""repo"": ""https://github.com/smol-ai/developer"", ""similar_documents"": [""# smol developer\r\n\r\n***Human-centric & Coherent Whole Program Synthesis*** aka your own personal junior developer\r\n\r\n> [Build the thing that builds the thing!](https://twitter.com/swyx/status/1657578738345979905) a `smol dev` for every dev in every situation\r\n\r\nthis is a prototype of a \""junior developer\"" agent (aka `smol dev`) that scaffolds an entire codebase out for you once you give it a product spec, but does not end the world or overpromise AGI. instead of making and maintaining specific, rigid, one-shot starters, like `create-react-app`, or `create-nextjs-app`, this is basically [`create-anything-app`](https://news.ycombinator.com/item?id=35942352) where you develop your scaffolding prompt in a tight loop with your smol dev.\r\n\r\nAI that is helpful, harmless, and honest is complemented by a codebase that is simple, safe, and smol - <200 lines of Python and Prompts, so this is easy to understand and customize.\r\n\r\n<p align=\""center\"">\r\n  <img height=200 src=\""https://pbs.twimg.com/media/FwEzVCcaMAE7t4h?format=jpg&name=large\"" />\r\n</p>\r\n\r\n\r\n*engineering with prompts, rather than prompt engineering* \r\n\r\nThe demo example in `prompt.md` shows the potential of AI-enabled, but still firmly human developer centric, workflow:\r\n\r\n- Human writes a basic prompt for the app they want to build\r\n- `main.py` generates code\r\n- Human runs/reads the code\r\n- Human can:\r\n  - simply add to the prompt as they discover underspecified parts of the prompt"", ""- simply add to the prompt as they discover underspecified parts of the prompt\r\n  - manually runs the code and identifies errors\r\n  - *paste the error into the prompt* just like they would file a github issue\r\n  - for extra help, they can use `debugger.py` which reads the whole codebase to make specific code change suggestions\r\n\r\nLoop until happiness is attained. Notice that AI is only used as long as it is adding value - once it gets in your way, just take over the codebase from your smol junior developer with no fuss and no hurt feelings. (*we could also have smol-dev take over an existing codebase and bootstrap its own prompt... but that's a Future Direction*)\r\n\r\n*Not no code, not low code, but some third thing.* \r\n\r\nPerhaps a higher order evolution of programming where you still need to be technical, but no longer have to implement every detail at least to scaffold things out.\r\n\r\n## video demo\r\n\r\n[![https://i3.ytimg.com/vi/UCo7YeTy-aE/hqdefault.jpg](https://i3.ytimg.com/vi/UCo7YeTy-aE/hqdefault.jpg)](https://youtu.be/UCo7YeTy-aE)\r\n\r\n## arch diagram\r\n\r\nnaturally generated with gpt4, like [we did for babyagi](https://twitter.com/swyx/status/1648724820316786688)\r\n![image](https://github.com/smol-ai/developer/assets/6764957/f8fc68f4-77f6-43ee-852f-a35fb195430a)\r\n\r\n\r\n### innovations and insights\r\n\r\n> Please subscribe to https://latent.space/ for a fuller writeup and insights and reflections"", ""## install\r\n\r\nit's basically: \r\n\r\n- `git clone https://github.com/smol-ai/developer`.\r\n- copy over `.example.env` to `.env` filling in your API keys.\r\n\r\nThere are no python dependencies to wrangle thanks to using Modal as a [self-provisioning runtime](https://www.google.com/search?q=self+provisioning+runtime).\r\n\r\nUnfortunately this project also uses 3 waitlisted things:\r\n\r\n- Modal.com - `pip install modal-client` (private beta - hit up the modal team to get an invite, and login)\r\n  - You can run this project w/o Modal following these instructions:\r\n  - `pip install -r requirements.txt`\r\n  - `python main_no_modal.py YOUR_PROMPT_HERE`\r\n- GPT-4 api (private beta) - can use 3.5 but obviously wont be as good\r\n- (for the demo project) anthropic claude 100k context api (private beta)\r\n\r\n> yes, the most important skill in being an ai engineer is social engineering to get off waitlists. Modal will let you in if you say the keyword \""swyx\""\r\n\r\nyou'll have to adapt this code on a fork if you want to use it on other infra. please open issues/PRs and i'll happily highlight your fork here.\r\n\r\n### trying the example chrome extension"", ""- **ability to install its own dependencies**\r\n  - this leaks into depending on the execution environment, which we all know is the path to dependency madness. how to avoid? dockerize? nix? [web container](https://twitter.com/litbid/status/1658154530385670150)?\r\n  - Modal has an interesting possibility: generate functions that speak modal which also solves the dependency thing https://twitter.com/akshat_b/status/1658146096902811657\r\n- **self-heal** by running the code itself and use errors as information for reprompting \r\n  - however its a bit hard to get errors from the chrome extension environment so we did not try this\r\n- **using anthropic as the coding layer**\r\n  - you can run `modal run anthropic.py --prompt prompt.md --outputdir=anthropic` to try it\r\n  - but it doesnt work because anthropic doesnt follow instructions to generate file code very well.\r\n- **make agents that autonomously run this code in a loop/watch the prompt file** and regenerate code each time, on a new git branch\r\n  - the code could be generated on 5 simultaneous git branches and checking their output would just involve switching git branches"", ""modal-client\r\nopenai\r\ntiktoken""]}",50,0.6255526542663574,1,Can my junior dev create a website?
CONTEXT_VALIDATOR,"{""query"": ""What are the best practices for a junior developer to follow when using the smol-ai/developer repository to build a website?"", ""repo"": ""https://github.com/smol-ai/developer"", ""similar_documents"": [""# smol developer\r\n\r\n***Human-centric & Coherent Whole Program Synthesis*** aka your own personal junior developer\r\n\r\n> [Build the thing that builds the thing!](https://twitter.com/swyx/status/1657578738345979905) a `smol dev` for every dev in every situation\r\n\r\nthis is a prototype of a \""junior developer\"" agent (aka `smol dev`) that scaffolds an entire codebase out for you once you give it a product spec, but does not end the world or overpromise AGI. instead of making and maintaining specific, rigid, one-shot starters, like `create-react-app`, or `create-nextjs-app`, this is basically [`create-anything-app`](https://news.ycombinator.com/item?id=35942352) where you develop your scaffolding prompt in a tight loop with your smol dev.\r\n\r\nAI that is helpful, harmless, and honest is complemented by a codebase that is simple, safe, and smol - <200 lines of Python and Prompts, so this is easy to understand and customize.\r\n\r\n<p align=\""center\"">\r\n  <img height=200 src=\""https://pbs.twimg.com/media/FwEzVCcaMAE7t4h?format=jpg&name=large\"" />\r\n</p>\r\n\r\n\r\n*engineering with prompts, rather than prompt engineering* \r\n\r\nThe demo example in `prompt.md` shows the potential of AI-enabled, but still firmly human developer centric, workflow:\r\n\r\n- Human writes a basic prompt for the app they want to build\r\n- `main.py` generates code\r\n- Human runs/reads the code\r\n- Human can:\r\n  - simply add to the prompt as they discover underspecified parts of the prompt"", ""- simply add to the prompt as they discover underspecified parts of the prompt\r\n  - manually runs the code and identifies errors\r\n  - *paste the error into the prompt* just like they would file a github issue\r\n  - for extra help, they can use `debugger.py` which reads the whole codebase to make specific code change suggestions\r\n\r\nLoop until happiness is attained. Notice that AI is only used as long as it is adding value - once it gets in your way, just take over the codebase from your smol junior developer with no fuss and no hurt feelings. (*we could also have smol-dev take over an existing codebase and bootstrap its own prompt... but that's a Future Direction*)\r\n\r\n*Not no code, not low code, but some third thing.* \r\n\r\nPerhaps a higher order evolution of programming where you still need to be technical, but no longer have to implement every detail at least to scaffold things out.\r\n\r\n## video demo\r\n\r\n[![https://i3.ytimg.com/vi/UCo7YeTy-aE/hqdefault.jpg](https://i3.ytimg.com/vi/UCo7YeTy-aE/hqdefault.jpg)](https://youtu.be/UCo7YeTy-aE)\r\n\r\n## arch diagram\r\n\r\nnaturally generated with gpt4, like [we did for babyagi](https://twitter.com/swyx/status/1648724820316786688)\r\n![image](https://github.com/smol-ai/developer/assets/6764957/f8fc68f4-77f6-43ee-852f-a35fb195430a)\r\n\r\n\r\n### innovations and insights\r\n\r\n> Please subscribe to https://latent.space/ for a fuller writeup and insights and reflections"", ""## install\r\n\r\nit's basically: \r\n\r\n- `git clone https://github.com/smol-ai/developer`.\r\n- copy over `.example.env` to `.env` filling in your API keys.\r\n\r\nThere are no python dependencies to wrangle thanks to using Modal as a [self-provisioning runtime](https://www.google.com/search?q=self+provisioning+runtime).\r\n\r\nUnfortunately this project also uses 3 waitlisted things:\r\n\r\n- Modal.com - `pip install modal-client` (private beta - hit up the modal team to get an invite, and login)\r\n  - You can run this project w/o Modal following these instructions:\r\n  - `pip install -r requirements.txt`\r\n  - `python main_no_modal.py YOUR_PROMPT_HERE`\r\n- GPT-4 api (private beta) - can use 3.5 but obviously wont be as good\r\n- (for the demo project) anthropic claude 100k context api (private beta)\r\n\r\n> yes, the most important skill in being an ai engineer is social engineering to get off waitlists. Modal will let you in if you say the keyword \""swyx\""\r\n\r\nyou'll have to adapt this code on a fork if you want to use it on other infra. please open issues/PRs and i'll happily highlight your fork here.\r\n\r\n### trying the example chrome extension"", ""modal-client\r\nopenai\r\ntiktoken"", ""- **ability to install its own dependencies**\r\n  - this leaks into depending on the execution environment, which we all know is the path to dependency madness. how to avoid? dockerize? nix? [web container](https://twitter.com/litbid/status/1658154530385670150)?\r\n  - Modal has an interesting possibility: generate functions that speak modal which also solves the dependency thing https://twitter.com/akshat_b/status/1658146096902811657\r\n- **self-heal** by running the code itself and use errors as information for reprompting \r\n  - however its a bit hard to get errors from the chrome extension environment so we did not try this\r\n- **using anthropic as the coding layer**\r\n  - you can run `modal run anthropic.py --prompt prompt.md --outputdir=anthropic` to try it\r\n  - but it doesnt work because anthropic doesnt follow instructions to generate file code very well.\r\n- **make agents that autonomously run this code in a loop/watch the prompt file** and regenerate code each time, on a new git branch\r\n  - the code could be generated on 5 simultaneous git branches and checking their output would just involve switching git branches""]}",50,0.6339569091796875,1,Can my junior dev create a website?
CONTEXT_VALIDATOR,"{""query"": ""Can the smol-ai/developer repository provide any templates or frameworks that a junior developer can use to create a website?"", ""repo"": ""https://github.com/smol-ai/developer"", ""similar_documents"": [""# smol developer\r\n\r\n***Human-centric & Coherent Whole Program Synthesis*** aka your own personal junior developer\r\n\r\n> [Build the thing that builds the thing!](https://twitter.com/swyx/status/1657578738345979905) a `smol dev` for every dev in every situation\r\n\r\nthis is a prototype of a \""junior developer\"" agent (aka `smol dev`) that scaffolds an entire codebase out for you once you give it a product spec, but does not end the world or overpromise AGI. instead of making and maintaining specific, rigid, one-shot starters, like `create-react-app`, or `create-nextjs-app`, this is basically [`create-anything-app`](https://news.ycombinator.com/item?id=35942352) where you develop your scaffolding prompt in a tight loop with your smol dev.\r\n\r\nAI that is helpful, harmless, and honest is complemented by a codebase that is simple, safe, and smol - <200 lines of Python and Prompts, so this is easy to understand and customize.\r\n\r\n<p align=\""center\"">\r\n  <img height=200 src=\""https://pbs.twimg.com/media/FwEzVCcaMAE7t4h?format=jpg&name=large\"" />\r\n</p>\r\n\r\n\r\n*engineering with prompts, rather than prompt engineering* \r\n\r\nThe demo example in `prompt.md` shows the potential of AI-enabled, but still firmly human developer centric, workflow:\r\n\r\n- Human writes a basic prompt for the app they want to build\r\n- `main.py` generates code\r\n- Human runs/reads the code\r\n- Human can:\r\n  - simply add to the prompt as they discover underspecified parts of the prompt"", ""- simply add to the prompt as they discover underspecified parts of the prompt\r\n  - manually runs the code and identifies errors\r\n  - *paste the error into the prompt* just like they would file a github issue\r\n  - for extra help, they can use `debugger.py` which reads the whole codebase to make specific code change suggestions\r\n\r\nLoop until happiness is attained. Notice that AI is only used as long as it is adding value - once it gets in your way, just take over the codebase from your smol junior developer with no fuss and no hurt feelings. (*we could also have smol-dev take over an existing codebase and bootstrap its own prompt... but that's a Future Direction*)\r\n\r\n*Not no code, not low code, but some third thing.* \r\n\r\nPerhaps a higher order evolution of programming where you still need to be technical, but no longer have to implement every detail at least to scaffold things out.\r\n\r\n## video demo\r\n\r\n[![https://i3.ytimg.com/vi/UCo7YeTy-aE/hqdefault.jpg](https://i3.ytimg.com/vi/UCo7YeTy-aE/hqdefault.jpg)](https://youtu.be/UCo7YeTy-aE)\r\n\r\n## arch diagram\r\n\r\nnaturally generated with gpt4, like [we did for babyagi](https://twitter.com/swyx/status/1648724820316786688)\r\n![image](https://github.com/smol-ai/developer/assets/6764957/f8fc68f4-77f6-43ee-852f-a35fb195430a)\r\n\r\n\r\n### innovations and insights\r\n\r\n> Please subscribe to https://latent.space/ for a fuller writeup and insights and reflections"", ""modal-client\r\nopenai\r\ntiktoken"", ""## install\r\n\r\nit's basically: \r\n\r\n- `git clone https://github.com/smol-ai/developer`.\r\n- copy over `.example.env` to `.env` filling in your API keys.\r\n\r\nThere are no python dependencies to wrangle thanks to using Modal as a [self-provisioning runtime](https://www.google.com/search?q=self+provisioning+runtime).\r\n\r\nUnfortunately this project also uses 3 waitlisted things:\r\n\r\n- Modal.com - `pip install modal-client` (private beta - hit up the modal team to get an invite, and login)\r\n  - You can run this project w/o Modal following these instructions:\r\n  - `pip install -r requirements.txt`\r\n  - `python main_no_modal.py YOUR_PROMPT_HERE`\r\n- GPT-4 api (private beta) - can use 3.5 but obviously wont be as good\r\n- (for the demo project) anthropic claude 100k context api (private beta)\r\n\r\n> yes, the most important skill in being an ai engineer is social engineering to get off waitlists. Modal will let you in if you say the keyword \""swyx\""\r\n\r\nyou'll have to adapt this code on a fork if you want to use it on other infra. please open issues/PRs and i'll happily highlight your fork here.\r\n\r\n### trying the example chrome extension"", ""- **ability to install its own dependencies**\r\n  - this leaks into depending on the execution environment, which we all know is the path to dependency madness. how to avoid? dockerize? nix? [web container](https://twitter.com/litbid/status/1658154530385670150)?\r\n  - Modal has an interesting possibility: generate functions that speak modal which also solves the dependency thing https://twitter.com/akshat_b/status/1658146096902811657\r\n- **self-heal** by running the code itself and use errors as information for reprompting \r\n  - however its a bit hard to get errors from the chrome extension environment so we did not try this\r\n- **using anthropic as the coding layer**\r\n  - you can run `modal run anthropic.py --prompt prompt.md --outputdir=anthropic` to try it\r\n  - but it doesnt work because anthropic doesnt follow instructions to generate file code very well.\r\n- **make agents that autonomously run this code in a loop/watch the prompt file** and regenerate code each time, on a new git branch\r\n  - the code could be generated on 5 simultaneous git branches and checking their output would just involve switching git branches""]}",70,0.6283524036407471,1,Can my junior dev create a website?
RUN_QUERY_RAG,"{""query"": ""Can the smol-ai/developer repository provide any templates or frameworks that a junior developer can use to create a website?"", ""repo"": ""https://github.com/smol-ai/developer"", ""similar_documents"": [""# smol developer\r\n\r\n***Human-centric & Coherent Whole Program Synthesis*** aka your own personal junior developer\r\n\r\n> [Build the thing that builds the thing!](https://twitter.com/swyx/status/1657578738345979905) a `smol dev` for every dev in every situation\r\n\r\nthis is a prototype of a \""junior developer\"" agent (aka `smol dev`) that scaffolds an entire codebase out for you once you give it a product spec, but does not end the world or overpromise AGI. instead of making and maintaining specific, rigid, one-shot starters, like `create-react-app`, or `create-nextjs-app`, this is basically [`create-anything-app`](https://news.ycombinator.com/item?id=35942352) where you develop your scaffolding prompt in a tight loop with your smol dev.\r\n\r\nAI that is helpful, harmless, and honest is complemented by a codebase that is simple, safe, and smol - <200 lines of Python and Prompts, so this is easy to understand and customize.\r\n\r\n<p align=\""center\"">\r\n  <img height=200 src=\""https://pbs.twimg.com/media/FwEzVCcaMAE7t4h?format=jpg&name=large\"" />\r\n</p>\r\n\r\n\r\n*engineering with prompts, rather than prompt engineering* \r\n\r\nThe demo example in `prompt.md` shows the potential of AI-enabled, but still firmly human developer centric, workflow:\r\n\r\n- Human writes a basic prompt for the app they want to build\r\n- `main.py` generates code\r\n- Human runs/reads the code\r\n- Human can:\r\n  - simply add to the prompt as they discover underspecified parts of the prompt"", ""- simply add to the prompt as they discover underspecified parts of the prompt\r\n  - manually runs the code and identifies errors\r\n  - *paste the error into the prompt* just like they would file a github issue\r\n  - for extra help, they can use `debugger.py` which reads the whole codebase to make specific code change suggestions\r\n\r\nLoop until happiness is attained. Notice that AI is only used as long as it is adding value - once it gets in your way, just take over the codebase from your smol junior developer with no fuss and no hurt feelings. (*we could also have smol-dev take over an existing codebase and bootstrap its own prompt... but that's a Future Direction*)\r\n\r\n*Not no code, not low code, but some third thing.* \r\n\r\nPerhaps a higher order evolution of programming where you still need to be technical, but no longer have to implement every detail at least to scaffold things out.\r\n\r\n## video demo\r\n\r\n[![https://i3.ytimg.com/vi/UCo7YeTy-aE/hqdefault.jpg](https://i3.ytimg.com/vi/UCo7YeTy-aE/hqdefault.jpg)](https://youtu.be/UCo7YeTy-aE)\r\n\r\n## arch diagram\r\n\r\nnaturally generated with gpt4, like [we did for babyagi](https://twitter.com/swyx/status/1648724820316786688)\r\n![image](https://github.com/smol-ai/developer/assets/6764957/f8fc68f4-77f6-43ee-852f-a35fb195430a)\r\n\r\n\r\n### innovations and insights\r\n\r\n> Please subscribe to https://latent.space/ for a fuller writeup and insights and reflections"", ""modal-client\r\nopenai\r\ntiktoken"", ""## install\r\n\r\nit's basically: \r\n\r\n- `git clone https://github.com/smol-ai/developer`.\r\n- copy over `.example.env` to `.env` filling in your API keys.\r\n\r\nThere are no python dependencies to wrangle thanks to using Modal as a [self-provisioning runtime](https://www.google.com/search?q=self+provisioning+runtime).\r\n\r\nUnfortunately this project also uses 3 waitlisted things:\r\n\r\n- Modal.com - `pip install modal-client` (private beta - hit up the modal team to get an invite, and login)\r\n  - You can run this project w/o Modal following these instructions:\r\n  - `pip install -r requirements.txt`\r\n  - `python main_no_modal.py YOUR_PROMPT_HERE`\r\n- GPT-4 api (private beta) - can use 3.5 but obviously wont be as good\r\n- (for the demo project) anthropic claude 100k context api (private beta)\r\n\r\n> yes, the most important skill in being an ai engineer is social engineering to get off waitlists. Modal will let you in if you say the keyword \""swyx\""\r\n\r\nyou'll have to adapt this code on a fork if you want to use it on other infra. please open issues/PRs and i'll happily highlight your fork here.\r\n\r\n### trying the example chrome extension"", ""- **ability to install its own dependencies**\r\n  - this leaks into depending on the execution environment, which we all know is the path to dependency madness. how to avoid? dockerize? nix? [web container](https://twitter.com/litbid/status/1658154530385670150)?\r\n  - Modal has an interesting possibility: generate functions that speak modal which also solves the dependency thing https://twitter.com/akshat_b/status/1658146096902811657\r\n- **self-heal** by running the code itself and use errors as information for reprompting \r\n  - however its a bit hard to get errors from the chrome extension environment so we did not try this\r\n- **using anthropic as the coding layer**\r\n  - you can run `modal run anthropic.py --prompt prompt.md --outputdir=anthropic` to try it\r\n  - but it doesnt work because anthropic doesnt follow instructions to generate file code very well.\r\n- **make agents that autonomously run this code in a loop/watch the prompt file** and regenerate code each time, on a new git branch\r\n  - the code could be generated on 5 simultaneous git branches and checking their output would just involve switching git branches""]}","Yes, the smol-ai/developer repository provides a prototype of a ""junior developer"" agent called `smol dev` that can scaffold an entire codebase for a website once given a product spec. This agent is designed to be helpful, harmless, and honest, and is complemented by a codebase that is simple, safe, and less than 200 lines of Python and Prompts, making it easy to understand and customize. The `smol dev` works by generating code based on prompts written by a human, who can then manually run and read the code, identify errors, and paste the error into the prompt just like filing a Github issue. The `smol dev` is not a no-code or low-code solution, but rather a higher order evolution of programming where you still need to be technical, but no longer have to implement every detail to scaffold things out. To use the `smol dev`, you need to clone the repository and copy over `.example.env` to `.env`, filling in your API keys. However, this project also uses some private beta APIs, so you may need to adapt the code on a fork if you want to use it on other infra.",27.317063808441162,1,Can my junior dev create a website?
CONTEXT_VALIDATOR,"{""query"": ""Can my junior dev create a website?"", ""repo"": ""https://github.com/smol-ai/developer"", ""similar_documents"": [""# smol developer\r\n\r\n***Human-centric & Coherent Whole Program Synthesis*** aka your own personal junior developer\r\n\r\n> [Build the thing that builds the thing!](https://twitter.com/swyx/status/1657578738345979905) a `smol dev` for every dev in every situation\r\n\r\nthis is a prototype of a \""junior developer\"" agent (aka `smol dev`) that scaffolds an entire codebase out for you once you give it a product spec, but does not end the world or overpromise AGI. instead of making and maintaining specific, rigid, one-shot starters, like `create-react-app`, or `create-nextjs-app`, this is basically [`create-anything-app`](https://news.ycombinator.com/item?id=35942352) where you develop your scaffolding prompt in a tight loop with your smol dev.\r\n\r\nAI that is helpful, harmless, and honest is complemented by a codebase that is simple, safe, and smol - <200 lines of Python and Prompts, so this is easy to understand and customize.\r\n\r\n<p align=\""center\"">\r\n  <img height=200 src=\""https://pbs.twimg.com/media/FwEzVCcaMAE7t4h?format=jpg&name=large\"" />\r\n</p>\r\n\r\n\r\n*engineering with prompts, rather than prompt engineering* \r\n\r\nThe demo example in `prompt.md` shows the potential of AI-enabled, but still firmly human developer centric, workflow:\r\n\r\n- Human writes a basic prompt for the app they want to build\r\n- `main.py` generates code\r\n- Human runs/reads the code\r\n- Human can:\r\n  - simply add to the prompt as they discover underspecified parts of the prompt"", ""body {\r\n  font-family: Arial, sans-serif;\r\n  margin: 0;\r\n  padding: 15px;\r\n}\r\n\r\ntextarea, input {\r\n  display: block;\r\n  width: 100%;\r\n  margin-bottom: 10px;\r\n  padding: 5px;\r\n  font-size: 14px;\r\n}\r\n\r\nbutton {\r\n  background-color: #4CAF50;\r\n  border: none;\r\n  color: white;\r\n  padding: 10px 20px;\r\n  text-align: center;\r\n  text-decoration: none;\r\n  display: inline-block;\r\n  font-size: 14px;\r\n  margin: 10px 0;\r\n  cursor: pointer;\r\n}\r\n\r\nbutton:hover {\r\n  background-color: #45a049;\r\n}\r\n\r\n#content {\r\n  margin-top: 20px;\r\n  font-size: 14px;\r\n  line-height: 1.5;\r\n}\r\n\r\n#loadingIndicator {\r\n  display: none;\r\n  font-size: 14px;\r\n  color: #999;\r\n}"", ""<!DOCTYPE html>\r\n<html lang=\""en\"">\r\n<head>\r\n  <meta charset=\""UTF-8\"">\r\n  <meta name=\""viewport\"" content=\""width=device-width, initial-scale=1.0\"">\r\n  <title>Anthropic Summary</title>\r\n  <link rel=\""stylesheet\"" href=\""styles.css\"">\r\n</head>\r\n<body>\r\n  <div id=\""content\""></div>\r\n  <div id=\""loadingIndicator\""></div>\r\n  <textarea id=\""userPrompt\""></textarea>\r\n  <button id=\""sendButton\"">Submit</button>\r\n  <script src=\""popup.js\""></script>\r\n</body>\r\n</html>"", ""- simply add to the prompt as they discover underspecified parts of the prompt\r\n  - manually runs the code and identifies errors\r\n  - *paste the error into the prompt* just like they would file a github issue\r\n  - for extra help, they can use `debugger.py` which reads the whole codebase to make specific code change suggestions\r\n\r\nLoop until happiness is attained. Notice that AI is only used as long as it is adding value - once it gets in your way, just take over the codebase from your smol junior developer with no fuss and no hurt feelings. (*we could also have smol-dev take over an existing codebase and bootstrap its own prompt... but that's a Future Direction*)\r\n\r\n*Not no code, not low code, but some third thing.* \r\n\r\nPerhaps a higher order evolution of programming where you still need to be technical, but no longer have to implement every detail at least to scaffold things out.\r\n\r\n## video demo\r\n\r\n[![https://i3.ytimg.com/vi/UCo7YeTy-aE/hqdefault.jpg](https://i3.ytimg.com/vi/UCo7YeTy-aE/hqdefault.jpg)](https://youtu.be/UCo7YeTy-aE)\r\n\r\n## arch diagram\r\n\r\nnaturally generated with gpt4, like [we did for babyagi](https://twitter.com/swyx/status/1648724820316786688)\r\n![image](https://github.com/smol-ai/developer/assets/6764957/f8fc68f4-77f6-43ee-852f-a35fb195430a)\r\n\r\n\r\n### innovations and insights\r\n\r\n> Please subscribe to https://latent.space/ for a fuller writeup and insights and reflections"", ""body {\r\n  margin: 16px;\r\n  font-family: -apple-system, BlinkMacSystemFont, \""Segoe UI\"", Roboto, Helvetica, Arial, sans-serif, \""Apple Color Emoji\"", \""Segoe UI Emoji\"", \""Segoe UI Symbol\"";\r\n  min-width: 400px;\r\n  min-height: 600px;\r\n}\r\n\r\n#content {\r\n  margin-bottom: 16px;\r\n}\r\n\r\n#userPrompt {\r\n  width: 100%;\r\n  height: 80px;\r\n  resize: none;\r\n  margin-bottom: 8px;\r\n}\r\n\r\n#sendButton {\r\n  display: inline-block;\r\n  background-color: #007bff;\r\n  color: white;\r\n  padding: 8px 16px;\r\n  border-radius: 4px;\r\n  text-decoration: none;\r\n  cursor: pointer;\r\n  transition: background-color 0.2s;\r\n}\r\n\r\n#sendButton:hover {\r\n  background-color: #0056b3;\r\n}\r\n\r\n#sendButton:disabled {\r\n  background-color: #6c757d;\r\n  cursor: not-allowed;\r\n}\r\n\r\n#loadingIndicator {\r\n  display: none;\r\n  width: 100%;\r\n  height: 8rem;\r\n  border-radius: 1rem;\r\n  margin-bottom: 2rem;\r\n  background-image: linear-gradient(-45deg, #007bff 25%, transparent 25%, transparent 50%, #007bff 50%, #007bff 75%, transparent 75%, transparent);\r\n  background-size: 40px 40px;""]}",50,0.6910765171051025,2,Can my junior dev create a website?
UPGRADE_QUERY,"{""query"": ""Can my junior dev create a website?"", ""repo"": ""https://github.com/smol-ai/developer""}","1. What resources are available in the smol-ai/developer repository to help a junior developer create a website?
2. Are there any tutorials or guides in the smol-ai/developer repository that can assist a junior developer in building a website?
3. Can a junior developer use the code in the smol-ai/developer repository to create a website? If so, what are the best practices to follow?
4. What are the prerequisites for a junior developer to create a website using the smol-ai/developer repository? Are there any specific skills or knowledge required?
5. How can a junior developer leverage the smol-ai/developer repository to create a website efficiently and effectively? Are there any tips or tricks to keep in mind?",15.229851484298706,2,Can my junior dev create a website?
CONTEXT_VALIDATOR,"{""query"": ""What resources are available in the smol-ai/developer repository to help a junior developer create a website?"", ""repo"": ""https://github.com/smol-ai/developer"", ""similar_documents"": [""# smol developer\r\n\r\n***Human-centric & Coherent Whole Program Synthesis*** aka your own personal junior developer\r\n\r\n> [Build the thing that builds the thing!](https://twitter.com/swyx/status/1657578738345979905) a `smol dev` for every dev in every situation\r\n\r\nthis is a prototype of a \""junior developer\"" agent (aka `smol dev`) that scaffolds an entire codebase out for you once you give it a product spec, but does not end the world or overpromise AGI. instead of making and maintaining specific, rigid, one-shot starters, like `create-react-app`, or `create-nextjs-app`, this is basically [`create-anything-app`](https://news.ycombinator.com/item?id=35942352) where you develop your scaffolding prompt in a tight loop with your smol dev.\r\n\r\nAI that is helpful, harmless, and honest is complemented by a codebase that is simple, safe, and smol - <200 lines of Python and Prompts, so this is easy to understand and customize.\r\n\r\n<p align=\""center\"">\r\n  <img height=200 src=\""https://pbs.twimg.com/media/FwEzVCcaMAE7t4h?format=jpg&name=large\"" />\r\n</p>\r\n\r\n\r\n*engineering with prompts, rather than prompt engineering* \r\n\r\nThe demo example in `prompt.md` shows the potential of AI-enabled, but still firmly human developer centric, workflow:\r\n\r\n- Human writes a basic prompt for the app they want to build\r\n- `main.py` generates code\r\n- Human runs/reads the code\r\n- Human can:\r\n  - simply add to the prompt as they discover underspecified parts of the prompt"", ""- simply add to the prompt as they discover underspecified parts of the prompt\r\n  - manually runs the code and identifies errors\r\n  - *paste the error into the prompt* just like they would file a github issue\r\n  - for extra help, they can use `debugger.py` which reads the whole codebase to make specific code change suggestions\r\n\r\nLoop until happiness is attained. Notice that AI is only used as long as it is adding value - once it gets in your way, just take over the codebase from your smol junior developer with no fuss and no hurt feelings. (*we could also have smol-dev take over an existing codebase and bootstrap its own prompt... but that's a Future Direction*)\r\n\r\n*Not no code, not low code, but some third thing.* \r\n\r\nPerhaps a higher order evolution of programming where you still need to be technical, but no longer have to implement every detail at least to scaffold things out.\r\n\r\n## video demo\r\n\r\n[![https://i3.ytimg.com/vi/UCo7YeTy-aE/hqdefault.jpg](https://i3.ytimg.com/vi/UCo7YeTy-aE/hqdefault.jpg)](https://youtu.be/UCo7YeTy-aE)\r\n\r\n## arch diagram\r\n\r\nnaturally generated with gpt4, like [we did for babyagi](https://twitter.com/swyx/status/1648724820316786688)\r\n![image](https://github.com/smol-ai/developer/assets/6764957/f8fc68f4-77f6-43ee-852f-a35fb195430a)\r\n\r\n\r\n### innovations and insights\r\n\r\n> Please subscribe to https://latent.space/ for a fuller writeup and insights and reflections"", ""modal-client\r\nopenai\r\ntiktoken"", ""## install\r\n\r\nit's basically: \r\n\r\n- `git clone https://github.com/smol-ai/developer`.\r\n- copy over `.example.env` to `.env` filling in your API keys.\r\n\r\nThere are no python dependencies to wrangle thanks to using Modal as a [self-provisioning runtime](https://www.google.com/search?q=self+provisioning+runtime).\r\n\r\nUnfortunately this project also uses 3 waitlisted things:\r\n\r\n- Modal.com - `pip install modal-client` (private beta - hit up the modal team to get an invite, and login)\r\n  - You can run this project w/o Modal following these instructions:\r\n  - `pip install -r requirements.txt`\r\n  - `python main_no_modal.py YOUR_PROMPT_HERE`\r\n- GPT-4 api (private beta) - can use 3.5 but obviously wont be as good\r\n- (for the demo project) anthropic claude 100k context api (private beta)\r\n\r\n> yes, the most important skill in being an ai engineer is social engineering to get off waitlists. Modal will let you in if you say the keyword \""swyx\""\r\n\r\nyou'll have to adapt this code on a fork if you want to use it on other infra. please open issues/PRs and i'll happily highlight your fork here.\r\n\r\n### trying the example chrome extension"", ""### trying the example chrome extension\r\n\r\nthe `/generated` and `/exampleChromeExtension` folder contains `a Chrome Manifest V3 extension that reads the current page, and offers a popup UI that has the page title+content and a textarea for a prompt (with a default value we specify). When the user hits submit, it sends the page title+content to the Anthropic Claude API along with the up to date prompt to summarize it. The user can modify that prompt and re-send the prompt+content to get another summary view of the content.`\r\n\r\n- go to Manage Extensions in Chrome\r\n- load unpacked\r\n- find the relevant folder in your file system and load it\r\n- go to any content heavy site\r\n- click the cute bird\r\n- see it work\r\n\r\nthis entire extension was generated by the prompt in `prompt.md` (except for the images), and was built up over time by adding more words to the prompt in an iterative process.\r\n\r\n## smol dev\r\n\r\nbasic usage\r\n\r\n```bash\r\nmodal run main.py --prompt \""a Chrome extension that, when clicked, opens a small window with a page where you can enter a prompt for reading the currently open page and generating some response from openai\""   \r\n```\r\n\r\nafter a while of adding to your prompt, you can extract your prompt to a file, as long as your \""prompt\"" ends in a .md extension we'll go look for that file\r\n\r\n```bash\r\nmodal run main.py --prompt prompt.md   \r\n```\r\n\r\neach time you run this, the generated directory is deleted (except for images) and all files are rewritten from scratch. \r\n\r\nIn the `shared_dependencies.md` file is a helper file that ensures coherence between files.""]}",50,0.6954498291015625,2,Can my junior dev create a website?
CONTEXT_VALIDATOR,"{""query"": ""Are there any tutorials or guides in the smol-ai/developer repository that can assist a junior developer in building a website?"", ""repo"": ""https://github.com/smol-ai/developer"", ""similar_documents"": [""# smol developer\r\n\r\n***Human-centric & Coherent Whole Program Synthesis*** aka your own personal junior developer\r\n\r\n> [Build the thing that builds the thing!](https://twitter.com/swyx/status/1657578738345979905) a `smol dev` for every dev in every situation\r\n\r\nthis is a prototype of a \""junior developer\"" agent (aka `smol dev`) that scaffolds an entire codebase out for you once you give it a product spec, but does not end the world or overpromise AGI. instead of making and maintaining specific, rigid, one-shot starters, like `create-react-app`, or `create-nextjs-app`, this is basically [`create-anything-app`](https://news.ycombinator.com/item?id=35942352) where you develop your scaffolding prompt in a tight loop with your smol dev.\r\n\r\nAI that is helpful, harmless, and honest is complemented by a codebase that is simple, safe, and smol - <200 lines of Python and Prompts, so this is easy to understand and customize.\r\n\r\n<p align=\""center\"">\r\n  <img height=200 src=\""https://pbs.twimg.com/media/FwEzVCcaMAE7t4h?format=jpg&name=large\"" />\r\n</p>\r\n\r\n\r\n*engineering with prompts, rather than prompt engineering* \r\n\r\nThe demo example in `prompt.md` shows the potential of AI-enabled, but still firmly human developer centric, workflow:\r\n\r\n- Human writes a basic prompt for the app they want to build\r\n- `main.py` generates code\r\n- Human runs/reads the code\r\n- Human can:\r\n  - simply add to the prompt as they discover underspecified parts of the prompt"", ""- simply add to the prompt as they discover underspecified parts of the prompt\r\n  - manually runs the code and identifies errors\r\n  - *paste the error into the prompt* just like they would file a github issue\r\n  - for extra help, they can use `debugger.py` which reads the whole codebase to make specific code change suggestions\r\n\r\nLoop until happiness is attained. Notice that AI is only used as long as it is adding value - once it gets in your way, just take over the codebase from your smol junior developer with no fuss and no hurt feelings. (*we could also have smol-dev take over an existing codebase and bootstrap its own prompt... but that's a Future Direction*)\r\n\r\n*Not no code, not low code, but some third thing.* \r\n\r\nPerhaps a higher order evolution of programming where you still need to be technical, but no longer have to implement every detail at least to scaffold things out.\r\n\r\n## video demo\r\n\r\n[![https://i3.ytimg.com/vi/UCo7YeTy-aE/hqdefault.jpg](https://i3.ytimg.com/vi/UCo7YeTy-aE/hqdefault.jpg)](https://youtu.be/UCo7YeTy-aE)\r\n\r\n## arch diagram\r\n\r\nnaturally generated with gpt4, like [we did for babyagi](https://twitter.com/swyx/status/1648724820316786688)\r\n![image](https://github.com/smol-ai/developer/assets/6764957/f8fc68f4-77f6-43ee-852f-a35fb195430a)\r\n\r\n\r\n### innovations and insights\r\n\r\n> Please subscribe to https://latent.space/ for a fuller writeup and insights and reflections"", ""## install\r\n\r\nit's basically: \r\n\r\n- `git clone https://github.com/smol-ai/developer`.\r\n- copy over `.example.env` to `.env` filling in your API keys.\r\n\r\nThere are no python dependencies to wrangle thanks to using Modal as a [self-provisioning runtime](https://www.google.com/search?q=self+provisioning+runtime).\r\n\r\nUnfortunately this project also uses 3 waitlisted things:\r\n\r\n- Modal.com - `pip install modal-client` (private beta - hit up the modal team to get an invite, and login)\r\n  - You can run this project w/o Modal following these instructions:\r\n  - `pip install -r requirements.txt`\r\n  - `python main_no_modal.py YOUR_PROMPT_HERE`\r\n- GPT-4 api (private beta) - can use 3.5 but obviously wont be as good\r\n- (for the demo project) anthropic claude 100k context api (private beta)\r\n\r\n> yes, the most important skill in being an ai engineer is social engineering to get off waitlists. Modal will let you in if you say the keyword \""swyx\""\r\n\r\nyou'll have to adapt this code on a fork if you want to use it on other infra. please open issues/PRs and i'll happily highlight your fork here.\r\n\r\n### trying the example chrome extension"", ""modal-client\r\nopenai\r\ntiktoken"", ""### trying the example chrome extension\r\n\r\nthe `/generated` and `/exampleChromeExtension` folder contains `a Chrome Manifest V3 extension that reads the current page, and offers a popup UI that has the page title+content and a textarea for a prompt (with a default value we specify). When the user hits submit, it sends the page title+content to the Anthropic Claude API along with the up to date prompt to summarize it. The user can modify that prompt and re-send the prompt+content to get another summary view of the content.`\r\n\r\n- go to Manage Extensions in Chrome\r\n- load unpacked\r\n- find the relevant folder in your file system and load it\r\n- go to any content heavy site\r\n- click the cute bird\r\n- see it work\r\n\r\nthis entire extension was generated by the prompt in `prompt.md` (except for the images), and was built up over time by adding more words to the prompt in an iterative process.\r\n\r\n## smol dev\r\n\r\nbasic usage\r\n\r\n```bash\r\nmodal run main.py --prompt \""a Chrome extension that, when clicked, opens a small window with a page where you can enter a prompt for reading the currently open page and generating some response from openai\""   \r\n```\r\n\r\nafter a while of adding to your prompt, you can extract your prompt to a file, as long as your \""prompt\"" ends in a .md extension we'll go look for that file\r\n\r\n```bash\r\nmodal run main.py --prompt prompt.md   \r\n```\r\n\r\neach time you run this, the generated directory is deleted (except for images) and all files are rewritten from scratch. \r\n\r\nIn the `shared_dependencies.md` file is a helper file that ensures coherence between files.""]}",50,0.7579562664031982,2,Can my junior dev create a website?
CONTEXT_VALIDATOR,"{""query"": ""Can a junior developer use the code in the smol-ai/developer repository to create a website? If so, what are the best practices to follow?"", ""repo"": ""https://github.com/smol-ai/developer"", ""similar_documents"": [""# smol developer\r\n\r\n***Human-centric & Coherent Whole Program Synthesis*** aka your own personal junior developer\r\n\r\n> [Build the thing that builds the thing!](https://twitter.com/swyx/status/1657578738345979905) a `smol dev` for every dev in every situation\r\n\r\nthis is a prototype of a \""junior developer\"" agent (aka `smol dev`) that scaffolds an entire codebase out for you once you give it a product spec, but does not end the world or overpromise AGI. instead of making and maintaining specific, rigid, one-shot starters, like `create-react-app`, or `create-nextjs-app`, this is basically [`create-anything-app`](https://news.ycombinator.com/item?id=35942352) where you develop your scaffolding prompt in a tight loop with your smol dev.\r\n\r\nAI that is helpful, harmless, and honest is complemented by a codebase that is simple, safe, and smol - <200 lines of Python and Prompts, so this is easy to understand and customize.\r\n\r\n<p align=\""center\"">\r\n  <img height=200 src=\""https://pbs.twimg.com/media/FwEzVCcaMAE7t4h?format=jpg&name=large\"" />\r\n</p>\r\n\r\n\r\n*engineering with prompts, rather than prompt engineering* \r\n\r\nThe demo example in `prompt.md` shows the potential of AI-enabled, but still firmly human developer centric, workflow:\r\n\r\n- Human writes a basic prompt for the app they want to build\r\n- `main.py` generates code\r\n- Human runs/reads the code\r\n- Human can:\r\n  - simply add to the prompt as they discover underspecified parts of the prompt"", ""- simply add to the prompt as they discover underspecified parts of the prompt\r\n  - manually runs the code and identifies errors\r\n  - *paste the error into the prompt* just like they would file a github issue\r\n  - for extra help, they can use `debugger.py` which reads the whole codebase to make specific code change suggestions\r\n\r\nLoop until happiness is attained. Notice that AI is only used as long as it is adding value - once it gets in your way, just take over the codebase from your smol junior developer with no fuss and no hurt feelings. (*we could also have smol-dev take over an existing codebase and bootstrap its own prompt... but that's a Future Direction*)\r\n\r\n*Not no code, not low code, but some third thing.* \r\n\r\nPerhaps a higher order evolution of programming where you still need to be technical, but no longer have to implement every detail at least to scaffold things out.\r\n\r\n## video demo\r\n\r\n[![https://i3.ytimg.com/vi/UCo7YeTy-aE/hqdefault.jpg](https://i3.ytimg.com/vi/UCo7YeTy-aE/hqdefault.jpg)](https://youtu.be/UCo7YeTy-aE)\r\n\r\n## arch diagram\r\n\r\nnaturally generated with gpt4, like [we did for babyagi](https://twitter.com/swyx/status/1648724820316786688)\r\n![image](https://github.com/smol-ai/developer/assets/6764957/f8fc68f4-77f6-43ee-852f-a35fb195430a)\r\n\r\n\r\n### innovations and insights\r\n\r\n> Please subscribe to https://latent.space/ for a fuller writeup and insights and reflections"", ""## install\r\n\r\nit's basically: \r\n\r\n- `git clone https://github.com/smol-ai/developer`.\r\n- copy over `.example.env` to `.env` filling in your API keys.\r\n\r\nThere are no python dependencies to wrangle thanks to using Modal as a [self-provisioning runtime](https://www.google.com/search?q=self+provisioning+runtime).\r\n\r\nUnfortunately this project also uses 3 waitlisted things:\r\n\r\n- Modal.com - `pip install modal-client` (private beta - hit up the modal team to get an invite, and login)\r\n  - You can run this project w/o Modal following these instructions:\r\n  - `pip install -r requirements.txt`\r\n  - `python main_no_modal.py YOUR_PROMPT_HERE`\r\n- GPT-4 api (private beta) - can use 3.5 but obviously wont be as good\r\n- (for the demo project) anthropic claude 100k context api (private beta)\r\n\r\n> yes, the most important skill in being an ai engineer is social engineering to get off waitlists. Modal will let you in if you say the keyword \""swyx\""\r\n\r\nyou'll have to adapt this code on a fork if you want to use it on other infra. please open issues/PRs and i'll happily highlight your fork here.\r\n\r\n### trying the example chrome extension"", ""modal-client\r\nopenai\r\ntiktoken"", ""- **ability to install its own dependencies**\r\n  - this leaks into depending on the execution environment, which we all know is the path to dependency madness. how to avoid? dockerize? nix? [web container](https://twitter.com/litbid/status/1658154530385670150)?\r\n  - Modal has an interesting possibility: generate functions that speak modal which also solves the dependency thing https://twitter.com/akshat_b/status/1658146096902811657\r\n- **self-heal** by running the code itself and use errors as information for reprompting \r\n  - however its a bit hard to get errors from the chrome extension environment so we did not try this\r\n- **using anthropic as the coding layer**\r\n  - you can run `modal run anthropic.py --prompt prompt.md --outputdir=anthropic` to try it\r\n  - but it doesnt work because anthropic doesnt follow instructions to generate file code very well.\r\n- **make agents that autonomously run this code in a loop/watch the prompt file** and regenerate code each time, on a new git branch\r\n  - the code could be generated on 5 simultaneous git branches and checking their output would just involve switching git branches""]}",50,0.7098863124847412,2,Can my junior dev create a website?
CONTEXT_VALIDATOR,"{""query"": ""What are the prerequisites for a junior developer to create a website using the smol-ai/developer repository? Are there any specific skills or knowledge required?"", ""repo"": ""https://github.com/smol-ai/developer"", ""similar_documents"": [""# smol developer\r\n\r\n***Human-centric & Coherent Whole Program Synthesis*** aka your own personal junior developer\r\n\r\n> [Build the thing that builds the thing!](https://twitter.com/swyx/status/1657578738345979905) a `smol dev` for every dev in every situation\r\n\r\nthis is a prototype of a \""junior developer\"" agent (aka `smol dev`) that scaffolds an entire codebase out for you once you give it a product spec, but does not end the world or overpromise AGI. instead of making and maintaining specific, rigid, one-shot starters, like `create-react-app`, or `create-nextjs-app`, this is basically [`create-anything-app`](https://news.ycombinator.com/item?id=35942352) where you develop your scaffolding prompt in a tight loop with your smol dev.\r\n\r\nAI that is helpful, harmless, and honest is complemented by a codebase that is simple, safe, and smol - <200 lines of Python and Prompts, so this is easy to understand and customize.\r\n\r\n<p align=\""center\"">\r\n  <img height=200 src=\""https://pbs.twimg.com/media/FwEzVCcaMAE7t4h?format=jpg&name=large\"" />\r\n</p>\r\n\r\n\r\n*engineering with prompts, rather than prompt engineering* \r\n\r\nThe demo example in `prompt.md` shows the potential of AI-enabled, but still firmly human developer centric, workflow:\r\n\r\n- Human writes a basic prompt for the app they want to build\r\n- `main.py` generates code\r\n- Human runs/reads the code\r\n- Human can:\r\n  - simply add to the prompt as they discover underspecified parts of the prompt"", ""- simply add to the prompt as they discover underspecified parts of the prompt\r\n  - manually runs the code and identifies errors\r\n  - *paste the error into the prompt* just like they would file a github issue\r\n  - for extra help, they can use `debugger.py` which reads the whole codebase to make specific code change suggestions\r\n\r\nLoop until happiness is attained. Notice that AI is only used as long as it is adding value - once it gets in your way, just take over the codebase from your smol junior developer with no fuss and no hurt feelings. (*we could also have smol-dev take over an existing codebase and bootstrap its own prompt... but that's a Future Direction*)\r\n\r\n*Not no code, not low code, but some third thing.* \r\n\r\nPerhaps a higher order evolution of programming where you still need to be technical, but no longer have to implement every detail at least to scaffold things out.\r\n\r\n## video demo\r\n\r\n[![https://i3.ytimg.com/vi/UCo7YeTy-aE/hqdefault.jpg](https://i3.ytimg.com/vi/UCo7YeTy-aE/hqdefault.jpg)](https://youtu.be/UCo7YeTy-aE)\r\n\r\n## arch diagram\r\n\r\nnaturally generated with gpt4, like [we did for babyagi](https://twitter.com/swyx/status/1648724820316786688)\r\n![image](https://github.com/smol-ai/developer/assets/6764957/f8fc68f4-77f6-43ee-852f-a35fb195430a)\r\n\r\n\r\n### innovations and insights\r\n\r\n> Please subscribe to https://latent.space/ for a fuller writeup and insights and reflections"", ""## install\r\n\r\nit's basically: \r\n\r\n- `git clone https://github.com/smol-ai/developer`.\r\n- copy over `.example.env` to `.env` filling in your API keys.\r\n\r\nThere are no python dependencies to wrangle thanks to using Modal as a [self-provisioning runtime](https://www.google.com/search?q=self+provisioning+runtime).\r\n\r\nUnfortunately this project also uses 3 waitlisted things:\r\n\r\n- Modal.com - `pip install modal-client` (private beta - hit up the modal team to get an invite, and login)\r\n  - You can run this project w/o Modal following these instructions:\r\n  - `pip install -r requirements.txt`\r\n  - `python main_no_modal.py YOUR_PROMPT_HERE`\r\n- GPT-4 api (private beta) - can use 3.5 but obviously wont be as good\r\n- (for the demo project) anthropic claude 100k context api (private beta)\r\n\r\n> yes, the most important skill in being an ai engineer is social engineering to get off waitlists. Modal will let you in if you say the keyword \""swyx\""\r\n\r\nyou'll have to adapt this code on a fork if you want to use it on other infra. please open issues/PRs and i'll happily highlight your fork here.\r\n\r\n### trying the example chrome extension"", ""modal-client\r\nopenai\r\ntiktoken"", ""OPENAI_API_KEY=sk-xxxxxx\r\nANTHROPIC_API_KEY=sk-ant-api03-xxxxxx""]}",50,0.4784872531890869,2,Can my junior dev create a website?
CONTEXT_VALIDATOR,"{""query"": ""How can a junior developer leverage the smol-ai/developer repository to create a website efficiently and effectively? Are there any tips or tricks to keep in mind?"", ""repo"": ""https://github.com/smol-ai/developer"", ""similar_documents"": [""# smol developer\r\n\r\n***Human-centric & Coherent Whole Program Synthesis*** aka your own personal junior developer\r\n\r\n> [Build the thing that builds the thing!](https://twitter.com/swyx/status/1657578738345979905) a `smol dev` for every dev in every situation\r\n\r\nthis is a prototype of a \""junior developer\"" agent (aka `smol dev`) that scaffolds an entire codebase out for you once you give it a product spec, but does not end the world or overpromise AGI. instead of making and maintaining specific, rigid, one-shot starters, like `create-react-app`, or `create-nextjs-app`, this is basically [`create-anything-app`](https://news.ycombinator.com/item?id=35942352) where you develop your scaffolding prompt in a tight loop with your smol dev.\r\n\r\nAI that is helpful, harmless, and honest is complemented by a codebase that is simple, safe, and smol - <200 lines of Python and Prompts, so this is easy to understand and customize.\r\n\r\n<p align=\""center\"">\r\n  <img height=200 src=\""https://pbs.twimg.com/media/FwEzVCcaMAE7t4h?format=jpg&name=large\"" />\r\n</p>\r\n\r\n\r\n*engineering with prompts, rather than prompt engineering* \r\n\r\nThe demo example in `prompt.md` shows the potential of AI-enabled, but still firmly human developer centric, workflow:\r\n\r\n- Human writes a basic prompt for the app they want to build\r\n- `main.py` generates code\r\n- Human runs/reads the code\r\n- Human can:\r\n  - simply add to the prompt as they discover underspecified parts of the prompt"", ""- simply add to the prompt as they discover underspecified parts of the prompt\r\n  - manually runs the code and identifies errors\r\n  - *paste the error into the prompt* just like they would file a github issue\r\n  - for extra help, they can use `debugger.py` which reads the whole codebase to make specific code change suggestions\r\n\r\nLoop until happiness is attained. Notice that AI is only used as long as it is adding value - once it gets in your way, just take over the codebase from your smol junior developer with no fuss and no hurt feelings. (*we could also have smol-dev take over an existing codebase and bootstrap its own prompt... but that's a Future Direction*)\r\n\r\n*Not no code, not low code, but some third thing.* \r\n\r\nPerhaps a higher order evolution of programming where you still need to be technical, but no longer have to implement every detail at least to scaffold things out.\r\n\r\n## video demo\r\n\r\n[![https://i3.ytimg.com/vi/UCo7YeTy-aE/hqdefault.jpg](https://i3.ytimg.com/vi/UCo7YeTy-aE/hqdefault.jpg)](https://youtu.be/UCo7YeTy-aE)\r\n\r\n## arch diagram\r\n\r\nnaturally generated with gpt4, like [we did for babyagi](https://twitter.com/swyx/status/1648724820316786688)\r\n![image](https://github.com/smol-ai/developer/assets/6764957/f8fc68f4-77f6-43ee-852f-a35fb195430a)\r\n\r\n\r\n### innovations and insights\r\n\r\n> Please subscribe to https://latent.space/ for a fuller writeup and insights and reflections"", ""- **ability to install its own dependencies**\r\n  - this leaks into depending on the execution environment, which we all know is the path to dependency madness. how to avoid? dockerize? nix? [web container](https://twitter.com/litbid/status/1658154530385670150)?\r\n  - Modal has an interesting possibility: generate functions that speak modal which also solves the dependency thing https://twitter.com/akshat_b/status/1658146096902811657\r\n- **self-heal** by running the code itself and use errors as information for reprompting \r\n  - however its a bit hard to get errors from the chrome extension environment so we did not try this\r\n- **using anthropic as the coding layer**\r\n  - you can run `modal run anthropic.py --prompt prompt.md --outputdir=anthropic` to try it\r\n  - but it doesnt work because anthropic doesnt follow instructions to generate file code very well.\r\n- **make agents that autonomously run this code in a loop/watch the prompt file** and regenerate code each time, on a new git branch\r\n  - the code could be generated on 5 simultaneous git branches and checking their output would just involve switching git branches"", ""## install\r\n\r\nit's basically: \r\n\r\n- `git clone https://github.com/smol-ai/developer`.\r\n- copy over `.example.env` to `.env` filling in your API keys.\r\n\r\nThere are no python dependencies to wrangle thanks to using Modal as a [self-provisioning runtime](https://www.google.com/search?q=self+provisioning+runtime).\r\n\r\nUnfortunately this project also uses 3 waitlisted things:\r\n\r\n- Modal.com - `pip install modal-client` (private beta - hit up the modal team to get an invite, and login)\r\n  - You can run this project w/o Modal following these instructions:\r\n  - `pip install -r requirements.txt`\r\n  - `python main_no_modal.py YOUR_PROMPT_HERE`\r\n- GPT-4 api (private beta) - can use 3.5 but obviously wont be as good\r\n- (for the demo project) anthropic claude 100k context api (private beta)\r\n\r\n> yes, the most important skill in being an ai engineer is social engineering to get off waitlists. Modal will let you in if you say the keyword \""swyx\""\r\n\r\nyou'll have to adapt this code on a fork if you want to use it on other infra. please open issues/PRs and i'll happily highlight your fork here.\r\n\r\n### trying the example chrome extension"", ""modal-client\r\nopenai\r\ntiktoken""]}",50,31.676108360290527,2,Can my junior dev create a website?
UPGRADE_QUERY,"{""query"": ""Can my junior dev create a website?"", ""repo"": ""https://github.com/smol-ai/developer""}","1. What resources are available in the smol-ai/developer repository for a junior developer to create a website?
2. Can a junior developer with limited experience use the tools and code in the smol-ai/developer repository to build a website?
3. How can a junior developer leverage the smol-ai/developer repository to create a website efficiently and effectively?
4. Are there any specific guidelines or best practices in the smol-ai/developer repository that a junior developer should follow when building a website?
5. What are some examples of successful website projects created by junior developers using the smol-ai/developer repository?",11.23628568649292,2,Can my junior dev create a website?
CONTEXT_VALIDATOR,"{""query"": ""What resources are available in the smol-ai/developer repository for a junior developer to create a website?"", ""repo"": ""https://github.com/smol-ai/developer"", ""similar_documents"": [""# smol developer\r\n\r\n***Human-centric & Coherent Whole Program Synthesis*** aka your own personal junior developer\r\n\r\n> [Build the thing that builds the thing!](https://twitter.com/swyx/status/1657578738345979905) a `smol dev` for every dev in every situation\r\n\r\nthis is a prototype of a \""junior developer\"" agent (aka `smol dev`) that scaffolds an entire codebase out for you once you give it a product spec, but does not end the world or overpromise AGI. instead of making and maintaining specific, rigid, one-shot starters, like `create-react-app`, or `create-nextjs-app`, this is basically [`create-anything-app`](https://news.ycombinator.com/item?id=35942352) where you develop your scaffolding prompt in a tight loop with your smol dev.\r\n\r\nAI that is helpful, harmless, and honest is complemented by a codebase that is simple, safe, and smol - <200 lines of Python and Prompts, so this is easy to understand and customize.\r\n\r\n<p align=\""center\"">\r\n  <img height=200 src=\""https://pbs.twimg.com/media/FwEzVCcaMAE7t4h?format=jpg&name=large\"" />\r\n</p>\r\n\r\n\r\n*engineering with prompts, rather than prompt engineering* \r\n\r\nThe demo example in `prompt.md` shows the potential of AI-enabled, but still firmly human developer centric, workflow:\r\n\r\n- Human writes a basic prompt for the app they want to build\r\n- `main.py` generates code\r\n- Human runs/reads the code\r\n- Human can:\r\n  - simply add to the prompt as they discover underspecified parts of the prompt"", ""- simply add to the prompt as they discover underspecified parts of the prompt\r\n  - manually runs the code and identifies errors\r\n  - *paste the error into the prompt* just like they would file a github issue\r\n  - for extra help, they can use `debugger.py` which reads the whole codebase to make specific code change suggestions\r\n\r\nLoop until happiness is attained. Notice that AI is only used as long as it is adding value - once it gets in your way, just take over the codebase from your smol junior developer with no fuss and no hurt feelings. (*we could also have smol-dev take over an existing codebase and bootstrap its own prompt... but that's a Future Direction*)\r\n\r\n*Not no code, not low code, but some third thing.* \r\n\r\nPerhaps a higher order evolution of programming where you still need to be technical, but no longer have to implement every detail at least to scaffold things out.\r\n\r\n## video demo\r\n\r\n[![https://i3.ytimg.com/vi/UCo7YeTy-aE/hqdefault.jpg](https://i3.ytimg.com/vi/UCo7YeTy-aE/hqdefault.jpg)](https://youtu.be/UCo7YeTy-aE)\r\n\r\n## arch diagram\r\n\r\nnaturally generated with gpt4, like [we did for babyagi](https://twitter.com/swyx/status/1648724820316786688)\r\n![image](https://github.com/smol-ai/developer/assets/6764957/f8fc68f4-77f6-43ee-852f-a35fb195430a)\r\n\r\n\r\n### innovations and insights\r\n\r\n> Please subscribe to https://latent.space/ for a fuller writeup and insights and reflections"", ""modal-client\r\nopenai\r\ntiktoken"", ""## install\r\n\r\nit's basically: \r\n\r\n- `git clone https://github.com/smol-ai/developer`.\r\n- copy over `.example.env` to `.env` filling in your API keys.\r\n\r\nThere are no python dependencies to wrangle thanks to using Modal as a [self-provisioning runtime](https://www.google.com/search?q=self+provisioning+runtime).\r\n\r\nUnfortunately this project also uses 3 waitlisted things:\r\n\r\n- Modal.com - `pip install modal-client` (private beta - hit up the modal team to get an invite, and login)\r\n  - You can run this project w/o Modal following these instructions:\r\n  - `pip install -r requirements.txt`\r\n  - `python main_no_modal.py YOUR_PROMPT_HERE`\r\n- GPT-4 api (private beta) - can use 3.5 but obviously wont be as good\r\n- (for the demo project) anthropic claude 100k context api (private beta)\r\n\r\n> yes, the most important skill in being an ai engineer is social engineering to get off waitlists. Modal will let you in if you say the keyword \""swyx\""\r\n\r\nyou'll have to adapt this code on a fork if you want to use it on other infra. please open issues/PRs and i'll happily highlight your fork here.\r\n\r\n### trying the example chrome extension"", ""### trying the example chrome extension\r\n\r\nthe `/generated` and `/exampleChromeExtension` folder contains `a Chrome Manifest V3 extension that reads the current page, and offers a popup UI that has the page title+content and a textarea for a prompt (with a default value we specify). When the user hits submit, it sends the page title+content to the Anthropic Claude API along with the up to date prompt to summarize it. The user can modify that prompt and re-send the prompt+content to get another summary view of the content.`\r\n\r\n- go to Manage Extensions in Chrome\r\n- load unpacked\r\n- find the relevant folder in your file system and load it\r\n- go to any content heavy site\r\n- click the cute bird\r\n- see it work\r\n\r\nthis entire extension was generated by the prompt in `prompt.md` (except for the images), and was built up over time by adding more words to the prompt in an iterative process.\r\n\r\n## smol dev\r\n\r\nbasic usage\r\n\r\n```bash\r\nmodal run main.py --prompt \""a Chrome extension that, when clicked, opens a small window with a page where you can enter a prompt for reading the currently open page and generating some response from openai\""   \r\n```\r\n\r\nafter a while of adding to your prompt, you can extract your prompt to a file, as long as your \""prompt\"" ends in a .md extension we'll go look for that file\r\n\r\n```bash\r\nmodal run main.py --prompt prompt.md   \r\n```\r\n\r\neach time you run this, the generated directory is deleted (except for images) and all files are rewritten from scratch. \r\n\r\nIn the `shared_dependencies.md` file is a helper file that ensures coherence between files.""]}",50,0.6868672370910645,2,Can my junior dev create a website?
CONTEXT_VALIDATOR,"{""query"": ""Can a junior developer with limited experience use the tools and code in the smol-ai/developer repository to build a website?"", ""repo"": ""https://github.com/smol-ai/developer"", ""similar_documents"": [""# smol developer\r\n\r\n***Human-centric & Coherent Whole Program Synthesis*** aka your own personal junior developer\r\n\r\n> [Build the thing that builds the thing!](https://twitter.com/swyx/status/1657578738345979905) a `smol dev` for every dev in every situation\r\n\r\nthis is a prototype of a \""junior developer\"" agent (aka `smol dev`) that scaffolds an entire codebase out for you once you give it a product spec, but does not end the world or overpromise AGI. instead of making and maintaining specific, rigid, one-shot starters, like `create-react-app`, or `create-nextjs-app`, this is basically [`create-anything-app`](https://news.ycombinator.com/item?id=35942352) where you develop your scaffolding prompt in a tight loop with your smol dev.\r\n\r\nAI that is helpful, harmless, and honest is complemented by a codebase that is simple, safe, and smol - <200 lines of Python and Prompts, so this is easy to understand and customize.\r\n\r\n<p align=\""center\"">\r\n  <img height=200 src=\""https://pbs.twimg.com/media/FwEzVCcaMAE7t4h?format=jpg&name=large\"" />\r\n</p>\r\n\r\n\r\n*engineering with prompts, rather than prompt engineering* \r\n\r\nThe demo example in `prompt.md` shows the potential of AI-enabled, but still firmly human developer centric, workflow:\r\n\r\n- Human writes a basic prompt for the app they want to build\r\n- `main.py` generates code\r\n- Human runs/reads the code\r\n- Human can:\r\n  - simply add to the prompt as they discover underspecified parts of the prompt"", ""- simply add to the prompt as they discover underspecified parts of the prompt\r\n  - manually runs the code and identifies errors\r\n  - *paste the error into the prompt* just like they would file a github issue\r\n  - for extra help, they can use `debugger.py` which reads the whole codebase to make specific code change suggestions\r\n\r\nLoop until happiness is attained. Notice that AI is only used as long as it is adding value - once it gets in your way, just take over the codebase from your smol junior developer with no fuss and no hurt feelings. (*we could also have smol-dev take over an existing codebase and bootstrap its own prompt... but that's a Future Direction*)\r\n\r\n*Not no code, not low code, but some third thing.* \r\n\r\nPerhaps a higher order evolution of programming where you still need to be technical, but no longer have to implement every detail at least to scaffold things out.\r\n\r\n## video demo\r\n\r\n[![https://i3.ytimg.com/vi/UCo7YeTy-aE/hqdefault.jpg](https://i3.ytimg.com/vi/UCo7YeTy-aE/hqdefault.jpg)](https://youtu.be/UCo7YeTy-aE)\r\n\r\n## arch diagram\r\n\r\nnaturally generated with gpt4, like [we did for babyagi](https://twitter.com/swyx/status/1648724820316786688)\r\n![image](https://github.com/smol-ai/developer/assets/6764957/f8fc68f4-77f6-43ee-852f-a35fb195430a)\r\n\r\n\r\n### innovations and insights\r\n\r\n> Please subscribe to https://latent.space/ for a fuller writeup and insights and reflections"", ""## install\r\n\r\nit's basically: \r\n\r\n- `git clone https://github.com/smol-ai/developer`.\r\n- copy over `.example.env` to `.env` filling in your API keys.\r\n\r\nThere are no python dependencies to wrangle thanks to using Modal as a [self-provisioning runtime](https://www.google.com/search?q=self+provisioning+runtime).\r\n\r\nUnfortunately this project also uses 3 waitlisted things:\r\n\r\n- Modal.com - `pip install modal-client` (private beta - hit up the modal team to get an invite, and login)\r\n  - You can run this project w/o Modal following these instructions:\r\n  - `pip install -r requirements.txt`\r\n  - `python main_no_modal.py YOUR_PROMPT_HERE`\r\n- GPT-4 api (private beta) - can use 3.5 but obviously wont be as good\r\n- (for the demo project) anthropic claude 100k context api (private beta)\r\n\r\n> yes, the most important skill in being an ai engineer is social engineering to get off waitlists. Modal will let you in if you say the keyword \""swyx\""\r\n\r\nyou'll have to adapt this code on a fork if you want to use it on other infra. please open issues/PRs and i'll happily highlight your fork here.\r\n\r\n### trying the example chrome extension"", ""### trying the example chrome extension\r\n\r\nthe `/generated` and `/exampleChromeExtension` folder contains `a Chrome Manifest V3 extension that reads the current page, and offers a popup UI that has the page title+content and a textarea for a prompt (with a default value we specify). When the user hits submit, it sends the page title+content to the Anthropic Claude API along with the up to date prompt to summarize it. The user can modify that prompt and re-send the prompt+content to get another summary view of the content.`\r\n\r\n- go to Manage Extensions in Chrome\r\n- load unpacked\r\n- find the relevant folder in your file system and load it\r\n- go to any content heavy site\r\n- click the cute bird\r\n- see it work\r\n\r\nthis entire extension was generated by the prompt in `prompt.md` (except for the images), and was built up over time by adding more words to the prompt in an iterative process.\r\n\r\n## smol dev\r\n\r\nbasic usage\r\n\r\n```bash\r\nmodal run main.py --prompt \""a Chrome extension that, when clicked, opens a small window with a page where you can enter a prompt for reading the currently open page and generating some response from openai\""   \r\n```\r\n\r\nafter a while of adding to your prompt, you can extract your prompt to a file, as long as your \""prompt\"" ends in a .md extension we'll go look for that file\r\n\r\n```bash\r\nmodal run main.py --prompt prompt.md   \r\n```\r\n\r\neach time you run this, the generated directory is deleted (except for images) and all files are rewritten from scratch. \r\n\r\nIn the `shared_dependencies.md` file is a helper file that ensures coherence between files."", ""modal-client\r\nopenai\r\ntiktoken""]}",50,0.6501619815826416,2,Can my junior dev create a website?
CONTEXT_VALIDATOR,"{""query"": ""How can a junior developer leverage the smol-ai/developer repository to create a website efficiently and effectively?"", ""repo"": ""https://github.com/smol-ai/developer"", ""similar_documents"": [""# smol developer\r\n\r\n***Human-centric & Coherent Whole Program Synthesis*** aka your own personal junior developer\r\n\r\n> [Build the thing that builds the thing!](https://twitter.com/swyx/status/1657578738345979905) a `smol dev` for every dev in every situation\r\n\r\nthis is a prototype of a \""junior developer\"" agent (aka `smol dev`) that scaffolds an entire codebase out for you once you give it a product spec, but does not end the world or overpromise AGI. instead of making and maintaining specific, rigid, one-shot starters, like `create-react-app`, or `create-nextjs-app`, this is basically [`create-anything-app`](https://news.ycombinator.com/item?id=35942352) where you develop your scaffolding prompt in a tight loop with your smol dev.\r\n\r\nAI that is helpful, harmless, and honest is complemented by a codebase that is simple, safe, and smol - <200 lines of Python and Prompts, so this is easy to understand and customize.\r\n\r\n<p align=\""center\"">\r\n  <img height=200 src=\""https://pbs.twimg.com/media/FwEzVCcaMAE7t4h?format=jpg&name=large\"" />\r\n</p>\r\n\r\n\r\n*engineering with prompts, rather than prompt engineering* \r\n\r\nThe demo example in `prompt.md` shows the potential of AI-enabled, but still firmly human developer centric, workflow:\r\n\r\n- Human writes a basic prompt for the app they want to build\r\n- `main.py` generates code\r\n- Human runs/reads the code\r\n- Human can:\r\n  - simply add to the prompt as they discover underspecified parts of the prompt"", ""- simply add to the prompt as they discover underspecified parts of the prompt\r\n  - manually runs the code and identifies errors\r\n  - *paste the error into the prompt* just like they would file a github issue\r\n  - for extra help, they can use `debugger.py` which reads the whole codebase to make specific code change suggestions\r\n\r\nLoop until happiness is attained. Notice that AI is only used as long as it is adding value - once it gets in your way, just take over the codebase from your smol junior developer with no fuss and no hurt feelings. (*we could also have smol-dev take over an existing codebase and bootstrap its own prompt... but that's a Future Direction*)\r\n\r\n*Not no code, not low code, but some third thing.* \r\n\r\nPerhaps a higher order evolution of programming where you still need to be technical, but no longer have to implement every detail at least to scaffold things out.\r\n\r\n## video demo\r\n\r\n[![https://i3.ytimg.com/vi/UCo7YeTy-aE/hqdefault.jpg](https://i3.ytimg.com/vi/UCo7YeTy-aE/hqdefault.jpg)](https://youtu.be/UCo7YeTy-aE)\r\n\r\n## arch diagram\r\n\r\nnaturally generated with gpt4, like [we did for babyagi](https://twitter.com/swyx/status/1648724820316786688)\r\n![image](https://github.com/smol-ai/developer/assets/6764957/f8fc68f4-77f6-43ee-852f-a35fb195430a)\r\n\r\n\r\n### innovations and insights\r\n\r\n> Please subscribe to https://latent.space/ for a fuller writeup and insights and reflections"", ""## install\r\n\r\nit's basically: \r\n\r\n- `git clone https://github.com/smol-ai/developer`.\r\n- copy over `.example.env` to `.env` filling in your API keys.\r\n\r\nThere are no python dependencies to wrangle thanks to using Modal as a [self-provisioning runtime](https://www.google.com/search?q=self+provisioning+runtime).\r\n\r\nUnfortunately this project also uses 3 waitlisted things:\r\n\r\n- Modal.com - `pip install modal-client` (private beta - hit up the modal team to get an invite, and login)\r\n  - You can run this project w/o Modal following these instructions:\r\n  - `pip install -r requirements.txt`\r\n  - `python main_no_modal.py YOUR_PROMPT_HERE`\r\n- GPT-4 api (private beta) - can use 3.5 but obviously wont be as good\r\n- (for the demo project) anthropic claude 100k context api (private beta)\r\n\r\n> yes, the most important skill in being an ai engineer is social engineering to get off waitlists. Modal will let you in if you say the keyword \""swyx\""\r\n\r\nyou'll have to adapt this code on a fork if you want to use it on other infra. please open issues/PRs and i'll happily highlight your fork here.\r\n\r\n### trying the example chrome extension"", ""- **ability to install its own dependencies**\r\n  - this leaks into depending on the execution environment, which we all know is the path to dependency madness. how to avoid? dockerize? nix? [web container](https://twitter.com/litbid/status/1658154530385670150)?\r\n  - Modal has an interesting possibility: generate functions that speak modal which also solves the dependency thing https://twitter.com/akshat_b/status/1658146096902811657\r\n- **self-heal** by running the code itself and use errors as information for reprompting \r\n  - however its a bit hard to get errors from the chrome extension environment so we did not try this\r\n- **using anthropic as the coding layer**\r\n  - you can run `modal run anthropic.py --prompt prompt.md --outputdir=anthropic` to try it\r\n  - but it doesnt work because anthropic doesnt follow instructions to generate file code very well.\r\n- **make agents that autonomously run this code in a loop/watch the prompt file** and regenerate code each time, on a new git branch\r\n  - the code could be generated on 5 simultaneous git branches and checking their output would just involve switching git branches"", ""modal-client\r\nopenai\r\ntiktoken""]}",70,1.638012170791626,2,Can my junior dev create a website?
RUN_QUERY_RAG,"{""query"": ""How can a junior developer leverage the smol-ai/developer repository to create a website efficiently and effectively?"", ""repo"": ""https://github.com/smol-ai/developer"", ""similar_documents"": [""# smol developer\r\n\r\n***Human-centric & Coherent Whole Program Synthesis*** aka your own personal junior developer\r\n\r\n> [Build the thing that builds the thing!](https://twitter.com/swyx/status/1657578738345979905) a `smol dev` for every dev in every situation\r\n\r\nthis is a prototype of a \""junior developer\"" agent (aka `smol dev`) that scaffolds an entire codebase out for you once you give it a product spec, but does not end the world or overpromise AGI. instead of making and maintaining specific, rigid, one-shot starters, like `create-react-app`, or `create-nextjs-app`, this is basically [`create-anything-app`](https://news.ycombinator.com/item?id=35942352) where you develop your scaffolding prompt in a tight loop with your smol dev.\r\n\r\nAI that is helpful, harmless, and honest is complemented by a codebase that is simple, safe, and smol - <200 lines of Python and Prompts, so this is easy to understand and customize.\r\n\r\n<p align=\""center\"">\r\n  <img height=200 src=\""https://pbs.twimg.com/media/FwEzVCcaMAE7t4h?format=jpg&name=large\"" />\r\n</p>\r\n\r\n\r\n*engineering with prompts, rather than prompt engineering* \r\n\r\nThe demo example in `prompt.md` shows the potential of AI-enabled, but still firmly human developer centric, workflow:\r\n\r\n- Human writes a basic prompt for the app they want to build\r\n- `main.py` generates code\r\n- Human runs/reads the code\r\n- Human can:\r\n  - simply add to the prompt as they discover underspecified parts of the prompt"", ""- simply add to the prompt as they discover underspecified parts of the prompt\r\n  - manually runs the code and identifies errors\r\n  - *paste the error into the prompt* just like they would file a github issue\r\n  - for extra help, they can use `debugger.py` which reads the whole codebase to make specific code change suggestions\r\n\r\nLoop until happiness is attained. Notice that AI is only used as long as it is adding value - once it gets in your way, just take over the codebase from your smol junior developer with no fuss and no hurt feelings. (*we could also have smol-dev take over an existing codebase and bootstrap its own prompt... but that's a Future Direction*)\r\n\r\n*Not no code, not low code, but some third thing.* \r\n\r\nPerhaps a higher order evolution of programming where you still need to be technical, but no longer have to implement every detail at least to scaffold things out.\r\n\r\n## video demo\r\n\r\n[![https://i3.ytimg.com/vi/UCo7YeTy-aE/hqdefault.jpg](https://i3.ytimg.com/vi/UCo7YeTy-aE/hqdefault.jpg)](https://youtu.be/UCo7YeTy-aE)\r\n\r\n## arch diagram\r\n\r\nnaturally generated with gpt4, like [we did for babyagi](https://twitter.com/swyx/status/1648724820316786688)\r\n![image](https://github.com/smol-ai/developer/assets/6764957/f8fc68f4-77f6-43ee-852f-a35fb195430a)\r\n\r\n\r\n### innovations and insights\r\n\r\n> Please subscribe to https://latent.space/ for a fuller writeup and insights and reflections"", ""## install\r\n\r\nit's basically: \r\n\r\n- `git clone https://github.com/smol-ai/developer`.\r\n- copy over `.example.env` to `.env` filling in your API keys.\r\n\r\nThere are no python dependencies to wrangle thanks to using Modal as a [self-provisioning runtime](https://www.google.com/search?q=self+provisioning+runtime).\r\n\r\nUnfortunately this project also uses 3 waitlisted things:\r\n\r\n- Modal.com - `pip install modal-client` (private beta - hit up the modal team to get an invite, and login)\r\n  - You can run this project w/o Modal following these instructions:\r\n  - `pip install -r requirements.txt`\r\n  - `python main_no_modal.py YOUR_PROMPT_HERE`\r\n- GPT-4 api (private beta) - can use 3.5 but obviously wont be as good\r\n- (for the demo project) anthropic claude 100k context api (private beta)\r\n\r\n> yes, the most important skill in being an ai engineer is social engineering to get off waitlists. Modal will let you in if you say the keyword \""swyx\""\r\n\r\nyou'll have to adapt this code on a fork if you want to use it on other infra. please open issues/PRs and i'll happily highlight your fork here.\r\n\r\n### trying the example chrome extension"", ""- **ability to install its own dependencies**\r\n  - this leaks into depending on the execution environment, which we all know is the path to dependency madness. how to avoid? dockerize? nix? [web container](https://twitter.com/litbid/status/1658154530385670150)?\r\n  - Modal has an interesting possibility: generate functions that speak modal which also solves the dependency thing https://twitter.com/akshat_b/status/1658146096902811657\r\n- **self-heal** by running the code itself and use errors as information for reprompting \r\n  - however its a bit hard to get errors from the chrome extension environment so we did not try this\r\n- **using anthropic as the coding layer**\r\n  - you can run `modal run anthropic.py --prompt prompt.md --outputdir=anthropic` to try it\r\n  - but it doesnt work because anthropic doesnt follow instructions to generate file code very well.\r\n- **make agents that autonomously run this code in a loop/watch the prompt file** and regenerate code each time, on a new git branch\r\n  - the code could be generated on 5 simultaneous git branches and checking their output would just involve switching git branches"", ""modal-client\r\nopenai\r\ntiktoken""]}","To efficiently and effectively create a website using the smol-ai/developer repository, a junior developer can leverage the ""smol dev"" agent that scaffolds an entire codebase based on a product spec. This prototype AI-enabled workflow is human-centric and allows for customization and understanding with less than 200 lines of Python and Prompts. The developer can write a basic prompt for the app they want to build, generate code with main.py, run/read the code, and add to the prompt as they discover underspecified parts. The AI is only used as long as it adds value, and the developer can take over the codebase from the ""smol dev"" with no fuss. The repository requires Modal.com, GPT-4 API, and anthropic claude 100k context API, which are private beta, but the code can be adapted on a fork for other infrastructures. The repository also discusses potential challenges such as dependency management and self-healing.",19.978325605392456,2,Can my junior dev create a website?
